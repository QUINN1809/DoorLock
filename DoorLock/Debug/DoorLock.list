
DoorLock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a98  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003c20  08003c20  00004c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c58  08003c58  00005034  2**0
                  CONTENTS
  4 .ARM          00000000  08003c58  08003c58  00005034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c58  08003c58  00005034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c58  08003c58  00004c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c5c  08003c5c  00004c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08003c60  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005034  2**0
                  CONTENTS
 10 .bss          000001ac  20000034  20000034  00005034  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e0  200001e0  00005034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011596  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024a2  00000000  00000000  000165fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  00018aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c50  00000000  00000000  00019a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c3ed  00000000  00000000  0001a698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015870  00000000  00000000  00036a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5800  00000000  00000000  0004c2f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f1af5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041d0  00000000  00000000  000f1b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  000f5d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c08 	.word	0x08003c08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	08003c08 	.word	0x08003c08

080001c8 <setButtonTimer>:
uint16_t GPIO_PIN[NUM_COLUMNS] = {GPIO_PIN_6, GPIO_PIN_6, GPIO_PIN_6};

char passcode[PASSCODE_SIZE];

void setButtonTimer(TIM_HandleTypeDef timer)
{
 80001c8:	b084      	sub	sp, #16
 80001ca:	b580      	push	{r7, lr}
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	f107 0c08 	add.w	ip, r7, #8
 80001d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	htim1 = timer;
 80001d6:	4b07      	ldr	r3, [pc, #28]	@ (80001f4 <setButtonTimer+0x2c>)
 80001d8:	4618      	mov	r0, r3
 80001da:	f107 0308 	add.w	r3, r7, #8
 80001de:	224c      	movs	r2, #76	@ 0x4c
 80001e0:	4619      	mov	r1, r3
 80001e2:	f003 fd03 	bl	8003bec <memcpy>
}
 80001e6:	bf00      	nop
 80001e8:	46bd      	mov	sp, r7
 80001ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001ee:	b004      	add	sp, #16
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	200000bc 	.word	0x200000bc

080001f8 <scanButton>:

uint16_t scanButton(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
	uint16_t button = RETURN_NONE;
 80001fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000202:	80fb      	strh	r3, [r7, #6]

	for(uint8_t col = 0; col < NUM_COLUMNS; col++)
 8000204:	2300      	movs	r3, #0
 8000206:	717b      	strb	r3, [r7, #5]
 8000208:	e085      	b.n	8000316 <scanButton+0x11e>
	{
		//Write columns high
		HAL_GPIO_WritePin(GPIO_PORT[col], GPIO_PIN[col], GPIO_PIN_SET);
 800020a:	797b      	ldrb	r3, [r7, #5]
 800020c:	4a48      	ldr	r2, [pc, #288]	@ (8000330 <scanButton+0x138>)
 800020e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000212:	797b      	ldrb	r3, [r7, #5]
 8000214:	4a47      	ldr	r2, [pc, #284]	@ (8000334 <scanButton+0x13c>)
 8000216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800021a:	2201      	movs	r2, #1
 800021c:	4619      	mov	r1, r3
 800021e:	f001 f923 	bl	8001468 <HAL_GPIO_WritePin>

		for(uint8_t row = 0; row < NUM_ROWS; row++)
 8000222:	2300      	movs	r3, #0
 8000224:	713b      	strb	r3, [r7, #4]
 8000226:	e064      	b.n	80002f2 <scanButton+0xfa>
		{
			if(HAL_GPIO_ReadPin(GPIO_PORT[col], GPIO_PIN[col]) == true)
 8000228:	797b      	ldrb	r3, [r7, #5]
 800022a:	4a41      	ldr	r2, [pc, #260]	@ (8000330 <scanButton+0x138>)
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	797b      	ldrb	r3, [r7, #5]
 8000232:	4940      	ldr	r1, [pc, #256]	@ (8000334 <scanButton+0x13c>)
 8000234:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000238:	4619      	mov	r1, r3
 800023a:	4610      	mov	r0, r2
 800023c:	f001 f8fc 	bl	8001438 <HAL_GPIO_ReadPin>
 8000240:	4603      	mov	r3, r0
 8000242:	2b01      	cmp	r3, #1
 8000244:	d152      	bne.n	80002ec <scanButton+0xf4>
			{
				HAL_TIM_Base_Start(&htim1);
 8000246:	483c      	ldr	r0, [pc, #240]	@ (8000338 <scanButton+0x140>)
 8000248:	f002 fe34 	bl	8002eb4 <HAL_TIM_Base_Start>

				while(1)
				{
					if (HAL_GPIO_ReadPin(GPIO_PORT[col], GPIO_PIN[col]) == true || __HAL_TIM_GET_COUNTER(&htim1) > TIMEOUT)
 800024c:	797b      	ldrb	r3, [r7, #5]
 800024e:	4a38      	ldr	r2, [pc, #224]	@ (8000330 <scanButton+0x138>)
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	797b      	ldrb	r3, [r7, #5]
 8000256:	4937      	ldr	r1, [pc, #220]	@ (8000334 <scanButton+0x13c>)
 8000258:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800025c:	4619      	mov	r1, r3
 800025e:	4610      	mov	r0, r2
 8000260:	f001 f8ea 	bl	8001438 <HAL_GPIO_ReadPin>
 8000264:	4603      	mov	r3, r0
 8000266:	2b01      	cmp	r3, #1
 8000268:	d007      	beq.n	800027a <scanButton+0x82>
 800026a:	4b33      	ldr	r3, [pc, #204]	@ (8000338 <scanButton+0x140>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000270:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000274:	4293      	cmp	r3, r2
 8000276:	d800      	bhi.n	800027a <scanButton+0x82>
 8000278:	e7e8      	b.n	800024c <scanButton+0x54>
					{
						break;
					}
				}

				HAL_TIM_Base_Stop(&htim1);
 800027a:	482f      	ldr	r0, [pc, #188]	@ (8000338 <scanButton+0x140>)
 800027c:	f002 fe6e 	bl	8002f5c <HAL_TIM_Base_Stop>

				if(row < 3)
 8000280:	793b      	ldrb	r3, [r7, #4]
 8000282:	2b02      	cmp	r3, #2
 8000284:	d80c      	bhi.n	80002a0 <scanButton+0xa8>
				{
					button = col * 3 + row + 1;
 8000286:	797b      	ldrb	r3, [r7, #5]
 8000288:	b29b      	uxth	r3, r3
 800028a:	461a      	mov	r2, r3
 800028c:	0052      	lsls	r2, r2, #1
 800028e:	4413      	add	r3, r2
 8000290:	b29a      	uxth	r2, r3
 8000292:	793b      	ldrb	r3, [r7, #4]
 8000294:	b29b      	uxth	r3, r3
 8000296:	4413      	add	r3, r2
 8000298:	b29b      	uxth	r3, r3
 800029a:	3301      	adds	r3, #1
 800029c:	80fb      	strh	r3, [r7, #6]
 800029e:	e018      	b.n	80002d2 <scanButton+0xda>
				}
				else if(row == 4)
 80002a0:	793b      	ldrb	r3, [r7, #4]
 80002a2:	2b04      	cmp	r3, #4
 80002a4:	d115      	bne.n	80002d2 <scanButton+0xda>
				{
					switch(col)
 80002a6:	797b      	ldrb	r3, [r7, #5]
 80002a8:	2b02      	cmp	r3, #2
 80002aa:	d00d      	beq.n	80002c8 <scanButton+0xd0>
 80002ac:	2b02      	cmp	r3, #2
 80002ae:	dc0f      	bgt.n	80002d0 <scanButton+0xd8>
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d002      	beq.n	80002ba <scanButton+0xc2>
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d004      	beq.n	80002c2 <scanButton+0xca>
						case 2:
							button = RETURN_EDIT;
							break;

						default:
							break;
 80002b8:	e00a      	b.n	80002d0 <scanButton+0xd8>
							button = RETURN_LOCK;
 80002ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80002be:	80fb      	strh	r3, [r7, #6]
							break;
 80002c0:	e007      	b.n	80002d2 <scanButton+0xda>
							button = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	80fb      	strh	r3, [r7, #6]
							break;
 80002c6:	e004      	b.n	80002d2 <scanButton+0xda>
							button = RETURN_EDIT;
 80002c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80002cc:	80fb      	strh	r3, [r7, #6]
							break;
 80002ce:	e000      	b.n	80002d2 <scanButton+0xda>
							break;
 80002d0:	bf00      	nop
					}
				}

				HAL_GPIO_WritePin(GPIO_PORT[col], GPIO_PIN[col], GPIO_PIN_RESET);
 80002d2:	797b      	ldrb	r3, [r7, #5]
 80002d4:	4a16      	ldr	r2, [pc, #88]	@ (8000330 <scanButton+0x138>)
 80002d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80002da:	797b      	ldrb	r3, [r7, #5]
 80002dc:	4a15      	ldr	r2, [pc, #84]	@ (8000334 <scanButton+0x13c>)
 80002de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002e2:	2200      	movs	r2, #0
 80002e4:	4619      	mov	r1, r3
 80002e6:	f001 f8bf 	bl	8001468 <HAL_GPIO_WritePin>
				goto breakLoop;
 80002ea:	e019      	b.n	8000320 <scanButton+0x128>
		for(uint8_t row = 0; row < NUM_ROWS; row++)
 80002ec:	793b      	ldrb	r3, [r7, #4]
 80002ee:	3301      	adds	r3, #1
 80002f0:	713b      	strb	r3, [r7, #4]
 80002f2:	793b      	ldrb	r3, [r7, #4]
 80002f4:	2b03      	cmp	r3, #3
 80002f6:	d997      	bls.n	8000228 <scanButton+0x30>
			}
		}

		HAL_GPIO_WritePin(GPIO_PORT[col], GPIO_PIN[col], GPIO_PIN_RESET);
 80002f8:	797b      	ldrb	r3, [r7, #5]
 80002fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000330 <scanButton+0x138>)
 80002fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000300:	797b      	ldrb	r3, [r7, #5]
 8000302:	4a0c      	ldr	r2, [pc, #48]	@ (8000334 <scanButton+0x13c>)
 8000304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000308:	2200      	movs	r2, #0
 800030a:	4619      	mov	r1, r3
 800030c:	f001 f8ac 	bl	8001468 <HAL_GPIO_WritePin>
	for(uint8_t col = 0; col < NUM_COLUMNS; col++)
 8000310:	797b      	ldrb	r3, [r7, #5]
 8000312:	3301      	adds	r3, #1
 8000314:	717b      	strb	r3, [r7, #5]
 8000316:	797b      	ldrb	r3, [r7, #5]
 8000318:	2b02      	cmp	r3, #2
 800031a:	f67f af76 	bls.w	800020a <scanButton+0x12>
	}

	breakLoop:
 800031e:	bf00      	nop

	HAL_Delay(50);
 8000320:	2032      	movs	r0, #50	@ 0x32
 8000322:	f000 fe0d 	bl	8000f40 <HAL_Delay>
	return button;
 8000326:	88fb      	ldrh	r3, [r7, #6]
}
 8000328:	4618      	mov	r0, r3
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000000 	.word	0x20000000
 8000334:	2000000c 	.word	0x2000000c
 8000338:	200000bc 	.word	0x200000bc

0800033c <actionSetPasscode>:

uint16_t actionSetPasscode(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
	uint16_t rtv = RETURN_NONE;
 8000342:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000346:	80fb      	strh	r3, [r7, #6]
	static uint16_t index = 0;
	static char passcodeBuffer[PASSCODE_SIZE];

	uint16_t num = scanButton();
 8000348:	f7ff ff56 	bl	80001f8 <scanButton>
 800034c:	4603      	mov	r3, r0
 800034e:	80bb      	strh	r3, [r7, #4]

	if(__HAL_TIM_GET_COUNTER(&htim1) > TIMEOUT || num == RETURN_LOCK || num == RETURN_EDIT)
 8000350:	4b23      	ldr	r3, [pc, #140]	@ (80003e0 <actionSetPasscode+0xa4>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000356:	f242 7210 	movw	r2, #10000	@ 0x2710
 800035a:	4293      	cmp	r3, r2
 800035c:	d90d      	bls.n	800037a <actionSetPasscode+0x3e>
	{
		index = 0;
 800035e:	4b21      	ldr	r3, [pc, #132]	@ (80003e4 <actionSetPasscode+0xa8>)
 8000360:	2200      	movs	r2, #0
 8000362:	801a      	strh	r2, [r3, #0]
		HAL_TIM_Base_Stop(&htim1);
 8000364:	481e      	ldr	r0, [pc, #120]	@ (80003e0 <actionSetPasscode+0xa4>)
 8000366:	f002 fdf9 	bl	8002f5c <HAL_TIM_Base_Stop>
		memset(passcodeBuffer, 0, sizeof(passcodeBuffer));
 800036a:	2204      	movs	r2, #4
 800036c:	2100      	movs	r1, #0
 800036e:	481e      	ldr	r0, [pc, #120]	@ (80003e8 <actionSetPasscode+0xac>)
 8000370:	f003 fc0f 	bl	8003b92 <memset>
		rtv = num;
 8000374:	88bb      	ldrh	r3, [r7, #4]
 8000376:	80fb      	strh	r3, [r7, #6]
 8000378:	e02d      	b.n	80003d6 <actionSetPasscode+0x9a>
	}
	else if(num != RETURN_NONE)
	{
		passcode[index] = num;
 800037a:	4b1a      	ldr	r3, [pc, #104]	@ (80003e4 <actionSetPasscode+0xa8>)
 800037c:	881b      	ldrh	r3, [r3, #0]
 800037e:	461a      	mov	r2, r3
 8000380:	88bb      	ldrh	r3, [r7, #4]
 8000382:	b2d9      	uxtb	r1, r3
 8000384:	4b19      	ldr	r3, [pc, #100]	@ (80003ec <actionSetPasscode+0xb0>)
 8000386:	5499      	strb	r1, [r3, r2]
		index++;
 8000388:	4b16      	ldr	r3, [pc, #88]	@ (80003e4 <actionSetPasscode+0xa8>)
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	3301      	adds	r3, #1
 800038e:	b29a      	uxth	r2, r3
 8000390:	4b14      	ldr	r3, [pc, #80]	@ (80003e4 <actionSetPasscode+0xa8>)
 8000392:	801a      	strh	r2, [r3, #0]

		if(index == PASSCODE_SIZE)
 8000394:	4b13      	ldr	r3, [pc, #76]	@ (80003e4 <actionSetPasscode+0xa8>)
 8000396:	881b      	ldrh	r3, [r3, #0]
 8000398:	2b04      	cmp	r3, #4
 800039a:	d115      	bne.n	80003c8 <actionSetPasscode+0x8c>
		{
			HAL_TIM_Base_Stop(&htim1);
 800039c:	4810      	ldr	r0, [pc, #64]	@ (80003e0 <actionSetPasscode+0xa4>)
 800039e:	f002 fddd 	bl	8002f5c <HAL_TIM_Base_Stop>
			writeEEPROM(passcode);
 80003a2:	4812      	ldr	r0, [pc, #72]	@ (80003ec <actionSetPasscode+0xb0>)
 80003a4:	f000 f87e 	bl	80004a4 <writeEEPROM>

			index = 0;
 80003a8:	4b0e      	ldr	r3, [pc, #56]	@ (80003e4 <actionSetPasscode+0xa8>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	801a      	strh	r2, [r3, #0]
			memcpy(passcode, passcodeBuffer, PASSCODE_SIZE);
 80003ae:	4b0e      	ldr	r3, [pc, #56]	@ (80003e8 <actionSetPasscode+0xac>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a0e      	ldr	r2, [pc, #56]	@ (80003ec <actionSetPasscode+0xb0>)
 80003b4:	6013      	str	r3, [r2, #0]
			memset(passcodeBuffer, 0, PASSCODE_SIZE);
 80003b6:	2204      	movs	r2, #4
 80003b8:	2100      	movs	r1, #0
 80003ba:	480b      	ldr	r0, [pc, #44]	@ (80003e8 <actionSetPasscode+0xac>)
 80003bc:	f003 fbe9 	bl	8003b92 <memset>
			rtv = RETURN_SUCCESS;
 80003c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80003c4:	80fb      	strh	r3, [r7, #6]
 80003c6:	e006      	b.n	80003d6 <actionSetPasscode+0x9a>
		}
		else if(index == 1)
 80003c8:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <actionSetPasscode+0xa8>)
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d102      	bne.n	80003d6 <actionSetPasscode+0x9a>
		{
			HAL_TIM_Base_Start(&htim1);
 80003d0:	4803      	ldr	r0, [pc, #12]	@ (80003e0 <actionSetPasscode+0xa4>)
 80003d2:	f002 fd6f 	bl	8002eb4 <HAL_TIM_Base_Start>
		}
	}

	return rtv;
 80003d6:	88fb      	ldrh	r3, [r7, #6]
}
 80003d8:	4618      	mov	r0, r3
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	200000bc 	.word	0x200000bc
 80003e4:	20000054 	.word	0x20000054
 80003e8:	20000058 	.word	0x20000058
 80003ec:	20000050 	.word	0x20000050

080003f0 <actionEnterPasscode>:

uint16_t actionEnterPasscode(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
	uint16_t rtv = RETURN_NONE;
 80003f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80003fa:	80fb      	strh	r3, [r7, #6]
	static uint16_t index = 0;
	static char passcodeBuffer[PASSCODE_SIZE];

	uint16_t num = scanButton();
 80003fc:	f7ff fefc 	bl	80001f8 <scanButton>
 8000400:	4603      	mov	r3, r0
 8000402:	807b      	strh	r3, [r7, #2]
	if(num != RETURN_NONE && num != RETURN_LOCK && num != RETURN_EDIT)
	{
		rtv = RETURN_SUCCESS;
 8000404:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000408:	80fb      	strh	r3, [r7, #6]
		passcodeBuffer[index] = num;
 800040a:	4b22      	ldr	r3, [pc, #136]	@ (8000494 <actionEnterPasscode+0xa4>)
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	461a      	mov	r2, r3
 8000410:	887b      	ldrh	r3, [r7, #2]
 8000412:	b2d9      	uxtb	r1, r3
 8000414:	4b20      	ldr	r3, [pc, #128]	@ (8000498 <actionEnterPasscode+0xa8>)
 8000416:	5499      	strb	r1, [r3, r2]
		index++;
 8000418:	4b1e      	ldr	r3, [pc, #120]	@ (8000494 <actionEnterPasscode+0xa4>)
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	3301      	adds	r3, #1
 800041e:	b29a      	uxth	r2, r3
 8000420:	4b1c      	ldr	r3, [pc, #112]	@ (8000494 <actionEnterPasscode+0xa4>)
 8000422:	801a      	strh	r2, [r3, #0]

		if(index == PASSCODE_SIZE)
 8000424:	4b1b      	ldr	r3, [pc, #108]	@ (8000494 <actionEnterPasscode+0xa4>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	2b04      	cmp	r3, #4
 800042a:	d121      	bne.n	8000470 <actionEnterPasscode+0x80>
		{
			for(uint8_t i = 0; i < PASSCODE_SIZE; i++)
 800042c:	2300      	movs	r3, #0
 800042e:	717b      	strb	r3, [r7, #5]
 8000430:	e00f      	b.n	8000452 <actionEnterPasscode+0x62>
			{
				if(passcode[i] != passcodeBuffer[i])
 8000432:	797b      	ldrb	r3, [r7, #5]
 8000434:	4a19      	ldr	r2, [pc, #100]	@ (800049c <actionEnterPasscode+0xac>)
 8000436:	5cd2      	ldrb	r2, [r2, r3]
 8000438:	797b      	ldrb	r3, [r7, #5]
 800043a:	4917      	ldr	r1, [pc, #92]	@ (8000498 <actionEnterPasscode+0xa8>)
 800043c:	5ccb      	ldrb	r3, [r1, r3]
 800043e:	429a      	cmp	r2, r3
 8000440:	d004      	beq.n	800044c <actionEnterPasscode+0x5c>
				{
					rtv = RETURN_FAILURE;
 8000442:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000446:	80fb      	strh	r3, [r7, #6]

					errorLED();
 8000448:	f000 f84e 	bl	80004e8 <errorLED>
			for(uint8_t i = 0; i < PASSCODE_SIZE; i++)
 800044c:	797b      	ldrb	r3, [r7, #5]
 800044e:	3301      	adds	r3, #1
 8000450:	717b      	strb	r3, [r7, #5]
 8000452:	797b      	ldrb	r3, [r7, #5]
 8000454:	2b03      	cmp	r3, #3
 8000456:	d9ec      	bls.n	8000432 <actionEnterPasscode+0x42>
				}
			}

			index = 0;
 8000458:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <actionEnterPasscode+0xa4>)
 800045a:	2200      	movs	r2, #0
 800045c:	801a      	strh	r2, [r3, #0]
			memset(passcodeBuffer, 0, sizeof(passcodeBuffer));
 800045e:	2204      	movs	r2, #4
 8000460:	2100      	movs	r1, #0
 8000462:	480d      	ldr	r0, [pc, #52]	@ (8000498 <actionEnterPasscode+0xa8>)
 8000464:	f003 fb95 	bl	8003b92 <memset>
			HAL_TIM_Base_Stop(&htim1);
 8000468:	480d      	ldr	r0, [pc, #52]	@ (80004a0 <actionEnterPasscode+0xb0>)
 800046a:	f002 fd77 	bl	8002f5c <HAL_TIM_Base_Stop>
 800046e:	e00b      	b.n	8000488 <actionEnterPasscode+0x98>
				successLED();
			}
		}
		else
		{
			if(index == 1)
 8000470:	4b08      	ldr	r3, [pc, #32]	@ (8000494 <actionEnterPasscode+0xa4>)
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d102      	bne.n	800047e <actionEnterPasscode+0x8e>
			{
				HAL_TIM_Base_Start(&htim1);
 8000478:	4809      	ldr	r0, [pc, #36]	@ (80004a0 <actionEnterPasscode+0xb0>)
 800047a:	f002 fd1b 	bl	8002eb4 <HAL_TIM_Base_Start>
			}

			pendingLED();
 800047e:	f000 f83a 	bl	80004f6 <pendingLED>
			rtv = RETURN_NONE;
 8000482:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000486:	80fb      	strh	r3, [r7, #6]
		errorLED();
		memset(passcodeBuffer, 0, sizeof(passcodeBuffer));
		HAL_TIM_Base_Stop(&htim1);
	}

	return rtv;
 8000488:	88fb      	ldrh	r3, [r7, #6]
}
 800048a:	4618      	mov	r0, r3
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	2000005c 	.word	0x2000005c
 8000498:	20000060 	.word	0x20000060
 800049c:	20000050 	.word	0x20000050
 80004a0:	200000bc 	.word	0x200000bc

080004a4 <writeEEPROM>:
{
	return 0;
}

void writeEEPROM(char * msg)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	//HAL_I2C_Mem_Write(hi2c1, , , , msg, sizeof(msg), EEPROM_TIMEOUT);
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <setLEDTimer>:

GPIO_TypeDef *LED_PORTS[NUM_LEDS] = {GPIOA, GPIOA, GPIOA};
uint16_t LED_PINS[NUM_LEDS] = {GPIO_PIN_1, GPIO_PIN_1, GPIO_PIN_1};

void setLEDTimer(TIM_HandleTypeDef timer)
{
 80004b8:	b084      	sub	sp, #16
 80004ba:	b580      	push	{r7, lr}
 80004bc:	af00      	add	r7, sp, #0
 80004be:	f107 0c08 	add.w	ip, r7, #8
 80004c2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	htim3 = timer;
 80004c6:	4b07      	ldr	r3, [pc, #28]	@ (80004e4 <setLEDTimer+0x2c>)
 80004c8:	4618      	mov	r0, r3
 80004ca:	f107 0308 	add.w	r3, r7, #8
 80004ce:	224c      	movs	r2, #76	@ 0x4c
 80004d0:	4619      	mov	r1, r3
 80004d2:	f003 fb8b 	bl	8003bec <memcpy>
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004de:	b004      	add	sp, #16
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	20000108 	.word	0x20000108

080004e8 <errorLED>:

void errorLED(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	activateLED(eERROR);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f000 f809 	bl	8000504 <activateLED>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <pendingLED>:

void pendingLED(void)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	af00      	add	r7, sp, #0
	activateLED(ePENDING);
 80004fa:	2002      	movs	r0, #2
 80004fc:	f000 f802 	bl	8000504 <activateLED>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}

08000504 <activateLED>:
{
	activateLED(eSUCCESS);
}

void activateLED(uint16_t ledType)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	80fb      	strh	r3, [r7, #6]
	if(activeLED == ledType)
 800050e:	4b0b      	ldr	r3, [pc, #44]	@ (800053c <activateLED+0x38>)
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	88fa      	ldrh	r2, [r7, #6]
 8000514:	429a      	cmp	r2, r3
 8000516:	d00c      	beq.n	8000532 <activateLED+0x2e>
	{
		return;
	}

	disableLEDs();
 8000518:	f000 f816 	bl	8000548 <disableLEDs>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800051c:	4b08      	ldr	r3, [pc, #32]	@ (8000540 <activateLED+0x3c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2200      	movs	r2, #0
 8000522:	625a      	str	r2, [r3, #36]	@ 0x24

	activeLEDState = false;
 8000524:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <activateLED+0x40>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
	activeLED = ledType;
 800052a:	4a04      	ldr	r2, [pc, #16]	@ (800053c <activateLED+0x38>)
 800052c:	88fb      	ldrh	r3, [r7, #6]
 800052e:	8013      	strh	r3, [r2, #0]
 8000530:	e000      	b.n	8000534 <activateLED+0x30>
		return;
 8000532:	bf00      	nop
}
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000064 	.word	0x20000064
 8000540:	20000108 	.word	0x20000108
 8000544:	20000066 	.word	0x20000066

08000548 <disableLEDs>:

void disableLEDs(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
	for(int led = 0; led < NUM_LEDS; led++)
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	e00e      	b.n	8000572 <disableLEDs+0x2a>
	{
		HAL_GPIO_WritePin(LED_PORTS[led], LED_PINS[led], GPIO_PIN_RESET);
 8000554:	4a0d      	ldr	r2, [pc, #52]	@ (800058c <disableLEDs+0x44>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800055c:	4a0c      	ldr	r2, [pc, #48]	@ (8000590 <disableLEDs+0x48>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000564:	2200      	movs	r2, #0
 8000566:	4619      	mov	r1, r3
 8000568:	f000 ff7e 	bl	8001468 <HAL_GPIO_WritePin>
	for(int led = 0; led < NUM_LEDS; led++)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3301      	adds	r3, #1
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2b02      	cmp	r3, #2
 8000576:	dded      	ble.n	8000554 <disableLEDs+0xc>
	}

	activeLEDState = false;
 8000578:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <disableLEDs+0x4c>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
	activeLED = eNONE;
 800057e:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <disableLEDs+0x50>)
 8000580:	2200      	movs	r2, #0
 8000582:	801a      	strh	r2, [r3, #0]
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000014 	.word	0x20000014
 8000590:	20000020 	.word	0x20000020
 8000594:	20000066 	.word	0x20000066
 8000598:	20000064 	.word	0x20000064

0800059c <blinkLED>:

void blinkLED(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	if(activeLED == eNONE)
 80005a0:	4b2a      	ldr	r3, [pc, #168]	@ (800064c <blinkLED+0xb0>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d04e      	beq.n	8000646 <blinkLED+0xaa>
	{
		return;
	}

	if(((__HAL_TIM_GET_COUNTER(&htim3) % BLINK_INTERVAL) < (BLINK_INTERVAL / 2)) && !activeLEDState)
 80005a8:	4b29      	ldr	r3, [pc, #164]	@ (8000650 <blinkLED+0xb4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005ae:	4b29      	ldr	r3, [pc, #164]	@ (8000654 <blinkLED+0xb8>)
 80005b0:	fba3 1302 	umull	r1, r3, r3, r2
 80005b4:	095b      	lsrs	r3, r3, #5
 80005b6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80005ba:	fb01 f303 	mul.w	r3, r1, r3
 80005be:	1ad3      	subs	r3, r2, r3
 80005c0:	2bf9      	cmp	r3, #249	@ 0xf9
 80005c2:	d81a      	bhi.n	80005fa <blinkLED+0x5e>
 80005c4:	4b24      	ldr	r3, [pc, #144]	@ (8000658 <blinkLED+0xbc>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	f083 0301 	eor.w	r3, r3, #1
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d013      	beq.n	80005fa <blinkLED+0x5e>
	{
		HAL_GPIO_WritePin(LED_PORTS[activeLED - 1], LED_PINS[activeLED - 1], GPIO_PIN_SET);
 80005d2:	4b1e      	ldr	r3, [pc, #120]	@ (800064c <blinkLED+0xb0>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	4a20      	ldr	r2, [pc, #128]	@ (800065c <blinkLED+0xc0>)
 80005da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005de:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <blinkLED+0xb0>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	3b01      	subs	r3, #1
 80005e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000660 <blinkLED+0xc4>)
 80005e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ea:	2201      	movs	r2, #1
 80005ec:	4619      	mov	r1, r3
 80005ee:	f000 ff3b 	bl	8001468 <HAL_GPIO_WritePin>
		activeLEDState = true;
 80005f2:	4b19      	ldr	r3, [pc, #100]	@ (8000658 <blinkLED+0xbc>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
 80005f8:	e026      	b.n	8000648 <blinkLED+0xac>
	}
	else if(((__HAL_TIM_GET_COUNTER(&htim3) % BLINK_INTERVAL) >= (BLINK_INTERVAL / 2)) && activeLEDState)
 80005fa:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <blinkLED+0xb4>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000600:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <blinkLED+0xb8>)
 8000602:	fba3 1302 	umull	r1, r3, r3, r2
 8000606:	095b      	lsrs	r3, r3, #5
 8000608:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800060c:	fb01 f303 	mul.w	r3, r1, r3
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	2bf9      	cmp	r3, #249	@ 0xf9
 8000614:	d918      	bls.n	8000648 <blinkLED+0xac>
 8000616:	4b10      	ldr	r3, [pc, #64]	@ (8000658 <blinkLED+0xbc>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d014      	beq.n	8000648 <blinkLED+0xac>
	{
		HAL_GPIO_WritePin(LED_PORTS[activeLED - 1], LED_PINS[activeLED - 1], GPIO_PIN_RESET);
 800061e:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <blinkLED+0xb0>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	3b01      	subs	r3, #1
 8000624:	4a0d      	ldr	r2, [pc, #52]	@ (800065c <blinkLED+0xc0>)
 8000626:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800062a:	4b08      	ldr	r3, [pc, #32]	@ (800064c <blinkLED+0xb0>)
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	3b01      	subs	r3, #1
 8000630:	4a0b      	ldr	r2, [pc, #44]	@ (8000660 <blinkLED+0xc4>)
 8000632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000636:	2200      	movs	r2, #0
 8000638:	4619      	mov	r1, r3
 800063a:	f000 ff15 	bl	8001468 <HAL_GPIO_WritePin>
		activeLEDState = true;
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <blinkLED+0xbc>)
 8000640:	2201      	movs	r2, #1
 8000642:	701a      	strb	r2, [r3, #0]
 8000644:	e000      	b.n	8000648 <blinkLED+0xac>
		return;
 8000646:	bf00      	nop
	}
}
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000064 	.word	0x20000064
 8000650:	20000108 	.word	0x20000108
 8000654:	10624dd3 	.word	0x10624dd3
 8000658:	20000066 	.word	0x20000066
 800065c:	20000014 	.word	0x20000014
 8000660:	20000020 	.word	0x20000020

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint16_t state = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	80fb      	strh	r3, [r7, #6]
  bool locked = false;
 800066e:	2300      	movs	r3, #0
 8000670:	717b      	strb	r3, [r7, #5]

  HAL_TIM_Base_Start(&htim3);
 8000672:	4821      	ldr	r0, [pc, #132]	@ (80006f8 <main+0x94>)
 8000674:	f002 fc1e 	bl	8002eb4 <HAL_TIM_Base_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f000 fbfc 	bl	8000e74 <HAL_Init>
  //readEEPROM();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067c:	f000 f83e 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000680:	f000 f9ca 	bl	8000a18 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000684:	f000 f892 	bl	80007ac <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000688:	f000 f996 	bl	80009b8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800068c:	f000 f8ce 	bl	800082c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000690:	f000 f932 	bl	80008f8 <MX_TIM3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t rtv;
  while (1)
  {
	  switch(state)
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	2b03      	cmp	r3, #3
 8000698:	d024      	beq.n	80006e4 <main+0x80>
 800069a:	2b03      	cmp	r3, #3
 800069c:	dc27      	bgt.n	80006ee <main+0x8a>
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d002      	beq.n	80006a8 <main+0x44>
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d005      	beq.n	80006b2 <main+0x4e>
		}

		break;

	  default:
		break;
 80006a6:	e022      	b.n	80006ee <main+0x8a>
		rtv = actionEnterPasscode();
 80006a8:	f7ff fea2 	bl	80003f0 <actionEnterPasscode>
 80006ac:	4603      	mov	r3, r0
 80006ae:	807b      	strh	r3, [r7, #2]
		break;
 80006b0:	e01e      	b.n	80006f0 <main+0x8c>
		if(locked)
 80006b2:	797b      	ldrb	r3, [r7, #5]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d002      	beq.n	80006be <main+0x5a>
			actionUnlock();
 80006b8:	f000 fa58 	bl	8000b6c <actionUnlock>
 80006bc:	e001      	b.n	80006c2 <main+0x5e>
			actionLock();
 80006be:	f000 fa4d 	bl	8000b5c <actionLock>
		locked = !locked;
 80006c2:	797b      	ldrb	r3, [r7, #5]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	bf14      	ite	ne
 80006c8:	2301      	movne	r3, #1
 80006ca:	2300      	moveq	r3, #0
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	f083 0301 	eor.w	r3, r3, #1
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	717b      	strb	r3, [r7, #5]
 80006d6:	797b      	ldrb	r3, [r7, #5]
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	717b      	strb	r3, [r7, #5]
		state = ePASSIVE;
 80006de:	2300      	movs	r3, #0
 80006e0:	80fb      	strh	r3, [r7, #6]
	    break;
 80006e2:	e005      	b.n	80006f0 <main+0x8c>
		 rtv = actionSetPasscode();
 80006e4:	f7ff fe2a 	bl	800033c <actionSetPasscode>
 80006e8:	4603      	mov	r3, r0
 80006ea:	807b      	strh	r3, [r7, #2]
		break;
 80006ec:	e000      	b.n	80006f0 <main+0x8c>
		break;
 80006ee:	bf00      	nop
	}

		blinkLED();
 80006f0:	f7ff ff54 	bl	800059c <blinkLED>
	  switch(state)
 80006f4:	e7ce      	b.n	8000694 <main+0x30>
 80006f6:	bf00      	nop
 80006f8:	20000108 	.word	0x20000108

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b096      	sub	sp, #88	@ 0x58
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000706:	2228      	movs	r2, #40	@ 0x28
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f003 fa41 	bl	8003b92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
 800072e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800073c:	2300      	movs	r3, #0
 800073e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000744:	4618      	mov	r0, r3
 8000746:	f000 ffd9 	bl	80016fc <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000750:	f000 f9fe 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f002 f802 	bl	8002778 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800077a:	f000 f9e9 	bl	8000b50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800077e:	f241 0321 	movw	r3, #4129	@ 0x1021
 8000782:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fa10 	bl	8002bb8 <HAL_RCCEx_PeriphCLKConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800079e:	f000 f9d7 	bl	8000b50 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3758      	adds	r7, #88	@ 0x58
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000824 <MX_I2C1_Init+0x78>)
 80007b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000828 <MX_I2C1_Init+0x7c>)
 80007ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007bc:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c2:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ce:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d4:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e6:	480e      	ldr	r0, [pc, #56]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007e8:	f000 fe56 	bl	8001498 <HAL_I2C_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007f2:	f000 f9ad 	bl	8000b50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f6:	2100      	movs	r1, #0
 80007f8:	4809      	ldr	r0, [pc, #36]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007fa:	f000 fee8 	bl	80015ce <HAL_I2CEx_ConfigAnalogFilter>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000804:	f000 f9a4 	bl	8000b50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000808:	2100      	movs	r1, #0
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_I2C1_Init+0x74>)
 800080c:	f000 ff2a 	bl	8001664 <HAL_I2CEx_ConfigDigitalFilter>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 f99b 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000068 	.word	0x20000068
 8000824:	40005400 	.word	0x40005400
 8000828:	00201d2b 	.word	0x00201d2b

0800082c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800082c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082e:	b099      	sub	sp, #100	@ 0x64
 8000830:	af10      	add	r7, sp, #64	@ 0x40

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800084a:	4b29      	ldr	r3, [pc, #164]	@ (80008f0 <MX_TIM1_Init+0xc4>)
 800084c:	4a29      	ldr	r2, [pc, #164]	@ (80008f4 <MX_TIM1_Init+0xc8>)
 800084e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000850:	4b27      	ldr	r3, [pc, #156]	@ (80008f0 <MX_TIM1_Init+0xc4>)
 8000852:	2247      	movs	r2, #71	@ 0x47
 8000854:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	4b26      	ldr	r3, [pc, #152]	@ (80008f0 <MX_TIM1_Init+0xc4>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800085c:	4b24      	ldr	r3, [pc, #144]	@ (80008f0 <MX_TIM1_Init+0xc4>)
 800085e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000862:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000864:	4b22      	ldr	r3, [pc, #136]	@ (80008f0 <MX_TIM1_Init+0xc4>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800086a:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <MX_TIM1_Init+0xc4>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000870:	4b1f      	ldr	r3, [pc, #124]	@ (80008f0 <MX_TIM1_Init+0xc4>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000876:	481e      	ldr	r0, [pc, #120]	@ (80008f0 <MX_TIM1_Init+0xc4>)
 8000878:	f002 fac4 	bl	8002e04 <HAL_TIM_Base_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000882:	f000 f965 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000886:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800088a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	4619      	mov	r1, r3
 8000892:	4817      	ldr	r0, [pc, #92]	@ (80008f0 <MX_TIM1_Init+0xc4>)
 8000894:	f002 fb89 	bl	8002faa <HAL_TIM_ConfigClockSource>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800089e:	f000 f957 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4619      	mov	r1, r3
 80008b2:	480f      	ldr	r0, [pc, #60]	@ (80008f0 <MX_TIM1_Init+0xc4>)
 80008b4:	f002 fd60 	bl	8003378 <HAL_TIMEx_MasterConfigSynchronization>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008be:	f000 f947 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  setButtonTimer(htim1);
 80008c2:	4e0b      	ldr	r6, [pc, #44]	@ (80008f0 <MX_TIM1_Init+0xc4>)
 80008c4:	466d      	mov	r5, sp
 80008c6:	f106 0410 	add.w	r4, r6, #16
 80008ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80008da:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80008de:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008e2:	f7ff fc71 	bl	80001c8 <setButtonTimer>
  /* USER CODE END TIM1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	3724      	adds	r7, #36	@ 0x24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200000bc 	.word	0x200000bc
 80008f4:	40012c00 	.word	0x40012c00

080008f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	b099      	sub	sp, #100	@ 0x64
 80008fc:	af10      	add	r7, sp, #64	@ 0x40

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000916:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <MX_TIM3_Init+0xb8>)
 8000918:	4a26      	ldr	r2, [pc, #152]	@ (80009b4 <MX_TIM3_Init+0xbc>)
 800091a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800091c:	4b24      	ldr	r3, [pc, #144]	@ (80009b0 <MX_TIM3_Init+0xb8>)
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000922:	4b23      	ldr	r3, [pc, #140]	@ (80009b0 <MX_TIM3_Init+0xb8>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000928:	4b21      	ldr	r3, [pc, #132]	@ (80009b0 <MX_TIM3_Init+0xb8>)
 800092a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800092e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000930:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <MX_TIM3_Init+0xb8>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000936:	4b1e      	ldr	r3, [pc, #120]	@ (80009b0 <MX_TIM3_Init+0xb8>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800093c:	481c      	ldr	r0, [pc, #112]	@ (80009b0 <MX_TIM3_Init+0xb8>)
 800093e:	f002 fa61 	bl	8002e04 <HAL_TIM_Base_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000948:	f000 f902 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000950:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	4619      	mov	r1, r3
 8000958:	4815      	ldr	r0, [pc, #84]	@ (80009b0 <MX_TIM3_Init+0xb8>)
 800095a:	f002 fb26 	bl	8002faa <HAL_TIM_ConfigClockSource>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000964:	f000 f8f4 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4619      	mov	r1, r3
 8000974:	480e      	ldr	r0, [pc, #56]	@ (80009b0 <MX_TIM3_Init+0xb8>)
 8000976:	f002 fcff 	bl	8003378 <HAL_TIMEx_MasterConfigSynchronization>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000980:	f000 f8e6 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  setLEDTimer(htim3);
 8000984:	4e0a      	ldr	r6, [pc, #40]	@ (80009b0 <MX_TIM3_Init+0xb8>)
 8000986:	466d      	mov	r5, sp
 8000988:	f106 0410 	add.w	r4, r6, #16
 800098c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800098e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000992:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000998:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800099c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80009a0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80009a4:	f7ff fd88 	bl	80004b8 <setLEDTimer>
  /* USER CODE END TIM3_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3724      	adds	r7, #36	@ 0x24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009b0:	20000108 	.word	0x20000108
 80009b4:	40000400 	.word	0x40000400

080009b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_USART1_UART_Init+0x58>)
 80009be:	4a15      	ldr	r2, [pc, #84]	@ (8000a14 <MX_USART1_UART_Init+0x5c>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80009c2:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <MX_USART1_UART_Init+0x58>)
 80009c4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80009c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_USART1_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_USART1_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_USART1_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_USART1_UART_Init+0x58>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <MX_USART1_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_USART1_UART_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <MX_USART1_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_USART1_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_USART1_UART_Init+0x58>)
 80009fc:	f002 fd2a 	bl	8003454 <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a06:	f000 f8a3 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000154 	.word	0x20000154
 8000a14:	40013800 	.word	0x40013800

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2e:	4b45      	ldr	r3, [pc, #276]	@ (8000b44 <MX_GPIO_Init+0x12c>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	4a44      	ldr	r2, [pc, #272]	@ (8000b44 <MX_GPIO_Init+0x12c>)
 8000a34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a38:	6153      	str	r3, [r2, #20]
 8000a3a:	4b42      	ldr	r3, [pc, #264]	@ (8000b44 <MX_GPIO_Init+0x12c>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b3f      	ldr	r3, [pc, #252]	@ (8000b44 <MX_GPIO_Init+0x12c>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	4a3e      	ldr	r2, [pc, #248]	@ (8000b44 <MX_GPIO_Init+0x12c>)
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a50:	6153      	str	r3, [r2, #20]
 8000a52:	4b3c      	ldr	r3, [pc, #240]	@ (8000b44 <MX_GPIO_Init+0x12c>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b39      	ldr	r3, [pc, #228]	@ (8000b44 <MX_GPIO_Init+0x12c>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	4a38      	ldr	r2, [pc, #224]	@ (8000b44 <MX_GPIO_Init+0x12c>)
 8000a64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a68:	6153      	str	r3, [r2, #20]
 8000a6a:	4b36      	ldr	r3, [pc, #216]	@ (8000b44 <MX_GPIO_Init+0x12c>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000a76:	2200      	movs	r2, #0
 8000a78:	f640 017b 	movw	r1, #2171	@ 0x87b
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a80:	f000 fcf2 	bl	8001468 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2118      	movs	r1, #24
 8000a88:	482f      	ldr	r0, [pc, #188]	@ (8000b48 <MX_GPIO_Init+0x130>)
 8000a8a:	f000 fced 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	482a      	ldr	r0, [pc, #168]	@ (8000b4c <MX_GPIO_Init+0x134>)
 8000aa2:	f000 fb57 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA3 PA4
                           PA5 PA6 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000aa6:	f640 037b 	movw	r3, #2171	@ 0x87b
 8000aaa:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	4619      	mov	r1, r3
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac2:	f000 fb47 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000ac6:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000aca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae6:	f000 fb35 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aea:	2303      	movs	r3, #3
 8000aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	4619      	mov	r1, r3
 8000afc:	4812      	ldr	r0, [pc, #72]	@ (8000b48 <MX_GPIO_Init+0x130>)
 8000afe:	f000 fb29 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	4619      	mov	r1, r3
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b1a:	f000 fb1b 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000b1e:	2318      	movs	r3, #24
 8000b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4619      	mov	r1, r3
 8000b34:	4804      	ldr	r0, [pc, #16]	@ (8000b48 <MX_GPIO_Init+0x130>)
 8000b36:	f000 fb0d 	bl	8001154 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3720      	adds	r7, #32
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000
 8000b48:	48000400 	.word	0x48000400
 8000b4c:	48001400 	.word	0x48001400

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <Error_Handler+0x8>

08000b5c <actionLock>:

#include "stm32f3xx_hal.h"
#include "motor_control.h"

void actionLock(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	powerMotor(MOTOR_FORWARD, 100U);
 8000b60:	2164      	movs	r1, #100	@ 0x64
 8000b62:	2000      	movs	r0, #0
 8000b64:	f000 f80a 	bl	8000b7c <powerMotor>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <actionUnlock>:

void actionUnlock(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	powerMotor(MOTOR_REVERSE, 100U);
 8000b70:	2164      	movs	r1, #100	@ 0x64
 8000b72:	2001      	movs	r0, #1
 8000b74:	f000 f802 	bl	8000b7c <powerMotor>
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <powerMotor>:

void powerMotor(uint16_t direction, uint16_t steps)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	460a      	mov	r2, r1
 8000b86:	80fb      	strh	r3, [r7, #6]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2102      	movs	r1, #2
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b94:	f000 fc68 	bl	8001468 <HAL_GPIO_WritePin>

	for (uint16_t i = 0; i < steps; i++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	81fb      	strh	r3, [r7, #14]
 8000b9c:	e014      	b.n	8000bc8 <powerMotor+0x4c>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba6:	f000 fc5f 	bl	8001468 <HAL_GPIO_WritePin>
		HAL_Delay(STEP_DELAY);
 8000baa:	200a      	movs	r0, #10
 8000bac:	f000 f9c8 	bl	8000f40 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2102      	movs	r1, #2
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb8:	f000 fc56 	bl	8001468 <HAL_GPIO_WritePin>
		HAL_Delay(STEP_DELAY);
 8000bbc:	200a      	movs	r0, #10
 8000bbe:	f000 f9bf 	bl	8000f40 <HAL_Delay>
	for (uint16_t i = 0; i < steps; i++)
 8000bc2:	89fb      	ldrh	r3, [r7, #14]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	81fb      	strh	r3, [r7, #14]
 8000bc8:	89fa      	ldrh	r2, [r7, #14]
 8000bca:	88bb      	ldrh	r3, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d3e6      	bcc.n	8000b9e <powerMotor+0x22>
	}
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <HAL_MspInit+0x44>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c20 <HAL_MspInit+0x44>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6193      	str	r3, [r2, #24]
 8000bee:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <HAL_MspInit+0x44>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <HAL_MspInit+0x44>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	4a08      	ldr	r2, [pc, #32]	@ (8000c20 <HAL_MspInit+0x44>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c04:	61d3      	str	r3, [r2, #28]
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_MspInit+0x44>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000

08000c24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a17      	ldr	r2, [pc, #92]	@ (8000ca0 <HAL_I2C_MspInit+0x7c>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d127      	bne.n	8000c96 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <HAL_I2C_MspInit+0x80>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	4a16      	ldr	r2, [pc, #88]	@ (8000ca4 <HAL_I2C_MspInit+0x80>)
 8000c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c50:	6153      	str	r3, [r2, #20]
 8000c52:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <HAL_I2C_MspInit+0x80>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c5e:	23c0      	movs	r3, #192	@ 0xc0
 8000c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c62:	2312      	movs	r3, #18
 8000c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	480b      	ldr	r0, [pc, #44]	@ (8000ca8 <HAL_I2C_MspInit+0x84>)
 8000c7a:	f000 fa6b 	bl	8001154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <HAL_I2C_MspInit+0x80>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	4a08      	ldr	r2, [pc, #32]	@ (8000ca4 <HAL_I2C_MspInit+0x80>)
 8000c84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c88:	61d3      	str	r3, [r2, #28]
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_I2C_MspInit+0x80>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	@ 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40005400 	.word	0x40005400
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	48000400 	.word	0x48000400

08000cac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a13      	ldr	r2, [pc, #76]	@ (8000d08 <HAL_TIM_Base_MspInit+0x5c>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d10c      	bne.n	8000cd8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cbe:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <HAL_TIM_Base_MspInit+0x60>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	4a12      	ldr	r2, [pc, #72]	@ (8000d0c <HAL_TIM_Base_MspInit+0x60>)
 8000cc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cc8:	6193      	str	r3, [r2, #24]
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <HAL_TIM_Base_MspInit+0x60>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cd6:	e010      	b.n	8000cfa <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8000d10 <HAL_TIM_Base_MspInit+0x64>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d10b      	bne.n	8000cfa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <HAL_TIM_Base_MspInit+0x60>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	4a09      	ldr	r2, [pc, #36]	@ (8000d0c <HAL_TIM_Base_MspInit+0x60>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	61d3      	str	r3, [r2, #28]
 8000cee:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <HAL_TIM_Base_MspInit+0x60>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40012c00 	.word	0x40012c00
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40000400 	.word	0x40000400

08000d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a18      	ldr	r2, [pc, #96]	@ (8000d94 <HAL_UART_MspInit+0x80>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d129      	bne.n	8000d8a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d36:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <HAL_UART_MspInit+0x84>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	4a17      	ldr	r2, [pc, #92]	@ (8000d98 <HAL_UART_MspInit+0x84>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d40:	6193      	str	r3, [r2, #24]
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <HAL_UART_MspInit+0x84>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_UART_MspInit+0x84>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	4a11      	ldr	r2, [pc, #68]	@ (8000d98 <HAL_UART_MspInit+0x84>)
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d58:	6153      	str	r3, [r2, #20]
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <HAL_UART_MspInit+0x84>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d66:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d78:	2307      	movs	r3, #7
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d86:	f000 f9e5 	bl	8001154 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	@ 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40013800 	.word	0x40013800
 8000d98:	40021000 	.word	0x40021000

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <NMI_Handler+0x4>

08000da4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <MemManage_Handler+0x4>

08000db4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <BusFault_Handler+0x4>

08000dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <UsageFault_Handler+0x4>

08000dc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df2:	f000 f885 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e00:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <SystemInit+0x20>)
 8000e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e06:	4a05      	ldr	r2, [pc, #20]	@ (8000e1c <SystemInit+0x20>)
 8000e08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e58 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e24:	f7ff ffea 	bl	8000dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e28:	480c      	ldr	r0, [pc, #48]	@ (8000e5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e2a:	490d      	ldr	r1, [pc, #52]	@ (8000e60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <LoopForever+0xe>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e40:	4c0a      	ldr	r4, [pc, #40]	@ (8000e6c <LoopForever+0x16>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f002 fea9 	bl	8003ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e52:	f7ff fc07 	bl	8000664 <main>

08000e56 <LoopForever>:

LoopForever:
    b LoopForever
 8000e56:	e7fe      	b.n	8000e56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e58:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000e64:	08003c60 	.word	0x08003c60
  ldr r2, =_sbss
 8000e68:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000e6c:	200001e0 	.word	0x200001e0

08000e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC1_2_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <HAL_Init+0x28>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	@ (8000e9c <HAL_Init+0x28>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f931 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f000 f808 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e90:	f7ff fea4 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40022000 	.word	0x40022000

08000ea0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_InitTick+0x54>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_InitTick+0x58>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f93b 	bl	800113a <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00e      	b.n	8000eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d80a      	bhi.n	8000eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f911 	bl	8001102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4a06      	ldr	r2, [pc, #24]	@ (8000efc <HAL_InitTick+0x5c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000028 	.word	0x20000028
 8000ef8:	20000030 	.word	0x20000030
 8000efc:	2000002c 	.word	0x2000002c

08000f00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_IncTick+0x20>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <HAL_IncTick+0x24>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <HAL_IncTick+0x24>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000030 	.word	0x20000030
 8000f24:	200001dc 	.word	0x200001dc

08000f28 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f2c:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <HAL_GetTick+0x14>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	200001dc 	.word	0x200001dc

08000f40 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff ffee 	bl	8000f28 <HAL_GetTick>
 8000f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f58:	d005      	beq.n	8000f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <HAL_Delay+0x44>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f66:	bf00      	nop
 8000f68:	f7ff ffde 	bl	8000f28 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d8f7      	bhi.n	8000f68 <HAL_Delay+0x28>
  {
  }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000030 	.word	0x20000030

08000f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f98:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <__NVIC_SetPriorityGrouping+0x44>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fba:	4a04      	ldr	r2, [pc, #16]	@ (8000fcc <__NVIC_SetPriorityGrouping+0x44>)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	60d3      	str	r3, [r2, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd4:	4b04      	ldr	r3, [pc, #16]	@ (8000fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	f003 0307 	and.w	r3, r3, #7
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	@ (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	@ (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	@ 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	@ 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010b8:	d301      	bcc.n	80010be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00f      	b.n	80010de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010be:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <SysTick_Config+0x40>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c6:	210f      	movs	r1, #15
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f7ff ff8e 	bl	8000fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <SysTick_Config+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <SysTick_Config+0x40>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff47 	bl	8000f88 <__NVIC_SetPriorityGrouping>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001114:	f7ff ff5c 	bl	8000fd0 <__NVIC_GetPriorityGrouping>
 8001118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff ff8e 	bl	8001040 <NVIC_EncodePriority>
 8001124:	4602      	mov	r2, r0
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff5d 	bl	8000fec <__NVIC_SetPriority>
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffb0 	bl	80010a8 <SysTick_Config>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001162:	e14e      	b.n	8001402 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	2101      	movs	r1, #1
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	4013      	ands	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 8140 	beq.w	80013fc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b01      	cmp	r3, #1
 8001186:	d005      	beq.n	8001194 <HAL_GPIO_Init+0x40>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d130      	bne.n	80011f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ca:	2201      	movs	r2, #1
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	091b      	lsrs	r3, r3, #4
 80011e0:	f003 0201 	and.w	r2, r3, #1
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d017      	beq.n	8001232 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2203      	movs	r2, #3
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d123      	bne.n	8001286 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	08da      	lsrs	r2, r3, #3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3208      	adds	r2, #8
 8001246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	220f      	movs	r2, #15
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	691a      	ldr	r2, [r3, #16]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	08da      	lsrs	r2, r3, #3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3208      	adds	r2, #8
 8001280:	6939      	ldr	r1, [r7, #16]
 8001282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0203 	and.w	r2, r3, #3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 809a 	beq.w	80013fc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c8:	4b55      	ldr	r3, [pc, #340]	@ (8001420 <HAL_GPIO_Init+0x2cc>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a54      	ldr	r2, [pc, #336]	@ (8001420 <HAL_GPIO_Init+0x2cc>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b52      	ldr	r3, [pc, #328]	@ (8001420 <HAL_GPIO_Init+0x2cc>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012e0:	4a50      	ldr	r2, [pc, #320]	@ (8001424 <HAL_GPIO_Init+0x2d0>)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800130a:	d013      	beq.n	8001334 <HAL_GPIO_Init+0x1e0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a46      	ldr	r2, [pc, #280]	@ (8001428 <HAL_GPIO_Init+0x2d4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d00d      	beq.n	8001330 <HAL_GPIO_Init+0x1dc>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a45      	ldr	r2, [pc, #276]	@ (800142c <HAL_GPIO_Init+0x2d8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d007      	beq.n	800132c <HAL_GPIO_Init+0x1d8>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a44      	ldr	r2, [pc, #272]	@ (8001430 <HAL_GPIO_Init+0x2dc>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d101      	bne.n	8001328 <HAL_GPIO_Init+0x1d4>
 8001324:	2303      	movs	r3, #3
 8001326:	e006      	b.n	8001336 <HAL_GPIO_Init+0x1e2>
 8001328:	2305      	movs	r3, #5
 800132a:	e004      	b.n	8001336 <HAL_GPIO_Init+0x1e2>
 800132c:	2302      	movs	r3, #2
 800132e:	e002      	b.n	8001336 <HAL_GPIO_Init+0x1e2>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <HAL_GPIO_Init+0x1e2>
 8001334:	2300      	movs	r3, #0
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	f002 0203 	and.w	r2, r2, #3
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	4093      	lsls	r3, r2
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001346:	4937      	ldr	r1, [pc, #220]	@ (8001424 <HAL_GPIO_Init+0x2d0>)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	3302      	adds	r3, #2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001354:	4b37      	ldr	r3, [pc, #220]	@ (8001434 <HAL_GPIO_Init+0x2e0>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001378:	4a2e      	ldr	r2, [pc, #184]	@ (8001434 <HAL_GPIO_Init+0x2e0>)
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800137e:	4b2d      	ldr	r3, [pc, #180]	@ (8001434 <HAL_GPIO_Init+0x2e0>)
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013a2:	4a24      	ldr	r2, [pc, #144]	@ (8001434 <HAL_GPIO_Init+0x2e0>)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013a8:	4b22      	ldr	r3, [pc, #136]	@ (8001434 <HAL_GPIO_Init+0x2e0>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013cc:	4a19      	ldr	r2, [pc, #100]	@ (8001434 <HAL_GPIO_Init+0x2e0>)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d2:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <HAL_GPIO_Init+0x2e0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001434 <HAL_GPIO_Init+0x2e0>)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3301      	adds	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	fa22 f303 	lsr.w	r3, r2, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	f47f aea9 	bne.w	8001164 <HAL_GPIO_Init+0x10>
  }
}
 8001412:	bf00      	nop
 8001414:	bf00      	nop
 8001416:	371c      	adds	r7, #28
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40021000 	.word	0x40021000
 8001424:	40010000 	.word	0x40010000
 8001428:	48000400 	.word	0x48000400
 800142c:	48000800 	.word	0x48000800
 8001430:	48000c00 	.word	0x48000c00
 8001434:	40010400 	.word	0x40010400

08001438 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	887b      	ldrh	r3, [r7, #2]
 800144a:	4013      	ands	r3, r2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d002      	beq.n	8001456 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001450:	2301      	movs	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e001      	b.n	800145a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800145a:	7bfb      	ldrb	r3, [r7, #15]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001484:	e002      	b.n	800148c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e08d      	b.n	80015c6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d106      	bne.n	80014c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fbb0 	bl	8000c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2224      	movs	r2, #36	@ 0x24
 80014c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0201 	bic.w	r2, r2, #1
 80014da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d107      	bne.n	8001512 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	e006      	b.n	8001520 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800151e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d108      	bne.n	800153a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	e007      	b.n	800154a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001548:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001558:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800155c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800156c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69d9      	ldr	r1, [r3, #28]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1a      	ldr	r2, [r3, #32]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2220      	movs	r2, #32
 80015b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b20      	cmp	r3, #32
 80015e2:	d138      	bne.n	8001656 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e032      	b.n	8001658 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2224      	movs	r2, #36	@ 0x24
 80015fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0201 	bic.w	r2, r2, #1
 8001610:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001620:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6819      	ldr	r1, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0201 	orr.w	r2, r2, #1
 8001640:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2220      	movs	r2, #32
 8001646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	e000      	b.n	8001658 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001656:	2302      	movs	r3, #2
  }
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b20      	cmp	r3, #32
 8001678:	d139      	bne.n	80016ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001684:	2302      	movs	r3, #2
 8001686:	e033      	b.n	80016f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2224      	movs	r2, #36	@ 0x24
 8001694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0201 	bic.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80016b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f042 0201 	orr.w	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2220      	movs	r2, #32
 80016de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80016ee:	2302      	movs	r3, #2
  }
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001702:	af00      	add	r7, sp, #0
 8001704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001708:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800170c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800170e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001712:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	f001 b823 	b.w	8002768 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001726:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 817d 	beq.w	8001a32 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001738:	4bbc      	ldr	r3, [pc, #752]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b04      	cmp	r3, #4
 8001742:	d00c      	beq.n	800175e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001744:	4bb9      	ldr	r3, [pc, #740]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b08      	cmp	r3, #8
 800174e:	d15c      	bne.n	800180a <HAL_RCC_OscConfig+0x10e>
 8001750:	4bb6      	ldr	r3, [pc, #728]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800175c:	d155      	bne.n	800180a <HAL_RCC_OscConfig+0x10e>
 800175e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001762:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001766:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800176a:	fa93 f3a3 	rbit	r3, r3
 800176e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001772:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001776:	fab3 f383 	clz	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	095b      	lsrs	r3, r3, #5
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b01      	cmp	r3, #1
 8001788:	d102      	bne.n	8001790 <HAL_RCC_OscConfig+0x94>
 800178a:	4ba8      	ldr	r3, [pc, #672]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	e015      	b.n	80017bc <HAL_RCC_OscConfig+0xc0>
 8001790:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001794:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001798:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800179c:	fa93 f3a3 	rbit	r3, r3
 80017a0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80017a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017a8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80017ac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80017b0:	fa93 f3a3 	rbit	r3, r3
 80017b4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80017b8:	4b9c      	ldr	r3, [pc, #624]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 80017ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017c0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80017c4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80017c8:	fa92 f2a2 	rbit	r2, r2
 80017cc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80017d0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80017d4:	fab2 f282 	clz	r2, r2
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	f042 0220 	orr.w	r2, r2, #32
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	f002 021f 	and.w	r2, r2, #31
 80017e4:	2101      	movs	r1, #1
 80017e6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 811f 	beq.w	8001a30 <HAL_RCC_OscConfig+0x334>
 80017f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 8116 	bne.w	8001a30 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	f000 bfaf 	b.w	8002768 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800180a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800180e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800181a:	d106      	bne.n	800182a <HAL_RCC_OscConfig+0x12e>
 800181c:	4b83      	ldr	r3, [pc, #524]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a82      	ldr	r2, [pc, #520]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	e036      	b.n	8001898 <HAL_RCC_OscConfig+0x19c>
 800182a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x158>
 800183a:	4b7c      	ldr	r3, [pc, #496]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a7b      	ldr	r2, [pc, #492]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001840:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b79      	ldr	r3, [pc, #484]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a78      	ldr	r2, [pc, #480]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 800184c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e021      	b.n	8001898 <HAL_RCC_OscConfig+0x19c>
 8001854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001858:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001864:	d10c      	bne.n	8001880 <HAL_RCC_OscConfig+0x184>
 8001866:	4b71      	ldr	r3, [pc, #452]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a70      	ldr	r2, [pc, #448]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 800186c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	4b6e      	ldr	r3, [pc, #440]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a6d      	ldr	r2, [pc, #436]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e00b      	b.n	8001898 <HAL_RCC_OscConfig+0x19c>
 8001880:	4b6a      	ldr	r3, [pc, #424]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a69      	ldr	r2, [pc, #420]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b67      	ldr	r3, [pc, #412]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a66      	ldr	r2, [pc, #408]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001892:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001896:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001898:	4b64      	ldr	r3, [pc, #400]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 800189a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189c:	f023 020f 	bic.w	r2, r3, #15
 80018a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	495f      	ldr	r1, [pc, #380]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d059      	beq.n	8001976 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7ff fb31 	bl	8000f28 <HAL_GetTick>
 80018c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff fb2c 	bl	8000f28 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b64      	cmp	r3, #100	@ 0x64
 80018da:	d902      	bls.n	80018e2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	f000 bf43 	b.w	8002768 <HAL_RCC_OscConfig+0x106c>
 80018e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018e6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80018f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	fab3 f383 	clz	r3, r3
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	095b      	lsrs	r3, r3, #5
 8001902:	b2db      	uxtb	r3, r3
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b01      	cmp	r3, #1
 800190c:	d102      	bne.n	8001914 <HAL_RCC_OscConfig+0x218>
 800190e:	4b47      	ldr	r3, [pc, #284]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	e015      	b.n	8001940 <HAL_RCC_OscConfig+0x244>
 8001914:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001918:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001920:	fa93 f3a3 	rbit	r3, r3
 8001924:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001928:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800192c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001930:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001934:	fa93 f3a3 	rbit	r3, r3
 8001938:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800193c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 800193e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001940:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001944:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001948:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800194c:	fa92 f2a2 	rbit	r2, r2
 8001950:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001954:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001958:	fab2 f282 	clz	r2, r2
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	f042 0220 	orr.w	r2, r2, #32
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	f002 021f 	and.w	r2, r2, #31
 8001968:	2101      	movs	r1, #1
 800196a:	fa01 f202 	lsl.w	r2, r1, r2
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0ab      	beq.n	80018cc <HAL_RCC_OscConfig+0x1d0>
 8001974:	e05d      	b.n	8001a32 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff fad7 	bl	8000f28 <HAL_GetTick>
 800197a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197e:	e00a      	b.n	8001996 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff fad2 	bl	8000f28 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b64      	cmp	r3, #100	@ 0x64
 800198e:	d902      	bls.n	8001996 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	f000 bee9 	b.w	8002768 <HAL_RCC_OscConfig+0x106c>
 8001996:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800199a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80019a2:	fa93 f3a3 	rbit	r3, r3
 80019a6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80019aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	095b      	lsrs	r3, r3, #5
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d102      	bne.n	80019c8 <HAL_RCC_OscConfig+0x2cc>
 80019c2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	e015      	b.n	80019f4 <HAL_RCC_OscConfig+0x2f8>
 80019c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019cc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80019dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019e0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80019e4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80019e8:	fa93 f3a3 	rbit	r3, r3
 80019ec:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80019f0:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <HAL_RCC_OscConfig+0x330>)
 80019f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019f8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80019fc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001a00:	fa92 f2a2 	rbit	r2, r2
 8001a04:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001a08:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a0c:	fab2 f282 	clz	r2, r2
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	f042 0220 	orr.w	r2, r2, #32
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	f002 021f 	and.w	r2, r2, #31
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1ab      	bne.n	8001980 <HAL_RCC_OscConfig+0x284>
 8001a28:	e003      	b.n	8001a32 <HAL_RCC_OscConfig+0x336>
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 817d 	beq.w	8001d42 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a48:	4ba6      	ldr	r3, [pc, #664]	@ (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00b      	beq.n	8001a6c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a54:	4ba3      	ldr	r3, [pc, #652]	@ (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d172      	bne.n	8001b46 <HAL_RCC_OscConfig+0x44a>
 8001a60:	4ba0      	ldr	r3, [pc, #640]	@ (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d16c      	bne.n	8001b46 <HAL_RCC_OscConfig+0x44a>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a72:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a76:	fa93 f3a3 	rbit	r3, r3
 8001a7a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001a7e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	095b      	lsrs	r3, r3, #5
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d102      	bne.n	8001a9c <HAL_RCC_OscConfig+0x3a0>
 8001a96:	4b93      	ldr	r3, [pc, #588]	@ (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	e013      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3c8>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001aae:	2302      	movs	r3, #2
 8001ab0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001ab4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001ab8:	fa93 f3a3 	rbit	r3, r3
 8001abc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001ac0:	4b88      	ldr	r3, [pc, #544]	@ (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001aca:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001ace:	fa92 f2a2 	rbit	r2, r2
 8001ad2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001ad6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001ada:	fab2 f282 	clz	r2, r2
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	f042 0220 	orr.w	r2, r2, #32
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	f002 021f 	and.w	r2, r2, #31
 8001aea:	2101      	movs	r1, #1
 8001aec:	fa01 f202 	lsl.w	r2, r1, r2
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00a      	beq.n	8001b0c <HAL_RCC_OscConfig+0x410>
 8001af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	f000 be2e 	b.w	8002768 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0c:	4b75      	ldr	r3, [pc, #468]	@ (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	21f8      	movs	r1, #248	@ 0xf8
 8001b22:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001b2a:	fa91 f1a1 	rbit	r1, r1
 8001b2e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001b32:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001b36:	fab1 f181 	clz	r1, r1
 8001b3a:	b2c9      	uxtb	r1, r1
 8001b3c:	408b      	lsls	r3, r1
 8001b3e:	4969      	ldr	r1, [pc, #420]	@ (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b44:	e0fd      	b.n	8001d42 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8088 	beq.w	8001c68 <HAL_RCC_OscConfig+0x56c>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001b6a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b78:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2301      	movs	r3, #1
 8001b82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff f9d0 	bl	8000f28 <HAL_GetTick>
 8001b88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b8e:	f7ff f9cb 	bl	8000f28 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d902      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	f000 bde2 	b.w	8002768 <HAL_RCC_OscConfig+0x106c>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001bb6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	095b      	lsrs	r3, r3, #5
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d102      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x4d8>
 8001bce:	4b45      	ldr	r3, [pc, #276]	@ (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	e013      	b.n	8001bfc <HAL_RCC_OscConfig+0x500>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001be6:	2302      	movs	r3, #2
 8001be8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001bec:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001bf8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001c02:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001c06:	fa92 f2a2 	rbit	r2, r2
 8001c0a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001c0e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001c12:	fab2 f282 	clz	r2, r2
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	f042 0220 	orr.w	r2, r2, #32
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	f002 021f 	and.w	r2, r2, #31
 8001c22:	2101      	movs	r1, #1
 8001c24:	fa01 f202 	lsl.w	r2, r1, r2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0af      	beq.n	8001b8e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	21f8      	movs	r1, #248	@ 0xf8
 8001c44:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001c4c:	fa91 f1a1 	rbit	r1, r1
 8001c50:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001c54:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001c58:	fab1 f181 	clz	r1, r1
 8001c5c:	b2c9      	uxtb	r1, r1
 8001c5e:	408b      	lsls	r3, r1
 8001c60:	4920      	ldr	r1, [pc, #128]	@ (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
 8001c66:	e06c      	b.n	8001d42 <HAL_RCC_OscConfig+0x646>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001c7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	461a      	mov	r2, r3
 8001c90:	2300      	movs	r3, #0
 8001c92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff f948 	bl	8000f28 <HAL_GetTick>
 8001c98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9e:	f7ff f943 	bl	8000f28 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d902      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	f000 bd5a 	b.w	8002768 <HAL_RCC_OscConfig+0x106c>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	095b      	lsrs	r3, r3, #5
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d104      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x5ec>
 8001cde:	4b01      	ldr	r3, [pc, #4]	@ (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	e015      	b.n	8001d10 <HAL_RCC_OscConfig+0x614>
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	2302      	movs	r3, #2
 8001cea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001d00:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001d0c:	4bc8      	ldr	r3, [pc, #800]	@ (8002030 <HAL_RCC_OscConfig+0x934>)
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	2202      	movs	r2, #2
 8001d12:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001d16:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001d1a:	fa92 f2a2 	rbit	r2, r2
 8001d1e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001d22:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001d26:	fab2 f282 	clz	r2, r2
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	f042 0220 	orr.w	r2, r2, #32
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	f002 021f 	and.w	r2, r2, #31
 8001d36:	2101      	movs	r1, #1
 8001d38:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1ad      	bne.n	8001c9e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8110 	beq.w	8001f78 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d079      	beq.n	8001e5c <HAL_RCC_OscConfig+0x760>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001d72:	fa93 f3a3 	rbit	r3, r3
 8001d76:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	4bab      	ldr	r3, [pc, #684]	@ (8002034 <HAL_RCC_OscConfig+0x938>)
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2301      	movs	r3, #1
 8001d90:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d92:	f7ff f8c9 	bl	8000f28 <HAL_GetTick>
 8001d96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7ff f8c4 	bl	8000f28 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d902      	bls.n	8001db2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	f000 bcdb 	b.w	8002768 <HAL_RCC_OscConfig+0x106c>
 8001db2:	2302      	movs	r3, #2
 8001db4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dcc:	2202      	movs	r2, #2
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	fa93 f2a3 	rbit	r2, r3
 8001dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001df0:	2202      	movs	r2, #2
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	fa93 f2a3 	rbit	r2, r3
 8001e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e0a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0c:	4b88      	ldr	r3, [pc, #544]	@ (8002030 <HAL_RCC_OscConfig+0x934>)
 8001e0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e18:	2102      	movs	r1, #2
 8001e1a:	6019      	str	r1, [r3, #0]
 8001e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e20:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	fa93 f1a3 	rbit	r1, r3
 8001e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e32:	6019      	str	r1, [r3, #0]
  return result;
 8001e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e38:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	2101      	movs	r1, #1
 8001e50:	fa01 f303 	lsl.w	r3, r1, r3
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0a0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x6a0>
 8001e5a:	e08d      	b.n	8001f78 <HAL_RCC_OscConfig+0x87c>
 8001e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e60:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e64:	2201      	movs	r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e6c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	fa93 f2a3 	rbit	r2, r3
 8001e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e7e:	601a      	str	r2, [r3, #0]
  return result;
 8001e80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e84:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e88:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b68      	ldr	r3, [pc, #416]	@ (8002034 <HAL_RCC_OscConfig+0x938>)
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9e:	f7ff f843 	bl	8000f28 <HAL_GetTick>
 8001ea2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea6:	e00a      	b.n	8001ebe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea8:	f7ff f83e 	bl	8000f28 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d902      	bls.n	8001ebe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	f000 bc55 	b.w	8002768 <HAL_RCC_OscConfig+0x106c>
 8001ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ece:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	fa93 f2a3 	rbit	r2, r3
 8001ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001edc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001eea:	2202      	movs	r2, #2
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	fa93 f2a3 	rbit	r2, r3
 8001efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f0e:	2202      	movs	r2, #2
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f16:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	fa93 f2a3 	rbit	r2, r3
 8001f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f24:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f28:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2a:	4b41      	ldr	r3, [pc, #260]	@ (8002030 <HAL_RCC_OscConfig+0x934>)
 8001f2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f32:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f36:	2102      	movs	r1, #2
 8001f38:	6019      	str	r1, [r3, #0]
 8001f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	fa93 f1a3 	rbit	r1, r3
 8001f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f50:	6019      	str	r1, [r3, #0]
  return result;
 8001f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f56:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	fab3 f383 	clz	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f003 031f 	and.w	r3, r3, #31
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d197      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 81a1 	beq.w	80022d0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f94:	4b26      	ldr	r3, [pc, #152]	@ (8002030 <HAL_RCC_OscConfig+0x934>)
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d116      	bne.n	8001fce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa0:	4b23      	ldr	r3, [pc, #140]	@ (8002030 <HAL_RCC_OscConfig+0x934>)
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	4a22      	ldr	r2, [pc, #136]	@ (8002030 <HAL_RCC_OscConfig+0x934>)
 8001fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	61d3      	str	r3, [r2, #28]
 8001fac:	4b20      	ldr	r3, [pc, #128]	@ (8002030 <HAL_RCC_OscConfig+0x934>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001fc6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fce:	4b1a      	ldr	r3, [pc, #104]	@ (8002038 <HAL_RCC_OscConfig+0x93c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d11a      	bne.n	8002010 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fda:	4b17      	ldr	r3, [pc, #92]	@ (8002038 <HAL_RCC_OscConfig+0x93c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a16      	ldr	r2, [pc, #88]	@ (8002038 <HAL_RCC_OscConfig+0x93c>)
 8001fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe6:	f7fe ff9f 	bl	8000f28 <HAL_GetTick>
 8001fea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	e009      	b.n	8002004 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff0:	f7fe ff9a 	bl	8000f28 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b64      	cmp	r3, #100	@ 0x64
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e3b1      	b.n	8002768 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <HAL_RCC_OscConfig+0x93c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0ef      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002014:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d10d      	bne.n	800203c <HAL_RCC_OscConfig+0x940>
 8002020:	4b03      	ldr	r3, [pc, #12]	@ (8002030 <HAL_RCC_OscConfig+0x934>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4a02      	ldr	r2, [pc, #8]	@ (8002030 <HAL_RCC_OscConfig+0x934>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6213      	str	r3, [r2, #32]
 800202c:	e03c      	b.n	80020a8 <HAL_RCC_OscConfig+0x9ac>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	10908120 	.word	0x10908120
 8002038:	40007000 	.word	0x40007000
 800203c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002040:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10c      	bne.n	8002066 <HAL_RCC_OscConfig+0x96a>
 800204c:	4bc1      	ldr	r3, [pc, #772]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4ac0      	ldr	r2, [pc, #768]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	4bbe      	ldr	r3, [pc, #760]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4abd      	ldr	r2, [pc, #756]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 800205e:	f023 0304 	bic.w	r3, r3, #4
 8002062:	6213      	str	r3, [r2, #32]
 8002064:	e020      	b.n	80020a8 <HAL_RCC_OscConfig+0x9ac>
 8002066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b05      	cmp	r3, #5
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x994>
 8002076:	4bb7      	ldr	r3, [pc, #732]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	4ab6      	ldr	r2, [pc, #728]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	6213      	str	r3, [r2, #32]
 8002082:	4bb4      	ldr	r3, [pc, #720]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	4ab3      	ldr	r2, [pc, #716]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6213      	str	r3, [r2, #32]
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0x9ac>
 8002090:	4bb0      	ldr	r3, [pc, #704]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4aaf      	ldr	r2, [pc, #700]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	4bad      	ldr	r3, [pc, #692]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4aac      	ldr	r2, [pc, #688]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 80020a2:	f023 0304 	bic.w	r3, r3, #4
 80020a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8081 	beq.w	80021bc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ba:	f7fe ff35 	bl	8000f28 <HAL_GetTick>
 80020be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c4:	f7fe ff30 	bl	8000f28 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e345      	b.n	8002768 <HAL_RCC_OscConfig+0x106c>
 80020dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020e4:	2202      	movs	r2, #2
 80020e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	fa93 f2a3 	rbit	r2, r3
 80020f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002104:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002108:	2202      	movs	r2, #2
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002110:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	fa93 f2a3 	rbit	r2, r3
 800211a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002122:	601a      	str	r2, [r3, #0]
  return result;
 8002124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002128:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800212c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	b2db      	uxtb	r3, r3
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d102      	bne.n	8002148 <HAL_RCC_OscConfig+0xa4c>
 8002142:	4b84      	ldr	r3, [pc, #528]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	e013      	b.n	8002170 <HAL_RCC_OscConfig+0xa74>
 8002148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002150:	2202      	movs	r2, #2
 8002152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002158:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	fa93 f2a3 	rbit	r2, r3
 8002162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002166:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	4b79      	ldr	r3, [pc, #484]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002174:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002178:	2102      	movs	r1, #2
 800217a:	6011      	str	r1, [r2, #0]
 800217c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002180:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	fa92 f1a2 	rbit	r1, r2
 800218a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800218e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002192:	6011      	str	r1, [r2, #0]
  return result;
 8002194:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002198:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	fab2 f282 	clz	r2, r2
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	f002 021f 	and.w	r2, r2, #31
 80021ae:	2101      	movs	r1, #1
 80021b0:	fa01 f202 	lsl.w	r2, r1, r2
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d084      	beq.n	80020c4 <HAL_RCC_OscConfig+0x9c8>
 80021ba:	e07f      	b.n	80022bc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021bc:	f7fe feb4 	bl	8000f28 <HAL_GetTick>
 80021c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c4:	e00b      	b.n	80021de <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c6:	f7fe feaf 	bl	8000f28 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e2c4      	b.n	8002768 <HAL_RCC_OscConfig+0x106c>
 80021de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80021e6:	2202      	movs	r2, #2
 80021e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ee:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	fa93 f2a3 	rbit	r2, r3
 80021f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002206:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800220a:	2202      	movs	r2, #2
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002212:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	fa93 f2a3 	rbit	r2, r3
 800221c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002220:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002224:	601a      	str	r2, [r3, #0]
  return result;
 8002226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800222e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f043 0302 	orr.w	r3, r3, #2
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d102      	bne.n	800224a <HAL_RCC_OscConfig+0xb4e>
 8002244:	4b43      	ldr	r3, [pc, #268]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	e013      	b.n	8002272 <HAL_RCC_OscConfig+0xb76>
 800224a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002252:	2202      	movs	r2, #2
 8002254:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	fa93 f2a3 	rbit	r2, r3
 8002264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002268:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	4b39      	ldr	r3, [pc, #228]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 8002270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002272:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002276:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800227a:	2102      	movs	r1, #2
 800227c:	6011      	str	r1, [r2, #0]
 800227e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002282:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	fa92 f1a2 	rbit	r1, r2
 800228c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002290:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002294:	6011      	str	r1, [r2, #0]
  return result;
 8002296:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800229a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	fab2 f282 	clz	r2, r2
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	f002 021f 	and.w	r2, r2, #31
 80022b0:	2101      	movs	r1, #1
 80022b2:	fa01 f202 	lsl.w	r2, r1, r2
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d184      	bne.n	80021c6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d105      	bne.n	80022d0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c4:	4b23      	ldr	r3, [pc, #140]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	4a22      	ldr	r2, [pc, #136]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 80022ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 8242 	beq.w	8002766 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002354 <HAL_RCC_OscConfig+0xc58>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	f000 8213 	beq.w	8002716 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	f040 8162 	bne.w	80025c6 <HAL_RCC_OscConfig+0xeca>
 8002302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002306:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800230a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800230e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002314:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	fa93 f2a3 	rbit	r2, r3
 800231e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002322:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002326:	601a      	str	r2, [r3, #0]
  return result;
 8002328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002330:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800233c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	461a      	mov	r2, r3
 8002344:	2300      	movs	r3, #0
 8002346:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe fdee 	bl	8000f28 <HAL_GetTick>
 800234c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002350:	e00c      	b.n	800236c <HAL_RCC_OscConfig+0xc70>
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe fde6 	bl	8000f28 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e1fd      	b.n	8002768 <HAL_RCC_OscConfig+0x106c>
 800236c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002370:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002374:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002378:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	fa93 f2a3 	rbit	r2, r3
 8002388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002390:	601a      	str	r2, [r3, #0]
  return result;
 8002392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002396:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800239a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239c:	fab3 f383 	clz	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d102      	bne.n	80023b6 <HAL_RCC_OscConfig+0xcba>
 80023b0:	4bb0      	ldr	r3, [pc, #704]	@ (8002674 <HAL_RCC_OscConfig+0xf78>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	e027      	b.n	8002406 <HAL_RCC_OscConfig+0xd0a>
 80023b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	fa93 f2a3 	rbit	r2, r3
 80023d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80023e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	fa93 f2a3 	rbit	r2, r3
 80023f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	4b9c      	ldr	r3, [pc, #624]	@ (8002674 <HAL_RCC_OscConfig+0xf78>)
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800240a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800240e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002412:	6011      	str	r1, [r2, #0]
 8002414:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002418:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	fa92 f1a2 	rbit	r1, r2
 8002422:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002426:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800242a:	6011      	str	r1, [r2, #0]
  return result;
 800242c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002430:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	fab2 f282 	clz	r2, r2
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	f042 0220 	orr.w	r2, r2, #32
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	f002 021f 	and.w	r2, r2, #31
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f202 	lsl.w	r2, r1, r2
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d182      	bne.n	8002358 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002452:	4b88      	ldr	r3, [pc, #544]	@ (8002674 <HAL_RCC_OscConfig+0xf78>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800245a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	430b      	orrs	r3, r1
 8002474:	497f      	ldr	r1, [pc, #508]	@ (8002674 <HAL_RCC_OscConfig+0xf78>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
 800247a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002482:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fa93 f2a3 	rbit	r2, r3
 8002496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800249e:	601a      	str	r2, [r3, #0]
  return result;
 80024a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024a8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024aa:	fab3 f383 	clz	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	461a      	mov	r2, r3
 80024bc:	2301      	movs	r3, #1
 80024be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe fd32 	bl	8000f28 <HAL_GetTick>
 80024c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c8:	e009      	b.n	80024de <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ca:	f7fe fd2d 	bl	8000f28 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e144      	b.n	8002768 <HAL_RCC_OscConfig+0x106c>
 80024de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80024e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	fa93 f2a3 	rbit	r2, r3
 80024fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002502:	601a      	str	r2, [r3, #0]
  return result;
 8002504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002508:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800250c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d102      	bne.n	8002528 <HAL_RCC_OscConfig+0xe2c>
 8002522:	4b54      	ldr	r3, [pc, #336]	@ (8002674 <HAL_RCC_OscConfig+0xf78>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	e027      	b.n	8002578 <HAL_RCC_OscConfig+0xe7c>
 8002528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002530:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	fa93 f2a3 	rbit	r2, r3
 8002544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002548:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002552:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002556:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002560:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	fa93 f2a3 	rbit	r2, r3
 800256a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	4b3f      	ldr	r3, [pc, #252]	@ (8002674 <HAL_RCC_OscConfig+0xf78>)
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800257c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002580:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002584:	6011      	str	r1, [r2, #0]
 8002586:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800258a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	fa92 f1a2 	rbit	r1, r2
 8002594:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002598:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800259c:	6011      	str	r1, [r2, #0]
  return result;
 800259e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025a2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	fab2 f282 	clz	r2, r2
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	f042 0220 	orr.w	r2, r2, #32
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	f002 021f 	and.w	r2, r2, #31
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f202 	lsl.w	r2, r1, r2
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d082      	beq.n	80024ca <HAL_RCC_OscConfig+0xdce>
 80025c4:	e0cf      	b.n	8002766 <HAL_RCC_OscConfig+0x106a>
 80025c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ca:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80025ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	fa93 f2a3 	rbit	r2, r3
 80025e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80025ea:	601a      	str	r2, [r3, #0]
  return result;
 80025ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80025f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002600:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	461a      	mov	r2, r3
 8002608:	2300      	movs	r3, #0
 800260a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7fe fc8c 	bl	8000f28 <HAL_GetTick>
 8002610:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	e009      	b.n	800262a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002616:	f7fe fc87 	bl	8000f28 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e09e      	b.n	8002768 <HAL_RCC_OscConfig+0x106c>
 800262a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002632:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	fa93 f2a3 	rbit	r2, r3
 8002646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800264e:	601a      	str	r2, [r3, #0]
  return result;
 8002650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002654:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002658:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b01      	cmp	r3, #1
 800266c:	d104      	bne.n	8002678 <HAL_RCC_OscConfig+0xf7c>
 800266e:	4b01      	ldr	r3, [pc, #4]	@ (8002674 <HAL_RCC_OscConfig+0xf78>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	e029      	b.n	80026c8 <HAL_RCC_OscConfig+0xfcc>
 8002674:	40021000 	.word	0x40021000
 8002678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002680:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	fa93 f2a3 	rbit	r2, r3
 8002694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002698:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80026a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	fa93 f2a3 	rbit	r2, r3
 80026ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026be:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002774 <HAL_RCC_OscConfig+0x1078>)
 80026c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026cc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80026d0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026d4:	6011      	str	r1, [r2, #0]
 80026d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026da:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	fa92 f1a2 	rbit	r1, r2
 80026e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026e8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80026ec:	6011      	str	r1, [r2, #0]
  return result;
 80026ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026f2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	fab2 f282 	clz	r2, r2
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	f042 0220 	orr.w	r2, r2, #32
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	f002 021f 	and.w	r2, r2, #31
 8002708:	2101      	movs	r1, #1
 800270a:	fa01 f202 	lsl.w	r2, r1, r2
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d180      	bne.n	8002616 <HAL_RCC_OscConfig+0xf1a>
 8002714:	e027      	b.n	8002766 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e01e      	b.n	8002768 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800272a:	4b12      	ldr	r3, [pc, #72]	@ (8002774 <HAL_RCC_OscConfig+0x1078>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002732:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002736:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800273a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	429a      	cmp	r2, r3
 8002748:	d10b      	bne.n	8002762 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800274a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800274e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002756:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800275e:	429a      	cmp	r2, r3
 8002760:	d001      	beq.n	8002766 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000

08002778 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b09e      	sub	sp, #120	@ 0x78
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e162      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002790:	4b90      	ldr	r3, [pc, #576]	@ (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d910      	bls.n	80027c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b8d      	ldr	r3, [pc, #564]	@ (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 0207 	bic.w	r2, r3, #7
 80027a6:	498b      	ldr	r1, [pc, #556]	@ (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b89      	ldr	r3, [pc, #548]	@ (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e14a      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027cc:	4b82      	ldr	r3, [pc, #520]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	497f      	ldr	r1, [pc, #508]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 80dc 	beq.w	80029a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d13c      	bne.n	800286e <HAL_RCC_ClockConfig+0xf6>
 80027f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002804:	fab3 f383 	clz	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d102      	bne.n	800281e <HAL_RCC_ClockConfig+0xa6>
 8002818:	4b6f      	ldr	r3, [pc, #444]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	e00f      	b.n	800283e <HAL_RCC_ClockConfig+0xc6>
 800281e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002822:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	667b      	str	r3, [r7, #100]	@ 0x64
 800282c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002830:	663b      	str	r3, [r7, #96]	@ 0x60
 8002832:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800283a:	4b67      	ldr	r3, [pc, #412]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002842:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002844:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002846:	fa92 f2a2 	rbit	r2, r2
 800284a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800284c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800284e:	fab2 f282 	clz	r2, r2
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	f042 0220 	orr.w	r2, r2, #32
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	f002 021f 	and.w	r2, r2, #31
 800285e:	2101      	movs	r1, #1
 8002860:	fa01 f202 	lsl.w	r2, r1, r2
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d17b      	bne.n	8002962 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e0f3      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d13c      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x178>
 8002876:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800287a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d102      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x128>
 800289a:	4b4f      	ldr	r3, [pc, #316]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	e00f      	b.n	80028c0 <HAL_RCC_ClockConfig+0x148>
 80028a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80028ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80028b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028bc:	4b46      	ldr	r3, [pc, #280]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028c4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80028c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028c8:	fa92 f2a2 	rbit	r2, r2
 80028cc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80028ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028d0:	fab2 f282 	clz	r2, r2
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	f042 0220 	orr.w	r2, r2, #32
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	f002 021f 	and.w	r2, r2, #31
 80028e0:	2101      	movs	r1, #1
 80028e2:	fa01 f202 	lsl.w	r2, r1, r2
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d13a      	bne.n	8002962 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0b2      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
 80028f0:	2302      	movs	r3, #2
 80028f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80028fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d102      	bne.n	8002918 <HAL_RCC_ClockConfig+0x1a0>
 8002912:	4b31      	ldr	r3, [pc, #196]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	e00d      	b.n	8002934 <HAL_RCC_ClockConfig+0x1bc>
 8002918:	2302      	movs	r3, #2
 800291a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24
 8002924:	2302      	movs	r3, #2
 8002926:	623b      	str	r3, [r7, #32]
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	61fb      	str	r3, [r7, #28]
 8002930:	4b29      	ldr	r3, [pc, #164]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	2202      	movs	r2, #2
 8002936:	61ba      	str	r2, [r7, #24]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	fa92 f2a2 	rbit	r2, r2
 800293e:	617a      	str	r2, [r7, #20]
  return result;
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	fab2 f282 	clz	r2, r2
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	f042 0220 	orr.w	r2, r2, #32
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	f002 021f 	and.w	r2, r2, #31
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f202 	lsl.w	r2, r1, r2
 8002958:	4013      	ands	r3, r2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e079      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002962:	4b1d      	ldr	r3, [pc, #116]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f023 0203 	bic.w	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	491a      	ldr	r1, [pc, #104]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002974:	f7fe fad8 	bl	8000f28 <HAL_GetTick>
 8002978:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	e00a      	b.n	8002992 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297c:	f7fe fad4 	bl	8000f28 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e061      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 020c 	and.w	r2, r3, #12
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d1eb      	bne.n	800297c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029a4:	4b0b      	ldr	r3, [pc, #44]	@ (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d214      	bcs.n	80029dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b08      	ldr	r3, [pc, #32]	@ (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 0207 	bic.w	r2, r3, #7
 80029ba:	4906      	ldr	r1, [pc, #24]	@ (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b04      	ldr	r3, [pc, #16]	@ (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e040      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
 80029d4:	40022000 	.word	0x40022000
 80029d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a60 <HAL_RCC_ClockConfig+0x2e8>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	491a      	ldr	r1, [pc, #104]	@ (8002a60 <HAL_RCC_ClockConfig+0x2e8>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a06:	4b16      	ldr	r3, [pc, #88]	@ (8002a60 <HAL_RCC_ClockConfig+0x2e8>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4912      	ldr	r1, [pc, #72]	@ (8002a60 <HAL_RCC_ClockConfig+0x2e8>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a1a:	f000 f829 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8002a1e:	4601      	mov	r1, r0
 8002a20:	4b0f      	ldr	r3, [pc, #60]	@ (8002a60 <HAL_RCC_ClockConfig+0x2e8>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a28:	22f0      	movs	r2, #240	@ 0xf0
 8002a2a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	fa92 f2a2 	rbit	r2, r2
 8002a32:	60fa      	str	r2, [r7, #12]
  return result;
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	fab2 f282 	clz	r2, r2
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	40d3      	lsrs	r3, r2
 8002a3e:	4a09      	ldr	r2, [pc, #36]	@ (8002a64 <HAL_RCC_ClockConfig+0x2ec>)
 8002a40:	5cd3      	ldrb	r3, [r2, r3]
 8002a42:	fa21 f303 	lsr.w	r3, r1, r3
 8002a46:	4a08      	ldr	r2, [pc, #32]	@ (8002a68 <HAL_RCC_ClockConfig+0x2f0>)
 8002a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a4a:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <HAL_RCC_ClockConfig+0x2f4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe fa26 	bl	8000ea0 <HAL_InitTick>
  
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3778      	adds	r7, #120	@ 0x78
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
 8002a64:	08003c20 	.word	0x08003c20
 8002a68:	20000028 	.word	0x20000028
 8002a6c:	2000002c 	.word	0x2000002c

08002a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	2300      	movs	r3, #0
 8002a84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d002      	beq.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x30>
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d003      	beq.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x36>
 8002a9e:	e026      	b.n	8002aee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aa0:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aa2:	613b      	str	r3, [r7, #16]
      break;
 8002aa4:	e026      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	0c9b      	lsrs	r3, r3, #18
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	4a17      	ldr	r2, [pc, #92]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ab0:	5cd3      	ldrb	r3, [r2, r3]
 8002ab2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002ab4:	4b13      	ldr	r3, [pc, #76]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	4a14      	ldr	r2, [pc, #80]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002abe:	5cd3      	ldrb	r3, [r2, r3]
 8002ac0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002acc:	4a0e      	ldr	r2, [pc, #56]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	e004      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a0c      	ldr	r2, [pc, #48]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	613b      	str	r3, [r7, #16]
      break;
 8002aec:	e002      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aee:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002af0:	613b      	str	r3, [r7, #16]
      break;
 8002af2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af4:	693b      	ldr	r3, [r7, #16]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000
 8002b08:	007a1200 	.word	0x007a1200
 8002b0c:	08003c38 	.word	0x08003c38
 8002b10:	08003c48 	.word	0x08003c48
 8002b14:	003d0900 	.word	0x003d0900

08002b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b1c:	4b03      	ldr	r3, [pc, #12]	@ (8002b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000028 	.word	0x20000028

08002b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b36:	f7ff ffef 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002b3a:	4601      	mov	r1, r0
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b6c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b44:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	fa92 f2a2 	rbit	r2, r2
 8002b50:	603a      	str	r2, [r7, #0]
  return result;
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	fab2 f282 	clz	r2, r2
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	40d3      	lsrs	r3, r2
 8002b5c:	4a04      	ldr	r2, [pc, #16]	@ (8002b70 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b5e:	5cd3      	ldrb	r3, [r2, r3]
 8002b60:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	08003c30 	.word	0x08003c30

08002b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b7a:	f7ff ffcd 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002b7e:	4601      	mov	r1, r0
 8002b80:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002b88:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002b8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	fa92 f2a2 	rbit	r2, r2
 8002b94:	603a      	str	r2, [r7, #0]
  return result;
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	fab2 f282 	clz	r2, r2
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	40d3      	lsrs	r3, r2
 8002ba0:	4a04      	ldr	r2, [pc, #16]	@ (8002bb4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ba2:	5cd3      	ldrb	r3, [r2, r3]
 8002ba4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	08003c30 	.word	0x08003c30

08002bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b092      	sub	sp, #72	@ 0x48
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80cd 	beq.w	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bdc:	4b86      	ldr	r3, [pc, #536]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10e      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be8:	4b83      	ldr	r3, [pc, #524]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	4a82      	ldr	r2, [pc, #520]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf2:	61d3      	str	r3, [r2, #28]
 8002bf4:	4b80      	ldr	r3, [pc, #512]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c00:	2301      	movs	r3, #1
 8002c02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c06:	4b7d      	ldr	r3, [pc, #500]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d118      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c12:	4b7a      	ldr	r3, [pc, #488]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a79      	ldr	r2, [pc, #484]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1e:	f7fe f983 	bl	8000f28 <HAL_GetTick>
 8002c22:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c24:	e008      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c26:	f7fe f97f 	bl	8000f28 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b64      	cmp	r3, #100	@ 0x64
 8002c32:	d901      	bls.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e0db      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c38:	4b70      	ldr	r3, [pc, #448]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c44:	4b6c      	ldr	r3, [pc, #432]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d07d      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d076      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c62:	4b65      	ldr	r3, [pc, #404]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c70:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	4b5e      	ldr	r3, [pc, #376]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4b55      	ldr	r3, [pc, #340]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	461a      	mov	r2, r3
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cb4:	4a50      	ldr	r2, [pc, #320]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cb8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d045      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7fe f930 	bl	8000f28 <HAL_GetTick>
 8002cc8:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ccc:	f7fe f92c 	bl	8000f28 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e086      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cee:	2302      	movs	r3, #2
 8002cf0:	623b      	str	r3, [r7, #32]
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	fa93 f3a3 	rbit	r3, r3
 8002cf8:	61fb      	str	r3, [r7, #28]
  return result;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f043 0302 	orr.w	r3, r3, #2
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d102      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002d10:	4b39      	ldr	r3, [pc, #228]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	e007      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002d16:	2302      	movs	r3, #2
 8002d18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	fa93 f3a3 	rbit	r3, r3
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	4b35      	ldr	r3, [pc, #212]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	2202      	movs	r2, #2
 8002d28:	613a      	str	r2, [r7, #16]
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	fa92 f2a2 	rbit	r2, r2
 8002d30:	60fa      	str	r2, [r7, #12]
  return result;
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	fab2 f282 	clz	r2, r2
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	f002 021f 	and.w	r2, r2, #31
 8002d44:	2101      	movs	r1, #1
 8002d46:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0bd      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d50:	4b29      	ldr	r3, [pc, #164]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4926      	ldr	r1, [pc, #152]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d62:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d105      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6a:	4b23      	ldr	r3, [pc, #140]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4a22      	ldr	r2, [pc, #136]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d74:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d82:	4b1d      	ldr	r3, [pc, #116]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	f023 0203 	bic.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	491a      	ldr	r1, [pc, #104]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002da0:	4b15      	ldr	r3, [pc, #84]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da4:	f023 0210 	bic.w	r2, r3, #16
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4912      	ldr	r1, [pc, #72]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d008      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc2:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	490b      	ldr	r1, [pc, #44]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ddc:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	4903      	ldr	r1, [pc, #12]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3748      	adds	r7, #72	@ 0x48
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40007000 	.word	0x40007000
 8002e00:	10908100 	.word	0x10908100

08002e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e049      	b.n	8002eaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fd ff3e 	bl	8000cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	4619      	mov	r1, r3
 8002e42:	4610      	mov	r0, r2
 8002e44:	f000 f97a 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d001      	beq.n	8002ecc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e038      	b.n	8002f3e <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f4c <HAL_TIM_Base_Start+0x98>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00e      	beq.n	8002efc <HAL_TIM_Base_Start+0x48>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee6:	d009      	beq.n	8002efc <HAL_TIM_Base_Start+0x48>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a18      	ldr	r2, [pc, #96]	@ (8002f50 <HAL_TIM_Base_Start+0x9c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d004      	beq.n	8002efc <HAL_TIM_Base_Start+0x48>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a17      	ldr	r2, [pc, #92]	@ (8002f54 <HAL_TIM_Base_Start+0xa0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d115      	bne.n	8002f28 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <HAL_TIM_Base_Start+0xa4>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b06      	cmp	r3, #6
 8002f0c:	d015      	beq.n	8002f3a <HAL_TIM_Base_Start+0x86>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f14:	d011      	beq.n	8002f3a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0201 	orr.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f26:	e008      	b.n	8002f3a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	e000      	b.n	8002f3c <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40012c00 	.word	0x40012c00
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40014000 	.word	0x40014000
 8002f58:	00010007 	.word	0x00010007

08002f5c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6a1a      	ldr	r2, [r3, #32]
 8002f6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10f      	bne.n	8002f94 <HAL_TIM_Base_Stop+0x38>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6a1a      	ldr	r2, [r3, #32]
 8002f7a:	f240 4344 	movw	r3, #1092	@ 0x444
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d107      	bne.n	8002f94 <HAL_TIM_Base_Stop+0x38>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0201 	bic.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_TIM_ConfigClockSource+0x1c>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e0b6      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x18a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fe4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fe8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ff0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003002:	d03e      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0xd8>
 8003004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003008:	f200 8087 	bhi.w	800311a <HAL_TIM_ConfigClockSource+0x170>
 800300c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003010:	f000 8086 	beq.w	8003120 <HAL_TIM_ConfigClockSource+0x176>
 8003014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003018:	d87f      	bhi.n	800311a <HAL_TIM_ConfigClockSource+0x170>
 800301a:	2b70      	cmp	r3, #112	@ 0x70
 800301c:	d01a      	beq.n	8003054 <HAL_TIM_ConfigClockSource+0xaa>
 800301e:	2b70      	cmp	r3, #112	@ 0x70
 8003020:	d87b      	bhi.n	800311a <HAL_TIM_ConfigClockSource+0x170>
 8003022:	2b60      	cmp	r3, #96	@ 0x60
 8003024:	d050      	beq.n	80030c8 <HAL_TIM_ConfigClockSource+0x11e>
 8003026:	2b60      	cmp	r3, #96	@ 0x60
 8003028:	d877      	bhi.n	800311a <HAL_TIM_ConfigClockSource+0x170>
 800302a:	2b50      	cmp	r3, #80	@ 0x50
 800302c:	d03c      	beq.n	80030a8 <HAL_TIM_ConfigClockSource+0xfe>
 800302e:	2b50      	cmp	r3, #80	@ 0x50
 8003030:	d873      	bhi.n	800311a <HAL_TIM_ConfigClockSource+0x170>
 8003032:	2b40      	cmp	r3, #64	@ 0x40
 8003034:	d058      	beq.n	80030e8 <HAL_TIM_ConfigClockSource+0x13e>
 8003036:	2b40      	cmp	r3, #64	@ 0x40
 8003038:	d86f      	bhi.n	800311a <HAL_TIM_ConfigClockSource+0x170>
 800303a:	2b30      	cmp	r3, #48	@ 0x30
 800303c:	d064      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0x15e>
 800303e:	2b30      	cmp	r3, #48	@ 0x30
 8003040:	d86b      	bhi.n	800311a <HAL_TIM_ConfigClockSource+0x170>
 8003042:	2b20      	cmp	r3, #32
 8003044:	d060      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0x15e>
 8003046:	2b20      	cmp	r3, #32
 8003048:	d867      	bhi.n	800311a <HAL_TIM_ConfigClockSource+0x170>
 800304a:	2b00      	cmp	r3, #0
 800304c:	d05c      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0x15e>
 800304e:	2b10      	cmp	r3, #16
 8003050:	d05a      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0x15e>
 8003052:	e062      	b.n	800311a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003064:	f000 f968 	bl	8003338 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003076:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	609a      	str	r2, [r3, #8]
      break;
 8003080:	e04f      	b.n	8003122 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003092:	f000 f951 	bl	8003338 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030a4:	609a      	str	r2, [r3, #8]
      break;
 80030a6:	e03c      	b.n	8003122 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b4:	461a      	mov	r2, r3
 80030b6:	f000 f8c5 	bl	8003244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2150      	movs	r1, #80	@ 0x50
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 f91e 	bl	8003302 <TIM_ITRx_SetConfig>
      break;
 80030c6:	e02c      	b.n	8003122 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030d4:	461a      	mov	r2, r3
 80030d6:	f000 f8e4 	bl	80032a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2160      	movs	r1, #96	@ 0x60
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 f90e 	bl	8003302 <TIM_ITRx_SetConfig>
      break;
 80030e6:	e01c      	b.n	8003122 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f4:	461a      	mov	r2, r3
 80030f6:	f000 f8a5 	bl	8003244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2140      	movs	r1, #64	@ 0x40
 8003100:	4618      	mov	r0, r3
 8003102:	f000 f8fe 	bl	8003302 <TIM_ITRx_SetConfig>
      break;
 8003106:	e00c      	b.n	8003122 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f000 f8f5 	bl	8003302 <TIM_ITRx_SetConfig>
      break;
 8003118:	e003      	b.n	8003122 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
      break;
 800311e:	e000      	b.n	8003122 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003120:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003132:	7bfb      	ldrb	r3, [r7, #15]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a38      	ldr	r2, [pc, #224]	@ (8003230 <TIM_Base_SetConfig+0xf4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d007      	beq.n	8003164 <TIM_Base_SetConfig+0x28>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800315a:	d003      	beq.n	8003164 <TIM_Base_SetConfig+0x28>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a35      	ldr	r2, [pc, #212]	@ (8003234 <TIM_Base_SetConfig+0xf8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d108      	bne.n	8003176 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800316a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a2d      	ldr	r2, [pc, #180]	@ (8003230 <TIM_Base_SetConfig+0xf4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <TIM_Base_SetConfig+0x6a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003184:	d00f      	beq.n	80031a6 <TIM_Base_SetConfig+0x6a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a2a      	ldr	r2, [pc, #168]	@ (8003234 <TIM_Base_SetConfig+0xf8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00b      	beq.n	80031a6 <TIM_Base_SetConfig+0x6a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a29      	ldr	r2, [pc, #164]	@ (8003238 <TIM_Base_SetConfig+0xfc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d007      	beq.n	80031a6 <TIM_Base_SetConfig+0x6a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a28      	ldr	r2, [pc, #160]	@ (800323c <TIM_Base_SetConfig+0x100>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d003      	beq.n	80031a6 <TIM_Base_SetConfig+0x6a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a27      	ldr	r2, [pc, #156]	@ (8003240 <TIM_Base_SetConfig+0x104>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d108      	bne.n	80031b8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a14      	ldr	r2, [pc, #80]	@ (8003230 <TIM_Base_SetConfig+0xf4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00b      	beq.n	80031fc <TIM_Base_SetConfig+0xc0>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a14      	ldr	r2, [pc, #80]	@ (8003238 <TIM_Base_SetConfig+0xfc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d007      	beq.n	80031fc <TIM_Base_SetConfig+0xc0>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a13      	ldr	r2, [pc, #76]	@ (800323c <TIM_Base_SetConfig+0x100>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d003      	beq.n	80031fc <TIM_Base_SetConfig+0xc0>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a12      	ldr	r2, [pc, #72]	@ (8003240 <TIM_Base_SetConfig+0x104>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d103      	bne.n	8003204 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b01      	cmp	r3, #1
 8003214:	d105      	bne.n	8003222 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f023 0201 	bic.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	611a      	str	r2, [r3, #16]
  }
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40012c00 	.word	0x40012c00
 8003234:	40000400 	.word	0x40000400
 8003238:	40014000 	.word	0x40014000
 800323c:	40014400 	.word	0x40014400
 8003240:	40014800 	.word	0x40014800

08003244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f023 0201 	bic.w	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800326e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f023 030a 	bic.w	r3, r3, #10
 8003280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4313      	orrs	r3, r2
 8003288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	621a      	str	r2, [r3, #32]
}
 8003296:	bf00      	nop
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b087      	sub	sp, #28
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f023 0210 	bic.w	r2, r3, #16
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80032cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	031b      	lsls	r3, r3, #12
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80032de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	621a      	str	r2, [r3, #32]
}
 80032f6:	bf00      	nop
 80032f8:	371c      	adds	r7, #28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	f043 0307 	orr.w	r3, r3, #7
 8003324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	609a      	str	r2, [r3, #8]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003352:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	021a      	lsls	r2, r3, #8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	431a      	orrs	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4313      	orrs	r3, r2
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	609a      	str	r2, [r3, #8]
}
 800336c:	bf00      	nop
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800338c:	2302      	movs	r3, #2
 800338e:	e054      	b.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a24      	ldr	r2, [pc, #144]	@ (8003448 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d108      	bne.n	80033cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80033c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a17      	ldr	r2, [pc, #92]	@ (8003448 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00e      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f8:	d009      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a13      	ldr	r2, [pc, #76]	@ (800344c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d004      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a11      	ldr	r2, [pc, #68]	@ (8003450 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d10c      	bne.n	8003428 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	4313      	orrs	r3, r2
 800341e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40012c00 	.word	0x40012c00
 800344c:	40000400 	.word	0x40000400
 8003450:	40014000 	.word	0x40014000

08003454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e040      	b.n	80034e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fd fc4c 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2224      	movs	r2, #36	@ 0x24
 8003480:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f95e 	bl	800375c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f825 	bl	80034f0 <UART_SetConfig>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e01b      	b.n	80034e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f9dd 	bl	80038a0 <UART_CheckIdleState>
 80034e6:	4603      	mov	r3, r0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4b8a      	ldr	r3, [pc, #552]	@ (8003744 <UART_SetConfig+0x254>)
 800351c:	4013      	ands	r3, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	6979      	ldr	r1, [r7, #20]
 8003524:	430b      	orrs	r3, r1
 8003526:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	430a      	orrs	r2, r1
 8003560:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a78      	ldr	r2, [pc, #480]	@ (8003748 <UART_SetConfig+0x258>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d120      	bne.n	80035ae <UART_SetConfig+0xbe>
 800356c:	4b77      	ldr	r3, [pc, #476]	@ (800374c <UART_SetConfig+0x25c>)
 800356e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	2b03      	cmp	r3, #3
 8003576:	d817      	bhi.n	80035a8 <UART_SetConfig+0xb8>
 8003578:	a201      	add	r2, pc, #4	@ (adr r2, 8003580 <UART_SetConfig+0x90>)
 800357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357e:	bf00      	nop
 8003580:	08003591 	.word	0x08003591
 8003584:	0800359d 	.word	0x0800359d
 8003588:	080035a3 	.word	0x080035a3
 800358c:	08003597 	.word	0x08003597
 8003590:	2300      	movs	r3, #0
 8003592:	77fb      	strb	r3, [r7, #31]
 8003594:	e01d      	b.n	80035d2 <UART_SetConfig+0xe2>
 8003596:	2302      	movs	r3, #2
 8003598:	77fb      	strb	r3, [r7, #31]
 800359a:	e01a      	b.n	80035d2 <UART_SetConfig+0xe2>
 800359c:	2304      	movs	r3, #4
 800359e:	77fb      	strb	r3, [r7, #31]
 80035a0:	e017      	b.n	80035d2 <UART_SetConfig+0xe2>
 80035a2:	2308      	movs	r3, #8
 80035a4:	77fb      	strb	r3, [r7, #31]
 80035a6:	e014      	b.n	80035d2 <UART_SetConfig+0xe2>
 80035a8:	2310      	movs	r3, #16
 80035aa:	77fb      	strb	r3, [r7, #31]
 80035ac:	e011      	b.n	80035d2 <UART_SetConfig+0xe2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a67      	ldr	r2, [pc, #412]	@ (8003750 <UART_SetConfig+0x260>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d102      	bne.n	80035be <UART_SetConfig+0xce>
 80035b8:	2300      	movs	r3, #0
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e009      	b.n	80035d2 <UART_SetConfig+0xe2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a64      	ldr	r2, [pc, #400]	@ (8003754 <UART_SetConfig+0x264>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d102      	bne.n	80035ce <UART_SetConfig+0xde>
 80035c8:	2300      	movs	r3, #0
 80035ca:	77fb      	strb	r3, [r7, #31]
 80035cc:	e001      	b.n	80035d2 <UART_SetConfig+0xe2>
 80035ce:	2310      	movs	r3, #16
 80035d0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035da:	d15a      	bne.n	8003692 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80035dc:	7ffb      	ldrb	r3, [r7, #31]
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d827      	bhi.n	8003632 <UART_SetConfig+0x142>
 80035e2:	a201      	add	r2, pc, #4	@ (adr r2, 80035e8 <UART_SetConfig+0xf8>)
 80035e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e8:	0800360d 	.word	0x0800360d
 80035ec:	08003615 	.word	0x08003615
 80035f0:	0800361d 	.word	0x0800361d
 80035f4:	08003633 	.word	0x08003633
 80035f8:	08003623 	.word	0x08003623
 80035fc:	08003633 	.word	0x08003633
 8003600:	08003633 	.word	0x08003633
 8003604:	08003633 	.word	0x08003633
 8003608:	0800362b 	.word	0x0800362b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800360c:	f7ff fa90 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 8003610:	61b8      	str	r0, [r7, #24]
        break;
 8003612:	e013      	b.n	800363c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003614:	f7ff faae 	bl	8002b74 <HAL_RCC_GetPCLK2Freq>
 8003618:	61b8      	str	r0, [r7, #24]
        break;
 800361a:	e00f      	b.n	800363c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800361c:	4b4e      	ldr	r3, [pc, #312]	@ (8003758 <UART_SetConfig+0x268>)
 800361e:	61bb      	str	r3, [r7, #24]
        break;
 8003620:	e00c      	b.n	800363c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003622:	f7ff fa25 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8003626:	61b8      	str	r0, [r7, #24]
        break;
 8003628:	e008      	b.n	800363c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800362a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800362e:	61bb      	str	r3, [r7, #24]
        break;
 8003630:	e004      	b.n	800363c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	77bb      	strb	r3, [r7, #30]
        break;
 800363a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d074      	beq.n	800372c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	005a      	lsls	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	085b      	lsrs	r3, r3, #1
 800364c:	441a      	add	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	fbb2 f3f3 	udiv	r3, r2, r3
 8003656:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b0f      	cmp	r3, #15
 800365c:	d916      	bls.n	800368c <UART_SetConfig+0x19c>
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003664:	d212      	bcs.n	800368c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	b29b      	uxth	r3, r3
 800366a:	f023 030f 	bic.w	r3, r3, #15
 800366e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	085b      	lsrs	r3, r3, #1
 8003674:	b29b      	uxth	r3, r3
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	b29a      	uxth	r2, r3
 800367c:	89fb      	ldrh	r3, [r7, #14]
 800367e:	4313      	orrs	r3, r2
 8003680:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	89fa      	ldrh	r2, [r7, #14]
 8003688:	60da      	str	r2, [r3, #12]
 800368a:	e04f      	b.n	800372c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	77bb      	strb	r3, [r7, #30]
 8003690:	e04c      	b.n	800372c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003692:	7ffb      	ldrb	r3, [r7, #31]
 8003694:	2b08      	cmp	r3, #8
 8003696:	d828      	bhi.n	80036ea <UART_SetConfig+0x1fa>
 8003698:	a201      	add	r2, pc, #4	@ (adr r2, 80036a0 <UART_SetConfig+0x1b0>)
 800369a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369e:	bf00      	nop
 80036a0:	080036c5 	.word	0x080036c5
 80036a4:	080036cd 	.word	0x080036cd
 80036a8:	080036d5 	.word	0x080036d5
 80036ac:	080036eb 	.word	0x080036eb
 80036b0:	080036db 	.word	0x080036db
 80036b4:	080036eb 	.word	0x080036eb
 80036b8:	080036eb 	.word	0x080036eb
 80036bc:	080036eb 	.word	0x080036eb
 80036c0:	080036e3 	.word	0x080036e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c4:	f7ff fa34 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 80036c8:	61b8      	str	r0, [r7, #24]
        break;
 80036ca:	e013      	b.n	80036f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036cc:	f7ff fa52 	bl	8002b74 <HAL_RCC_GetPCLK2Freq>
 80036d0:	61b8      	str	r0, [r7, #24]
        break;
 80036d2:	e00f      	b.n	80036f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036d4:	4b20      	ldr	r3, [pc, #128]	@ (8003758 <UART_SetConfig+0x268>)
 80036d6:	61bb      	str	r3, [r7, #24]
        break;
 80036d8:	e00c      	b.n	80036f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036da:	f7ff f9c9 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 80036de:	61b8      	str	r0, [r7, #24]
        break;
 80036e0:	e008      	b.n	80036f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036e6:	61bb      	str	r3, [r7, #24]
        break;
 80036e8:	e004      	b.n	80036f4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	77bb      	strb	r3, [r7, #30]
        break;
 80036f2:	bf00      	nop
    }

    if (pclk != 0U)
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d018      	beq.n	800372c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	085a      	lsrs	r2, r3, #1
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	441a      	add	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	fbb2 f3f3 	udiv	r3, r2, r3
 800370c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	2b0f      	cmp	r3, #15
 8003712:	d909      	bls.n	8003728 <UART_SetConfig+0x238>
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800371a:	d205      	bcs.n	8003728 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	b29a      	uxth	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	e001      	b.n	800372c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003738:	7fbb      	ldrb	r3, [r7, #30]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	efff69f3 	.word	0xefff69f3
 8003748:	40013800 	.word	0x40013800
 800374c:	40021000 	.word	0x40021000
 8003750:	40004400 	.word	0x40004400
 8003754:	40004800 	.word	0x40004800
 8003758:	007a1200 	.word	0x007a1200

0800375c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	f003 0310 	and.w	r3, r3, #16
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00a      	beq.n	800380e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01a      	beq.n	8003872 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003856:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800385a:	d10a      	bne.n	8003872 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	605a      	str	r2, [r3, #4]
  }
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b098      	sub	sp, #96	@ 0x60
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038b0:	f7fd fb3a 	bl	8000f28 <HAL_GetTick>
 80038b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d12e      	bne.n	8003922 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038cc:	2200      	movs	r2, #0
 80038ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f88c 	bl	80039f0 <UART_WaitOnFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d021      	beq.n	8003922 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e6:	e853 3f00 	ldrex	r3, [r3]
 80038ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80038fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003902:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003904:	e841 2300 	strex	r3, r2, [r1]
 8003908:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800390a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e6      	bne.n	80038de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e062      	b.n	80039e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b04      	cmp	r3, #4
 800392e:	d149      	bne.n	80039c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003930:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003938:	2200      	movs	r2, #0
 800393a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f856 	bl	80039f0 <UART_WaitOnFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d03c      	beq.n	80039c4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003952:	e853 3f00 	ldrex	r3, [r3]
 8003956:	623b      	str	r3, [r7, #32]
   return(result);
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800395e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003968:	633b      	str	r3, [r7, #48]	@ 0x30
 800396a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800396e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003970:	e841 2300 	strex	r3, r2, [r1]
 8003974:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e6      	bne.n	800394a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3308      	adds	r3, #8
 8003982:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	e853 3f00 	ldrex	r3, [r3]
 800398a:	60fb      	str	r3, [r7, #12]
   return(result);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0301 	bic.w	r3, r3, #1
 8003992:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3308      	adds	r3, #8
 800399a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800399c:	61fa      	str	r2, [r7, #28]
 800399e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a0:	69b9      	ldr	r1, [r7, #24]
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	e841 2300 	strex	r3, r2, [r1]
 80039a8:	617b      	str	r3, [r7, #20]
   return(result);
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e5      	bne.n	800397c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e011      	b.n	80039e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3758      	adds	r7, #88	@ 0x58
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	4613      	mov	r3, r2
 80039fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a00:	e04f      	b.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d04b      	beq.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0a:	f7fd fa8d 	bl	8000f28 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d302      	bcc.n	8003a20 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e04e      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d037      	beq.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b80      	cmp	r3, #128	@ 0x80
 8003a36:	d034      	beq.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b40      	cmp	r3, #64	@ 0x40
 8003a3c:	d031      	beq.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d110      	bne.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2208      	movs	r2, #8
 8003a52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f838 	bl	8003aca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e029      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a7c:	d111      	bne.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f81e 	bl	8003aca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e00f      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d0a0      	beq.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b095      	sub	sp, #84	@ 0x54
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003af0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003af2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003af6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003af8:	e841 2300 	strex	r3, r2, [r1]
 8003afc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e6      	bne.n	8003ad2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3308      	adds	r3, #8
 8003b0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f023 0301 	bic.w	r3, r3, #1
 8003b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3308      	adds	r3, #8
 8003b22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b2c:	e841 2300 	strex	r3, r2, [r1]
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e5      	bne.n	8003b04 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d118      	bne.n	8003b72 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	e853 3f00 	ldrex	r3, [r3]
 8003b4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f023 0310 	bic.w	r3, r3, #16
 8003b54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b62:	6979      	ldr	r1, [r7, #20]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	e841 2300 	strex	r3, r2, [r1]
 8003b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1e6      	bne.n	8003b40 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b86:	bf00      	nop
 8003b88:	3754      	adds	r7, #84	@ 0x54
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <memset>:
 8003b92:	4402      	add	r2, r0
 8003b94:	4603      	mov	r3, r0
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d100      	bne.n	8003b9c <memset+0xa>
 8003b9a:	4770      	bx	lr
 8003b9c:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba0:	e7f9      	b.n	8003b96 <memset+0x4>
	...

08003ba4 <__libc_init_array>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	4d0d      	ldr	r5, [pc, #52]	@ (8003bdc <__libc_init_array+0x38>)
 8003ba8:	4c0d      	ldr	r4, [pc, #52]	@ (8003be0 <__libc_init_array+0x3c>)
 8003baa:	1b64      	subs	r4, r4, r5
 8003bac:	10a4      	asrs	r4, r4, #2
 8003bae:	2600      	movs	r6, #0
 8003bb0:	42a6      	cmp	r6, r4
 8003bb2:	d109      	bne.n	8003bc8 <__libc_init_array+0x24>
 8003bb4:	4d0b      	ldr	r5, [pc, #44]	@ (8003be4 <__libc_init_array+0x40>)
 8003bb6:	4c0c      	ldr	r4, [pc, #48]	@ (8003be8 <__libc_init_array+0x44>)
 8003bb8:	f000 f826 	bl	8003c08 <_init>
 8003bbc:	1b64      	subs	r4, r4, r5
 8003bbe:	10a4      	asrs	r4, r4, #2
 8003bc0:	2600      	movs	r6, #0
 8003bc2:	42a6      	cmp	r6, r4
 8003bc4:	d105      	bne.n	8003bd2 <__libc_init_array+0x2e>
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bcc:	4798      	blx	r3
 8003bce:	3601      	adds	r6, #1
 8003bd0:	e7ee      	b.n	8003bb0 <__libc_init_array+0xc>
 8003bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd6:	4798      	blx	r3
 8003bd8:	3601      	adds	r6, #1
 8003bda:	e7f2      	b.n	8003bc2 <__libc_init_array+0x1e>
 8003bdc:	08003c58 	.word	0x08003c58
 8003be0:	08003c58 	.word	0x08003c58
 8003be4:	08003c58 	.word	0x08003c58
 8003be8:	08003c5c 	.word	0x08003c5c

08003bec <memcpy>:
 8003bec:	440a      	add	r2, r1
 8003bee:	4291      	cmp	r1, r2
 8003bf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bf4:	d100      	bne.n	8003bf8 <memcpy+0xc>
 8003bf6:	4770      	bx	lr
 8003bf8:	b510      	push	{r4, lr}
 8003bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c02:	4291      	cmp	r1, r2
 8003c04:	d1f9      	bne.n	8003bfa <memcpy+0xe>
 8003c06:	bd10      	pop	{r4, pc}

08003c08 <_init>:
 8003c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0a:	bf00      	nop
 8003c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0e:	bc08      	pop	{r3}
 8003c10:	469e      	mov	lr, r3
 8003c12:	4770      	bx	lr

08003c14 <_fini>:
 8003c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c16:	bf00      	nop
 8003c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c1a:	bc08      	pop	{r3}
 8003c1c:	469e      	mov	lr, r3
 8003c1e:	4770      	bx	lr
