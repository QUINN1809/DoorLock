/*
 * button_control.c
 * Author: Quinn Ivison
 */
#include "stm32f3xx_hal.h"

#include "led_control.h"
#include "eeprom_control.h"
#include "motor_control.h"
#include "button_control.h"

void setButtonTimer(TIM_HandleTypeDef timer)
{
	htim1 = timer;
}

uint16_t scanButton(void)
{
	uint16_t button = RETURN_NONE;

	for(uint8_t col = 0; col < NUM_COLUMNS; col++)
	{
		//Write columns high
		HAL_GPIO_WritePin(GPIO_PORT[col], GPIO_PIN[col], GPIO_PIN_SET);

		for(uint8_t row = 0; row < NUM_ROWS; row++)
		{
			if(HAL_GPIO_ReadPin(GPIO_PORT[col], GPIO_PIN[col]) == true)
			{
				HAL_TIM_Base_Start(&htim1);

				while(1)
				{
					if (HAL_GPIO_ReadPin(GPIO_PORT[col], GPIO_PIN[col]) == true || __HAL_TIM_GET_COUNTER(&htim1) > TIMEOUT)
					{
						break;
					}
				}

				HAL_TIM_Base_Stop(&htim1);

				if(row < 3)
				{
					button = col * 3 + row + 1;
				}
				else if(row == 4)
				{
					switch(col)
					{
						case 0:
							button = RETURN_LOCK;
							break;

						case 1:
							button = 0;
							break;

						case 2:
							button = RETURN_EDIT;
							break;

						default:
							break;
					}
				}

				HAL_GPIO_WritePin(GPIO_PORT[col], GPIO_PIN[col], GPIO_PIN_RESET);
				goto breakLoop;
			}
		}

		HAL_GPIO_WritePin(GPIO_PORT[col], GPIO_PIN[col], GPIO_PIN_RESET);
	}

	breakLoop:

	HAL_Delay(50);
	return button;
}

uint16_t actionSetPasscode(void)
{
	uint16_t rtv = RETURN_NONE;
	static uint16_t index = 0;
	static char passcodeBuffer[PASSCODE_SIZE];

	uint16_t num = scanButton();

	if(__HAL_TIM_GET_COUNTER(&htim1) > TIMEOUT || num == RETURN_LOCK || num == RETURN_EDIT)
	{
		index = 0;
		HAL_TIM_Base_Stop(&htim1);
		memset(passcodeBuffer, 0, sizeof(passcodeBuffer));
		rtv = num;
	}
	else if(num != RETURN_NONE)
	{
		passcode[index] = num;
		index++;

		if(index == PASSCODE_SIZE)
		{
			HAL_TIM_Base_Stop(&htim1);
			writeEEPROM(passcode);

			index = 0;
			memcpy(passcode, passcodeBuffer, PASSCODE_SIZE);
			memset(passcodeBuffer, 0, PASSCODE_SIZE);
			rtv = RETURN_SUCCESS;
		}
		else if(index == 1)
		{
			HAL_TIM_Base_Start(&htim1);
		}
	}

	return rtv;
}

uint16_t actionEnterPasscode(void)
{
	uint16_t rtv = RETURN_NONE;
	static uint16_t index = 0;
	static char passcodeBuffer[PASSCODE_SIZE];

	uint16_t num = scanButton();
	if(num != RETURN_NONE && num != RETURN_LOCK && num != RETURN_EDIT)
	{
		rtv = RETURN_SUCCESS;
		passcodeBuffer[index] = num;
		index++;

		if(index == PASSCODE_SIZE)
		{
			for(uint8_t i = 0; i < PASSCODE_SIZE; i++)
			{
				if(passcode[i] != passcodeBuffer[i])
				{
					rtv = RETURN_FAILURE;

					errorLED();
				}
			}

			index = 0;
			memset(passcodeBuffer, 0, sizeof(passcodeBuffer));
			HAL_TIM_Base_Stop(&htim1);

			if(rtv == RETURN_SUCCESS)
			{
				actionLock();
				successLED();
			}
		}
		else
		{
			if(index == 1)
			{
				HAL_TIM_Base_Start(&htim1);
			}

			pendingLED();
			rtv = RETURN_NONE;
		}
	}
	else if(__HAL_TIM_GET_COUNTER(&htim1) > TIMEOUT || num == RETURN_LOCK)
	{
		index = 0;
		rtv = RETURN_FAILURE;

		errorLED();
		memset(passcodeBuffer, 0, sizeof(passcodeBuffer));
		HAL_TIM_Base_Stop(&htim1);
	}

	return rtv;
}
