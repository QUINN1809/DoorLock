
DoorLock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dd8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003f60  08003f60  00004f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800407c  0800407c  00006058  2**0
                  CONTENTS
  4 .ARM          00000000  0800407c  0800407c  00006058  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800407c  0800407c  00006058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800407c  0800407c  0000507c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004080  08004080  00005080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  08004084  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006058  2**0
                  CONTENTS
 10 .bss          000001ac  20000058  20000058  00006058  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000204  20000204  00006058  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006058  2**0
                  CONTENTS, READONLY
 13 .debug_info   000116cb  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002366  00000000  00000000  00017753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  00019ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c19  00000000  00000000  0001aa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c169  00000000  00000000  0001b631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001503e  00000000  00000000  0003779a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5ac8  00000000  00000000  0004c7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f22a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004090  00000000  00000000  000f22e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  000f6374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000058 	.word	0x20000058
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f48 	.word	0x08003f48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000005c 	.word	0x2000005c
 80001c4:	08003f48 	.word	0x08003f48

080001c8 <scanButton>:
 * scanButton():							4 5 6
 * Scans button matrix for button presses	7 8 9
 * Returns read status and value			* 0 #
 */
bool scanButton(uint8_t* buttonValue)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	const uint8_t button_map[NUM_COLUMNS] = {BUTTON_LOCK, 0, BUTTON_EDIT};
 80001d0:	4a48      	ldr	r2, [pc, #288]	@ (80002f4 <scanButton+0x12c>)
 80001d2:	f107 030c 	add.w	r3, r7, #12
 80001d6:	6812      	ldr	r2, [r2, #0]
 80001d8:	4611      	mov	r1, r2
 80001da:	8019      	strh	r1, [r3, #0]
 80001dc:	3302      	adds	r3, #2
 80001de:	0c12      	lsrs	r2, r2, #16
 80001e0:	701a      	strb	r2, [r3, #0]
	bool rtv = false;
 80001e2:	2300      	movs	r3, #0
 80001e4:	75fb      	strb	r3, [r7, #23]

	// Pull columns to digital HIGH
	for(uint8_t col = 0; col < NUM_COLUMNS; col++)
 80001e6:	2300      	movs	r3, #0
 80001e8:	75bb      	strb	r3, [r7, #22]
 80001ea:	e07a      	b.n	80002e2 <scanButton+0x11a>
	{
		HAL_GPIO_WritePin(OUT_PORT[col], OUT_PIN[col], GPIO_PIN_SET);
 80001ec:	7dbb      	ldrb	r3, [r7, #22]
 80001ee:	4a42      	ldr	r2, [pc, #264]	@ (80002f8 <scanButton+0x130>)
 80001f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80001f4:	7dbb      	ldrb	r3, [r7, #22]
 80001f6:	4a41      	ldr	r2, [pc, #260]	@ (80002fc <scanButton+0x134>)
 80001f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001fc:	2201      	movs	r2, #1
 80001fe:	4619      	mov	r1, r3
 8000200:	f001 fa56 	bl	80016b0 <HAL_GPIO_WritePin>

		// Scan rows for button presses
		for(uint8_t row = 0; row < NUM_ROWS; row++)
 8000204:	2300      	movs	r3, #0
 8000206:	757b      	strb	r3, [r7, #21]
 8000208:	e059      	b.n	80002be <scanButton+0xf6>
		{
			if(HAL_GPIO_ReadPin(IN_PORT[row], IN_PIN[row]) == true)
 800020a:	7d7b      	ldrb	r3, [r7, #21]
 800020c:	4a3c      	ldr	r2, [pc, #240]	@ (8000300 <scanButton+0x138>)
 800020e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000212:	7d7b      	ldrb	r3, [r7, #21]
 8000214:	493b      	ldr	r1, [pc, #236]	@ (8000304 <scanButton+0x13c>)
 8000216:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800021a:	4619      	mov	r1, r3
 800021c:	4610      	mov	r0, r2
 800021e:	f001 fa2f 	bl	8001680 <HAL_GPIO_ReadPin>
 8000222:	4603      	mov	r3, r0
 8000224:	2b01      	cmp	r3, #1
 8000226:	d147      	bne.n	80002b8 <scanButton+0xf0>
			{
				//char msg[] = {row, col};
				//print(&msg);

				// Start timer for button timeout
				uint32_t timeout = __HAL_TIM_GET_COUNTER(&htim3) + BLINK_INTERVAL/2;
 8000228:	4b37      	ldr	r3, [pc, #220]	@ (8000308 <scanButton+0x140>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800022e:	33fa      	adds	r3, #250	@ 0xfa
 8000230:	613b      	str	r3, [r7, #16]
				while(__HAL_TIM_GET_COUNTER(&htim3) < timeout)
 8000232:	e00e      	b.n	8000252 <scanButton+0x8a>
				{
					// Stall the MCU while the button is held to prevent multiple reads
					if (HAL_GPIO_ReadPin(IN_PORT[row], IN_PIN[row]) == false)
 8000234:	7d7b      	ldrb	r3, [r7, #21]
 8000236:	4a32      	ldr	r2, [pc, #200]	@ (8000300 <scanButton+0x138>)
 8000238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023c:	7d7b      	ldrb	r3, [r7, #21]
 800023e:	4931      	ldr	r1, [pc, #196]	@ (8000304 <scanButton+0x13c>)
 8000240:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000244:	4619      	mov	r1, r3
 8000246:	4610      	mov	r0, r2
 8000248:	f001 fa1a 	bl	8001680 <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d006      	beq.n	8000260 <scanButton+0x98>
				while(__HAL_TIM_GET_COUNTER(&htim3) < timeout)
 8000252:	4b2d      	ldr	r3, [pc, #180]	@ (8000308 <scanButton+0x140>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000258:	693a      	ldr	r2, [r7, #16]
 800025a:	429a      	cmp	r2, r3
 800025c:	d8ea      	bhi.n	8000234 <scanButton+0x6c>
 800025e:	e000      	b.n	8000262 <scanButton+0x9a>
					{
						break;
 8000260:	bf00      	nop
					}
				}

				// Assign output value to button pressed
				if(row <  NUM_ROWS - 1)
 8000262:	7d7b      	ldrb	r3, [r7, #21]
 8000264:	2b02      	cmp	r3, #2
 8000266:	d80e      	bhi.n	8000286 <scanButton+0xbe>
				{
					rtv = true;
 8000268:	2301      	movs	r3, #1
 800026a:	75fb      	strb	r3, [r7, #23]
					*buttonValue = col * NUM_COLUMNS + row + 1;
 800026c:	7dbb      	ldrb	r3, [r7, #22]
 800026e:	461a      	mov	r2, r3
 8000270:	0052      	lsls	r2, r2, #1
 8000272:	4413      	add	r3, r2
 8000274:	b2da      	uxtb	r2, r3
 8000276:	7d7b      	ldrb	r3, [r7, #21]
 8000278:	4413      	add	r3, r2
 800027a:	b2db      	uxtb	r3, r3
 800027c:	3301      	adds	r3, #1
 800027e:	b2da      	uxtb	r2, r3
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	701a      	strb	r2, [r3, #0]
 8000284:	e00b      	b.n	800029e <scanButton+0xd6>
				}
				else if(row == NUM_ROWS - 1)
 8000286:	7d7b      	ldrb	r3, [r7, #21]
 8000288:	2b03      	cmp	r3, #3
 800028a:	d108      	bne.n	800029e <scanButton+0xd6>
				{
					rtv = true;
 800028c:	2301      	movs	r3, #1
 800028e:	75fb      	strb	r3, [r7, #23]
					*buttonValue = button_map[col];
 8000290:	7dbb      	ldrb	r3, [r7, #22]
 8000292:	3318      	adds	r3, #24
 8000294:	443b      	add	r3, r7
 8000296:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	701a      	strb	r2, [r3, #0]
				}

				// Disable column pulled high
				HAL_GPIO_WritePin(OUT_PORT[col], OUT_PIN[col], GPIO_PIN_RESET);
 800029e:	7dbb      	ldrb	r3, [r7, #22]
 80002a0:	4a15      	ldr	r2, [pc, #84]	@ (80002f8 <scanButton+0x130>)
 80002a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80002a6:	7dbb      	ldrb	r3, [r7, #22]
 80002a8:	4a14      	ldr	r2, [pc, #80]	@ (80002fc <scanButton+0x134>)
 80002aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002ae:	2200      	movs	r2, #0
 80002b0:	4619      	mov	r1, r3
 80002b2:	f001 f9fd 	bl	80016b0 <HAL_GPIO_WritePin>
				goto breakLoop;
 80002b6:	e018      	b.n	80002ea <scanButton+0x122>
		for(uint8_t row = 0; row < NUM_ROWS; row++)
 80002b8:	7d7b      	ldrb	r3, [r7, #21]
 80002ba:	3301      	adds	r3, #1
 80002bc:	757b      	strb	r3, [r7, #21]
 80002be:	7d7b      	ldrb	r3, [r7, #21]
 80002c0:	2b03      	cmp	r3, #3
 80002c2:	d9a2      	bls.n	800020a <scanButton+0x42>
			}
		}

		// Disable column pulled high
		HAL_GPIO_WritePin(OUT_PORT[col], OUT_PIN[col], GPIO_PIN_RESET);
 80002c4:	7dbb      	ldrb	r3, [r7, #22]
 80002c6:	4a0c      	ldr	r2, [pc, #48]	@ (80002f8 <scanButton+0x130>)
 80002c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80002cc:	7dbb      	ldrb	r3, [r7, #22]
 80002ce:	4a0b      	ldr	r2, [pc, #44]	@ (80002fc <scanButton+0x134>)
 80002d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002d4:	2200      	movs	r2, #0
 80002d6:	4619      	mov	r1, r3
 80002d8:	f001 f9ea 	bl	80016b0 <HAL_GPIO_WritePin>
	for(uint8_t col = 0; col < NUM_COLUMNS; col++)
 80002dc:	7dbb      	ldrb	r3, [r7, #22]
 80002de:	3301      	adds	r3, #1
 80002e0:	75bb      	strb	r3, [r7, #22]
 80002e2:	7dbb      	ldrb	r3, [r7, #22]
 80002e4:	2b02      	cmp	r3, #2
 80002e6:	d981      	bls.n	80001ec <scanButton+0x24>
	}

	breakLoop:
 80002e8:	bf00      	nop

	return rtv;
 80002ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3718      	adds	r7, #24
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	08003f60 	.word	0x08003f60
 80002f8:	20000000 	.word	0x20000000
 80002fc:	2000000c 	.word	0x2000000c
 8000300:	20000014 	.word	0x20000014
 8000304:	20000024 	.word	0x20000024
 8000308:	2000012c 	.word	0x2000012c

0800030c <actionSetPasscode>:
 * actionSetPasscode():
 * Changes the passcode of the doorlock
 * Outputs success state
 */
uint8_t actionSetPasscode(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
	static uint16_t index = 0;
	static char passcodeBuffer[PASSCODE_SIZE];

	uint8_t rtv = RETURN_NONE;
 8000312:	2303      	movs	r3, #3
 8000314:	71fb      	strb	r3, [r7, #7]

	// Check button matrix for input
	uint8_t buttonValue;
	if(scanButton(&buttonValue))
 8000316:	1dbb      	adds	r3, r7, #6
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff55 	bl	80001c8 <scanButton>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d045      	beq.n	80003b0 <actionSetPasscode+0xa4>
	{
		// Abort action if lock/edit button pressed
		if(buttonValue == BUTTON_LOCK || buttonValue == BUTTON_EDIT)
 8000324:	79bb      	ldrb	r3, [r7, #6]
 8000326:	2b7f      	cmp	r3, #127	@ 0x7f
 8000328:	d002      	beq.n	8000330 <actionSetPasscode+0x24>
 800032a:	79bb      	ldrb	r3, [r7, #6]
 800032c:	2b80      	cmp	r3, #128	@ 0x80
 800032e:	d111      	bne.n	8000354 <actionSetPasscode+0x48>
		{
			index = 0;
 8000330:	4b2e      	ldr	r3, [pc, #184]	@ (80003ec <actionSetPasscode+0xe0>)
 8000332:	2200      	movs	r2, #0
 8000334:	801a      	strh	r2, [r3, #0]
			rtv = buttonValue;
 8000336:	79bb      	ldrb	r3, [r7, #6]
 8000338:	71fb      	strb	r3, [r7, #7]
			HAL_TIM_Base_Stop(&htim1);
 800033a:	482d      	ldr	r0, [pc, #180]	@ (80003f0 <actionSetPasscode+0xe4>)
 800033c:	f002 ff32 	bl	80031a4 <HAL_TIM_Base_Stop>
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000340:	4b2b      	ldr	r3, [pc, #172]	@ (80003f0 <actionSetPasscode+0xe4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2200      	movs	r2, #0
 8000346:	625a      	str	r2, [r3, #36]	@ 0x24
			memset(passcodeBuffer, 0, sizeof(passcodeBuffer));
 8000348:	2204      	movs	r2, #4
 800034a:	2100      	movs	r1, #0
 800034c:	4829      	ldr	r0, [pc, #164]	@ (80003f4 <actionSetPasscode+0xe8>)
 800034e:	f003 fdce 	bl	8003eee <memset>
 8000352:	e045      	b.n	80003e0 <actionSetPasscode+0xd4>
		}
		else
		{
			// Add input to new passcode
			passcodeBuffer[index++] = buttonValue;
 8000354:	4b25      	ldr	r3, [pc, #148]	@ (80003ec <actionSetPasscode+0xe0>)
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	1c5a      	adds	r2, r3, #1
 800035a:	b291      	uxth	r1, r2
 800035c:	4a23      	ldr	r2, [pc, #140]	@ (80003ec <actionSetPasscode+0xe0>)
 800035e:	8011      	strh	r1, [r2, #0]
 8000360:	461a      	mov	r2, r3
 8000362:	79b9      	ldrb	r1, [r7, #6]
 8000364:	4b23      	ldr	r3, [pc, #140]	@ (80003f4 <actionSetPasscode+0xe8>)
 8000366:	5499      	strb	r1, [r3, r2]

			// Check if passcode is full
			if(index == PASSCODE_SIZE)
 8000368:	4b20      	ldr	r3, [pc, #128]	@ (80003ec <actionSetPasscode+0xe0>)
 800036a:	881b      	ldrh	r3, [r3, #0]
 800036c:	2b04      	cmp	r3, #4
 800036e:	d115      	bne.n	800039c <actionSetPasscode+0x90>
			{
				index = 0;
 8000370:	4b1e      	ldr	r3, [pc, #120]	@ (80003ec <actionSetPasscode+0xe0>)
 8000372:	2200      	movs	r2, #0
 8000374:	801a      	strh	r2, [r3, #0]
				rtv = RETURN_SUCCESS;
 8000376:	2301      	movs	r3, #1
 8000378:	71fb      	strb	r3, [r7, #7]
				HAL_TIM_Base_Stop(&htim1);
 800037a:	481d      	ldr	r0, [pc, #116]	@ (80003f0 <actionSetPasscode+0xe4>)
 800037c:	f002 ff12 	bl	80031a4 <HAL_TIM_Base_Stop>
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000380:	4b1b      	ldr	r3, [pc, #108]	@ (80003f0 <actionSetPasscode+0xe4>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2200      	movs	r2, #0
 8000386:	625a      	str	r2, [r3, #36]	@ 0x24
				memcpy(passcode, passcodeBuffer, sizeof(char)*PASSCODE_SIZE);
 8000388:	4b1a      	ldr	r3, [pc, #104]	@ (80003f4 <actionSetPasscode+0xe8>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a1a      	ldr	r2, [pc, #104]	@ (80003f8 <actionSetPasscode+0xec>)
 800038e:	6013      	str	r3, [r2, #0]
				memset(passcodeBuffer, 0, sizeof(char)*PASSCODE_SIZE);
 8000390:	2204      	movs	r2, #4
 8000392:	2100      	movs	r1, #0
 8000394:	4817      	ldr	r0, [pc, #92]	@ (80003f4 <actionSetPasscode+0xe8>)
 8000396:	f003 fdaa 	bl	8003eee <memset>
 800039a:	e021      	b.n	80003e0 <actionSetPasscode+0xd4>
				//writeEEPROM(passcode);
			}
			else
			{
				// Reset timeout timer
				rtv = RETURN_PENDING;
 800039c:	2302      	movs	r3, #2
 800039e:	71fb      	strb	r3, [r7, #7]
				HAL_TIM_Base_Start(&htim1);
 80003a0:	4813      	ldr	r0, [pc, #76]	@ (80003f0 <actionSetPasscode+0xe4>)
 80003a2:	f002 feab 	bl	80030fc <HAL_TIM_Base_Start>
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 80003a6:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <actionSetPasscode+0xe4>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2200      	movs	r2, #0
 80003ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80003ae:	e017      	b.n	80003e0 <actionSetPasscode+0xd4>
			}
		}
	}
	else if(__HAL_TIM_GET_COUNTER(&htim1) > ACTION_TIMEOUT)
 80003b0:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <actionSetPasscode+0xe4>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d910      	bls.n	80003e0 <actionSetPasscode+0xd4>
	{
		// Abort action if timeout activates
		index = 0;
 80003be:	4b0b      	ldr	r3, [pc, #44]	@ (80003ec <actionSetPasscode+0xe0>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	801a      	strh	r2, [r3, #0]
		rtv = RETURN_FAILURE;
 80003c4:	2300      	movs	r3, #0
 80003c6:	71fb      	strb	r3, [r7, #7]
		HAL_TIM_Base_Stop(&htim1);
 80003c8:	4809      	ldr	r0, [pc, #36]	@ (80003f0 <actionSetPasscode+0xe4>)
 80003ca:	f002 feeb 	bl	80031a4 <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80003ce:	4b08      	ldr	r3, [pc, #32]	@ (80003f0 <actionSetPasscode+0xe4>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2200      	movs	r2, #0
 80003d4:	625a      	str	r2, [r3, #36]	@ 0x24
		memset(passcodeBuffer, 0, sizeof(passcodeBuffer));
 80003d6:	2204      	movs	r2, #4
 80003d8:	2100      	movs	r1, #0
 80003da:	4806      	ldr	r0, [pc, #24]	@ (80003f4 <actionSetPasscode+0xe8>)
 80003dc:	f003 fd87 	bl	8003eee <memset>
	}

	return rtv;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000078 	.word	0x20000078
 80003f0:	200000e0 	.word	0x200000e0
 80003f4:	2000007c 	.word	0x2000007c
 80003f8:	20000074 	.word	0x20000074

080003fc <actionEnterPasscode>:
 * actionEnterPasscode():
 * Accept passcode to unlock the doorlock
 * Outputs success state
 */
uint8_t actionEnterPasscode(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
	static uint8_t index = 0;
	static char passcodeBuffer[PASSCODE_SIZE];

	uint8_t rtv = RETURN_NONE;
 8000402:	2303      	movs	r3, #3
 8000404:	71fb      	strb	r3, [r7, #7]

	// Check button matrix for input
	uint8_t buttonValue;
	if(scanButton(&buttonValue))
 8000406:	1d7b      	adds	r3, r7, #5
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff fedd 	bl	80001c8 <scanButton>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d05b      	beq.n	80004cc <actionEnterPasscode+0xd0>
	{
		// Abort action if lock/edit button pressed
		if(buttonValue == BUTTON_LOCK || buttonValue == BUTTON_EDIT)
 8000414:	797b      	ldrb	r3, [r7, #5]
 8000416:	2b7f      	cmp	r3, #127	@ 0x7f
 8000418:	d002      	beq.n	8000420 <actionEnterPasscode+0x24>
 800041a:	797b      	ldrb	r3, [r7, #5]
 800041c:	2b80      	cmp	r3, #128	@ 0x80
 800041e:	d111      	bne.n	8000444 <actionEnterPasscode+0x48>
		{
			index = 0;
 8000420:	4b39      	ldr	r3, [pc, #228]	@ (8000508 <actionEnterPasscode+0x10c>)
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]
			rtv = buttonValue;
 8000426:	797b      	ldrb	r3, [r7, #5]
 8000428:	71fb      	strb	r3, [r7, #7]
			HAL_TIM_Base_Stop(&htim1);
 800042a:	4838      	ldr	r0, [pc, #224]	@ (800050c <actionEnterPasscode+0x110>)
 800042c:	f002 feba 	bl	80031a4 <HAL_TIM_Base_Stop>
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000430:	4b36      	ldr	r3, [pc, #216]	@ (800050c <actionEnterPasscode+0x110>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2200      	movs	r2, #0
 8000436:	625a      	str	r2, [r3, #36]	@ 0x24
			memset(passcodeBuffer, 0, sizeof(passcodeBuffer));
 8000438:	2204      	movs	r2, #4
 800043a:	2100      	movs	r1, #0
 800043c:	4834      	ldr	r0, [pc, #208]	@ (8000510 <actionEnterPasscode+0x114>)
 800043e:	f003 fd56 	bl	8003eee <memset>
 8000442:	e05b      	b.n	80004fc <actionEnterPasscode+0x100>
		}
		else
		{
			// Add new input to passcode entry
			passcodeBuffer[index++] = buttonValue;
 8000444:	4b30      	ldr	r3, [pc, #192]	@ (8000508 <actionEnterPasscode+0x10c>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	1c5a      	adds	r2, r3, #1
 800044a:	b2d1      	uxtb	r1, r2
 800044c:	4a2e      	ldr	r2, [pc, #184]	@ (8000508 <actionEnterPasscode+0x10c>)
 800044e:	7011      	strb	r1, [r2, #0]
 8000450:	461a      	mov	r2, r3
 8000452:	7979      	ldrb	r1, [r7, #5]
 8000454:	4b2e      	ldr	r3, [pc, #184]	@ (8000510 <actionEnterPasscode+0x114>)
 8000456:	5499      	strb	r1, [r3, r2]

			// Check if passcode entry is full
			if(index == PASSCODE_SIZE)
 8000458:	4b2b      	ldr	r3, [pc, #172]	@ (8000508 <actionEnterPasscode+0x10c>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b04      	cmp	r3, #4
 800045e:	d12b      	bne.n	80004b8 <actionEnterPasscode+0xbc>
			{
				index = 0;
 8000460:	4b29      	ldr	r3, [pc, #164]	@ (8000508 <actionEnterPasscode+0x10c>)
 8000462:	2200      	movs	r2, #0
 8000464:	701a      	strb	r2, [r3, #0]
				rtv = RETURN_SUCCESS;
 8000466:	2301      	movs	r3, #1
 8000468:	71fb      	strb	r3, [r7, #7]

				// Check if passcode entry is correct
				for(uint8_t i = 0; i < PASSCODE_SIZE; i++)
 800046a:	2300      	movs	r3, #0
 800046c:	71bb      	strb	r3, [r7, #6]
 800046e:	e013      	b.n	8000498 <actionEnterPasscode+0x9c>
				{
					rtv &= passcode[i] == passcodeBuffer[i];
 8000470:	79bb      	ldrb	r3, [r7, #6]
 8000472:	4a28      	ldr	r2, [pc, #160]	@ (8000514 <actionEnterPasscode+0x118>)
 8000474:	5cd2      	ldrb	r2, [r2, r3]
 8000476:	79bb      	ldrb	r3, [r7, #6]
 8000478:	4925      	ldr	r1, [pc, #148]	@ (8000510 <actionEnterPasscode+0x114>)
 800047a:	5ccb      	ldrb	r3, [r1, r3]
 800047c:	429a      	cmp	r2, r3
 800047e:	bf0c      	ite	eq
 8000480:	2301      	moveq	r3, #1
 8000482:	2300      	movne	r3, #0
 8000484:	b2db      	uxtb	r3, r3
 8000486:	b25a      	sxtb	r2, r3
 8000488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800048c:	4013      	ands	r3, r2
 800048e:	b25b      	sxtb	r3, r3
 8000490:	71fb      	strb	r3, [r7, #7]
				for(uint8_t i = 0; i < PASSCODE_SIZE; i++)
 8000492:	79bb      	ldrb	r3, [r7, #6]
 8000494:	3301      	adds	r3, #1
 8000496:	71bb      	strb	r3, [r7, #6]
 8000498:	79bb      	ldrb	r3, [r7, #6]
 800049a:	2b03      	cmp	r3, #3
 800049c:	d9e8      	bls.n	8000470 <actionEnterPasscode+0x74>
				}

				HAL_TIM_Base_Stop(&htim1);
 800049e:	481b      	ldr	r0, [pc, #108]	@ (800050c <actionEnterPasscode+0x110>)
 80004a0:	f002 fe80 	bl	80031a4 <HAL_TIM_Base_Stop>
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 80004a4:	4b19      	ldr	r3, [pc, #100]	@ (800050c <actionEnterPasscode+0x110>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2200      	movs	r2, #0
 80004aa:	625a      	str	r2, [r3, #36]	@ 0x24
				memset(passcodeBuffer, 0, sizeof(char)*PASSCODE_SIZE);
 80004ac:	2204      	movs	r2, #4
 80004ae:	2100      	movs	r1, #0
 80004b0:	4817      	ldr	r0, [pc, #92]	@ (8000510 <actionEnterPasscode+0x114>)
 80004b2:	f003 fd1c 	bl	8003eee <memset>
 80004b6:	e021      	b.n	80004fc <actionEnterPasscode+0x100>
			}
			else
			{
				// Reset timeout timer
				rtv = RETURN_PENDING;
 80004b8:	2302      	movs	r3, #2
 80004ba:	71fb      	strb	r3, [r7, #7]
				HAL_TIM_Base_Start(&htim1);
 80004bc:	4813      	ldr	r0, [pc, #76]	@ (800050c <actionEnterPasscode+0x110>)
 80004be:	f002 fe1d 	bl	80030fc <HAL_TIM_Base_Start>
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 80004c2:	4b12      	ldr	r3, [pc, #72]	@ (800050c <actionEnterPasscode+0x110>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2200      	movs	r2, #0
 80004c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80004ca:	e017      	b.n	80004fc <actionEnterPasscode+0x100>
			}
		}
	}
	else if(__HAL_TIM_GET_COUNTER(&htim1) > ACTION_TIMEOUT)
 80004cc:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <actionEnterPasscode+0x110>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d910      	bls.n	80004fc <actionEnterPasscode+0x100>
	{
		// Abort action if timeout activates
		index = 0;
 80004da:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <actionEnterPasscode+0x10c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]
		rtv = RETURN_FAILURE;
 80004e0:	2300      	movs	r3, #0
 80004e2:	71fb      	strb	r3, [r7, #7]
		HAL_TIM_Base_Stop(&htim1);
 80004e4:	4809      	ldr	r0, [pc, #36]	@ (800050c <actionEnterPasscode+0x110>)
 80004e6:	f002 fe5d 	bl	80031a4 <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80004ea:	4b08      	ldr	r3, [pc, #32]	@ (800050c <actionEnterPasscode+0x110>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2200      	movs	r2, #0
 80004f0:	625a      	str	r2, [r3, #36]	@ 0x24
		memset(passcodeBuffer, 0, sizeof(passcodeBuffer));
 80004f2:	2204      	movs	r2, #4
 80004f4:	2100      	movs	r1, #0
 80004f6:	4806      	ldr	r0, [pc, #24]	@ (8000510 <actionEnterPasscode+0x114>)
 80004f8:	f003 fcf9 	bl	8003eee <memset>
	}

	return rtv;
 80004fc:	79fb      	ldrb	r3, [r7, #7]
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000080 	.word	0x20000080
 800050c:	200000e0 	.word	0x200000e0
 8000510:	20000084 	.word	0x20000084
 8000514:	20000074 	.word	0x20000074

08000518 <errorLED>:
static uint16_t LED_PINS[NUM_LEDS] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_3, GPIO_PIN_4};



void errorLED(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	activateLED(eERROR);
 800051c:	2001      	movs	r0, #1
 800051e:	f000 f811 	bl	8000544 <activateLED>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}

08000526 <pendingLED>:


void pendingLED(void)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	af00      	add	r7, sp, #0
	activateLED(ePENDING);
 800052a:	2002      	movs	r0, #2
 800052c:	f000 f80a 	bl	8000544 <activateLED>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <successLED>:


void successLED(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	activateLED(eSUCCESS);
 8000538:	2003      	movs	r0, #3
 800053a:	f000 f803 	bl	8000544 <activateLED>
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <activateLED>:


void activateLED(uint16_t ledType)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]
	uint32_t time = __HAL_TIM_GET_COUNTER(&htim3) % BLINK_INTERVAL;
 800054e:	4b10      	ldr	r3, [pc, #64]	@ (8000590 <activateLED+0x4c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000554:	4a0f      	ldr	r2, [pc, #60]	@ (8000594 <activateLED+0x50>)
 8000556:	fba2 1203 	umull	r1, r2, r2, r3
 800055a:	0952      	lsrs	r2, r2, #5
 800055c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000560:	fb01 f202 	mul.w	r2, r1, r2
 8000564:	1a9b      	subs	r3, r3, r2
 8000566:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(&htim3, time);
 8000568:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <activateLED+0x4c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	68fa      	ldr	r2, [r7, #12]
 800056e:	625a      	str	r2, [r3, #36]	@ 0x24

	if(activeLED == ledType)
 8000570:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <activateLED+0x54>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	88fa      	ldrh	r2, [r7, #6]
 8000576:	429a      	cmp	r2, r3
 8000578:	d005      	beq.n	8000586 <activateLED+0x42>
	{
		return;
	}

	disableLED();
 800057a:	f000 f80f 	bl	800059c <disableLED>
	activeLED = ledType;
 800057e:	4a06      	ldr	r2, [pc, #24]	@ (8000598 <activateLED+0x54>)
 8000580:	88fb      	ldrh	r3, [r7, #6]
 8000582:	8013      	strh	r3, [r2, #0]
 8000584:	e000      	b.n	8000588 <activateLED+0x44>
		return;
 8000586:	bf00      	nop
}
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	2000012c 	.word	0x2000012c
 8000594:	10624dd3 	.word	0x10624dd3
 8000598:	20000088 	.word	0x20000088

0800059c <disableLED>:


void disableLED(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	if(activeLED == eNONE)
 80005a0:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <disableLED+0x40>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d016      	beq.n	80005d6 <disableLED+0x3a>
	{
		return;
	}

	HAL_GPIO_WritePin(LED_PORTS[activeLED - 1], LED_PINS[activeLED - 1], GPIO_PIN_RESET);
 80005a8:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <disableLED+0x40>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	3b01      	subs	r3, #1
 80005ae:	4a0c      	ldr	r2, [pc, #48]	@ (80005e0 <disableLED+0x44>)
 80005b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005b4:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <disableLED+0x40>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	4a0a      	ldr	r2, [pc, #40]	@ (80005e4 <disableLED+0x48>)
 80005bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005c0:	2200      	movs	r2, #0
 80005c2:	4619      	mov	r1, r3
 80005c4:	f001 f874 	bl	80016b0 <HAL_GPIO_WritePin>
	activeLEDState = false;
 80005c8:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <disableLED+0x4c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
	activeLED = eNONE;
 80005ce:	4b03      	ldr	r3, [pc, #12]	@ (80005dc <disableLED+0x40>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	801a      	strh	r2, [r3, #0]
 80005d4:	e000      	b.n	80005d8 <disableLED+0x3c>
		return;
 80005d6:	bf00      	nop
}
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000088 	.word	0x20000088
 80005e0:	20000034 	.word	0x20000034
 80005e4:	20000044 	.word	0x20000044
 80005e8:	2000008a 	.word	0x2000008a

080005ec <blinkLED>:


void blinkLED(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	if(activeLED == eNONE)
 80005f0:	4b31      	ldr	r3, [pc, #196]	@ (80006b8 <blinkLED+0xcc>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d05c      	beq.n	80006b2 <blinkLED+0xc6>
	{
		return;
	}

	// Disable LED if timeout activates
	if(__HAL_TIM_GET_COUNTER(&htim3) > LED_TIMEOUTS[activeLED])
 80005f8:	4b30      	ldr	r3, [pc, #192]	@ (80006bc <blinkLED+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005fe:	4a2e      	ldr	r2, [pc, #184]	@ (80006b8 <blinkLED+0xcc>)
 8000600:	8812      	ldrh	r2, [r2, #0]
 8000602:	4611      	mov	r1, r2
 8000604:	4a2e      	ldr	r2, [pc, #184]	@ (80006c0 <blinkLED+0xd4>)
 8000606:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800060a:	4293      	cmp	r3, r2
 800060c:	d902      	bls.n	8000614 <blinkLED+0x28>
	{
		disableLED();
 800060e:	f7ff ffc5 	bl	800059c <disableLED>
 8000612:	e04f      	b.n	80006b4 <blinkLED+0xc8>
	}
	// Activate LED
	else if(((__HAL_TIM_GET_COUNTER(&htim3) % BLINK_INTERVAL) < (BLINK_INTERVAL / 2)) && !activeLEDState)
 8000614:	4b29      	ldr	r3, [pc, #164]	@ (80006bc <blinkLED+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800061a:	4b2a      	ldr	r3, [pc, #168]	@ (80006c4 <blinkLED+0xd8>)
 800061c:	fba3 1302 	umull	r1, r3, r3, r2
 8000620:	095b      	lsrs	r3, r3, #5
 8000622:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000626:	fb01 f303 	mul.w	r3, r1, r3
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	2bf9      	cmp	r3, #249	@ 0xf9
 800062e:	d81a      	bhi.n	8000666 <blinkLED+0x7a>
 8000630:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <blinkLED+0xdc>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	f083 0301 	eor.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d013      	beq.n	8000666 <blinkLED+0x7a>
	{
		HAL_GPIO_WritePin(LED_PORTS[activeLED - 1], LED_PINS[activeLED - 1], GPIO_PIN_SET);
 800063e:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <blinkLED+0xcc>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	3b01      	subs	r3, #1
 8000644:	4a21      	ldr	r2, [pc, #132]	@ (80006cc <blinkLED+0xe0>)
 8000646:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800064a:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <blinkLED+0xcc>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	3b01      	subs	r3, #1
 8000650:	4a1f      	ldr	r2, [pc, #124]	@ (80006d0 <blinkLED+0xe4>)
 8000652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000656:	2201      	movs	r2, #1
 8000658:	4619      	mov	r1, r3
 800065a:	f001 f829 	bl	80016b0 <HAL_GPIO_WritePin>
		activeLEDState = true;
 800065e:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <blinkLED+0xdc>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]
 8000664:	e026      	b.n	80006b4 <blinkLED+0xc8>
	}
	// Disable LED
	else if(((__HAL_TIM_GET_COUNTER(&htim3) % BLINK_INTERVAL) >= (BLINK_INTERVAL / 2)) && activeLEDState)
 8000666:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <blinkLED+0xd0>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800066c:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <blinkLED+0xd8>)
 800066e:	fba3 1302 	umull	r1, r3, r3, r2
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000678:	fb01 f303 	mul.w	r3, r1, r3
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	2bf9      	cmp	r3, #249	@ 0xf9
 8000680:	d918      	bls.n	80006b4 <blinkLED+0xc8>
 8000682:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <blinkLED+0xdc>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d014      	beq.n	80006b4 <blinkLED+0xc8>
	{
		HAL_GPIO_WritePin(LED_PORTS[activeLED - 1], LED_PINS[activeLED - 1], GPIO_PIN_RESET);
 800068a:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <blinkLED+0xcc>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	3b01      	subs	r3, #1
 8000690:	4a0e      	ldr	r2, [pc, #56]	@ (80006cc <blinkLED+0xe0>)
 8000692:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000696:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <blinkLED+0xcc>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	3b01      	subs	r3, #1
 800069c:	4a0c      	ldr	r2, [pc, #48]	@ (80006d0 <blinkLED+0xe4>)
 800069e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a2:	2200      	movs	r2, #0
 80006a4:	4619      	mov	r1, r3
 80006a6:	f001 f803 	bl	80016b0 <HAL_GPIO_WritePin>
		activeLEDState = false;
 80006aa:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <blinkLED+0xdc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
 80006b0:	e000      	b.n	80006b4 <blinkLED+0xc8>
		return;
 80006b2:	bf00      	nop
	}
}
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000088 	.word	0x20000088
 80006bc:	2000012c 	.word	0x2000012c
 80006c0:	2000002c 	.word	0x2000002c
 80006c4:	10624dd3 	.word	0x10624dd3
 80006c8:	2000008a 	.word	0x2000008a
 80006cc:	20000034 	.word	0x20000034
 80006d0:	20000044 	.word	0x20000044

080006d4 <print>:
static void MX_USART1_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void print(const char *str, uint16_t size)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t *)str, size, HAL_MAX_DELAY);
 80006e0:	887a      	ldrh	r2, [r7, #2]
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	4803      	ldr	r0, [pc, #12]	@ (80006f8 <print+0x24>)
 80006ea:	f003 f825 	bl	8003738 <HAL_UART_Transmit>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000178 	.word	0x20000178

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b5b0      	push	{r4, r5, r7, lr}
 80006fe:	b0ba      	sub	sp, #232	@ 0xe8
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint8_t state = ePASSIVE;
 8000702:	2300      	movs	r3, #0
 8000704:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
  bool lockStatus = eLOCKED;
 8000708:	2300      	movs	r3, #0
 800070a:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070e:	f000 fcd5 	bl	80010bc <HAL_Init>
  //readEEPROM();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000712:	f000 f947 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000716:	f000 fab3 	bl	8000c80 <MX_GPIO_Init>
  MX_I2C1_Init();
 800071a:	f000 f99b 	bl	8000a54 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800071e:	f000 fa7f 	bl	8000c20 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000722:	f000 f9d7 	bl	8000ad4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000726:	f000 fa29 	bl	8000b7c <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	switch(state)
 800072a:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800072e:	2b03      	cmp	r3, #3
 8000730:	f000 80c0 	beq.w	80008b4 <main+0x1b8>
 8000734:	2b03      	cmp	r3, #3
 8000736:	f300 8118 	bgt.w	800096a <main+0x26e>
 800073a:	2b00      	cmp	r3, #0
 800073c:	d003      	beq.n	8000746 <main+0x4a>
 800073e:	2b01      	cmp	r3, #1
 8000740:	f000 809b 	beq.w	800087a <main+0x17e>
		else if(rtv == RETURN_PENDING) 	{ pendingLED(); }

		break;

	default:
		break;
 8000744:	e111      	b.n	800096a <main+0x26e>
		rtv = actionEnterPasscode();
 8000746:	f7ff fe59 	bl	80003fc <actionEnterPasscode>
 800074a:	4603      	mov	r3, r0
 800074c:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
		if(rtv == RETURN_SUCCESS){
 8000750:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 8000754:	2b01      	cmp	r3, #1
 8000756:	d12d      	bne.n	80007b4 <main+0xb8>
			if(lockStatus == eLOCKED)
 8000758:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 800075c:	f083 0301 	eor.w	r3, r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d015      	beq.n	8000792 <main+0x96>
				char msg[] = "\nCorrect Passcode Entered";
 8000766:	4b86      	ldr	r3, [pc, #536]	@ (8000980 <main+0x284>)
 8000768:	f107 04c8 	add.w	r4, r7, #200	@ 0xc8
 800076c:	461d      	mov	r5, r3
 800076e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000772:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000776:	c403      	stmia	r4!, {r0, r1}
 8000778:	8022      	strh	r2, [r4, #0]
				print(msg, sizeof(msg));
 800077a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800077e:	211a      	movs	r1, #26
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffa7 	bl	80006d4 <print>
				successLED();
 8000786:	f7ff fed5 	bl	8000534 <successLED>
				state = eLOCKING;
 800078a:	2301      	movs	r3, #1
 800078c:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
		break;
 8000790:	e0ed      	b.n	800096e <main+0x272>
				char msg[] = "\nAlready Unlocked";
 8000792:	4b7c      	ldr	r3, [pc, #496]	@ (8000984 <main+0x288>)
 8000794:	f107 04b4 	add.w	r4, r7, #180	@ 0xb4
 8000798:	461d      	mov	r5, r3
 800079a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079e:	682b      	ldr	r3, [r5, #0]
 80007a0:	8023      	strh	r3, [r4, #0]
				print(msg, sizeof(msg));
 80007a2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80007a6:	2112      	movs	r1, #18
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff93 	bl	80006d4 <print>
				disableLED();
 80007ae:	f7ff fef5 	bl	800059c <disableLED>
		break;
 80007b2:	e0dc      	b.n	800096e <main+0x272>
		else if(rtv == RETURN_FAILURE){
 80007b4:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d112      	bne.n	80007e2 <main+0xe6>
			char msg[] = "\nIncorrect Passcode Entered";
 80007bc:	4b72      	ldr	r3, [pc, #456]	@ (8000988 <main+0x28c>)
 80007be:	f107 0498 	add.w	r4, r7, #152	@ 0x98
 80007c2:	461d      	mov	r5, r3
 80007c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			print(msg, sizeof(msg));
 80007d0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80007d4:	211c      	movs	r1, #28
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff7c 	bl	80006d4 <print>
			errorLED();
 80007dc:	f7ff fe9c 	bl	8000518 <errorLED>
		break;
 80007e0:	e0c5      	b.n	800096e <main+0x272>
		else if(rtv == BUTTON_LOCK){
 80007e2:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 80007e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80007e8:	d128      	bne.n	800083c <main+0x140>
			if(lockStatus == eUNLOCKED)
 80007ea:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d015      	beq.n	800081e <main+0x122>
				char msg[] = "\nUnlocking/Locking Door";
 80007f2:	4b66      	ldr	r3, [pc, #408]	@ (800098c <main+0x290>)
 80007f4:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 80007f8:	461d      	mov	r5, r3
 80007fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000802:	e884 0003 	stmia.w	r4, {r0, r1}
				print(msg, sizeof(msg));
 8000806:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800080a:	2118      	movs	r1, #24
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff61 	bl	80006d4 <print>
				successLED();
 8000812:	f7ff fe8f 	bl	8000534 <successLED>
				state = eLOCKING;
 8000816:	2301      	movs	r3, #1
 8000818:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
		break;
 800081c:	e0a7      	b.n	800096e <main+0x272>
				char msg[] = "\nAlready Locked";
 800081e:	4b5c      	ldr	r3, [pc, #368]	@ (8000990 <main+0x294>)
 8000820:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8000824:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000826:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				print(msg, sizeof(msg));
 800082a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800082e:	2110      	movs	r1, #16
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff4f 	bl	80006d4 <print>
				disableLED();
 8000836:	f7ff feb1 	bl	800059c <disableLED>
		break;
 800083a:	e098      	b.n	800096e <main+0x272>
		else if(rtv == BUTTON_EDIT){
 800083c:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 8000840:	2b80      	cmp	r3, #128	@ 0x80
 8000842:	d113      	bne.n	800086c <main+0x170>
			char msg[] = "\nEditing Passcode";
 8000844:	4b53      	ldr	r3, [pc, #332]	@ (8000994 <main+0x298>)
 8000846:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 800084a:	461d      	mov	r5, r3
 800084c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800084e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000850:	682b      	ldr	r3, [r5, #0]
 8000852:	8023      	strh	r3, [r4, #0]
			print(msg, sizeof(msg));
 8000854:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000858:	2112      	movs	r1, #18
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff3a 	bl	80006d4 <print>
			disableLED();
 8000860:	f7ff fe9c 	bl	800059c <disableLED>
			state = eSETTING_PASSCODE;
 8000864:	2303      	movs	r3, #3
 8000866:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
		break;
 800086a:	e080      	b.n	800096e <main+0x272>
		else if(rtv == RETURN_PENDING) 	{ pendingLED(); }
 800086c:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 8000870:	2b02      	cmp	r3, #2
 8000872:	d17c      	bne.n	800096e <main+0x272>
 8000874:	f7ff fe57 	bl	8000526 <pendingLED>
		break;
 8000878:	e079      	b.n	800096e <main+0x272>
		lockStatus = !lockStatus;
 800087a:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 800087e:	2b00      	cmp	r3, #0
 8000880:	bf14      	ite	ne
 8000882:	2301      	movne	r3, #1
 8000884:	2300      	moveq	r3, #0
 8000886:	b2db      	uxtb	r3, r3
 8000888:	f083 0301 	eor.w	r3, r3, #1
 800088c:	b2db      	uxtb	r3, r3
 800088e:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
 8000892:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
		powerMotor(lockStatus, 1000U);
 800089e:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 80008a2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 fa8c 	bl	8000dc4 <powerMotor>
		state = ePASSIVE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	    break;
 80008b2:	e05f      	b.n	8000974 <main+0x278>
		rtv = actionSetPasscode();
 80008b4:	f7ff fd2a 	bl	800030c <actionSetPasscode>
 80008b8:	4603      	mov	r3, r0
 80008ba:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
		if(rtv == RETURN_SUCCESS){
 80008be:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d118      	bne.n	80008f8 <main+0x1fc>
			char msg[] = "\nPasscode Successfully Set";
 80008c6:	4b34      	ldr	r3, [pc, #208]	@ (8000998 <main+0x29c>)
 80008c8:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80008cc:	461d      	mov	r5, r3
 80008ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008d6:	c403      	stmia	r4!, {r0, r1}
 80008d8:	8022      	strh	r2, [r4, #0]
 80008da:	3402      	adds	r4, #2
 80008dc:	0c13      	lsrs	r3, r2, #16
 80008de:	7023      	strb	r3, [r4, #0]
			print(msg, sizeof(msg));
 80008e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008e4:	211b      	movs	r1, #27
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fef4 	bl	80006d4 <print>
			successLED();
 80008ec:	f7ff fe22 	bl	8000534 <successLED>
			state = ePASSIVE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
		break;
 80008f6:	e03c      	b.n	8000972 <main+0x276>
		else if(rtv == RETURN_FAILURE){
 80008f8:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d115      	bne.n	800092c <main+0x230>
			char msg[] = "\nPasscode Unsuccessfully Set";
 8000900:	4b26      	ldr	r3, [pc, #152]	@ (800099c <main+0x2a0>)
 8000902:	f107 0420 	add.w	r4, r7, #32
 8000906:	461d      	mov	r5, r3
 8000908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000910:	c407      	stmia	r4!, {r0, r1, r2}
 8000912:	7023      	strb	r3, [r4, #0]
			print(msg, sizeof(msg));
 8000914:	f107 0320 	add.w	r3, r7, #32
 8000918:	211d      	movs	r1, #29
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff feda 	bl	80006d4 <print>
			errorLED();
 8000920:	f7ff fdfa 	bl	8000518 <errorLED>
			state = ePASSIVE;
 8000924:	2300      	movs	r3, #0
 8000926:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
		break;
 800092a:	e022      	b.n	8000972 <main+0x276>
		else if(rtv == BUTTON_LOCK){
 800092c:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 8000930:	2b7f      	cmp	r3, #127	@ 0x7f
 8000932:	d113      	bne.n	800095c <main+0x260>
			char msg[] = "\nAborting Passcode Change";
 8000934:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <main+0x2a4>)
 8000936:	1d3c      	adds	r4, r7, #4
 8000938:	461d      	mov	r5, r3
 800093a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000942:	c403      	stmia	r4!, {r0, r1}
 8000944:	8022      	strh	r2, [r4, #0]
			print(msg, sizeof(msg));
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	211a      	movs	r1, #26
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fec2 	bl	80006d4 <print>
			disableLED();
 8000950:	f7ff fe24 	bl	800059c <disableLED>
			state = ePASSIVE;
 8000954:	2300      	movs	r3, #0
 8000956:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
		break;
 800095a:	e00a      	b.n	8000972 <main+0x276>
		else if(rtv == RETURN_PENDING) 	{ pendingLED(); }
 800095c:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 8000960:	2b02      	cmp	r3, #2
 8000962:	d106      	bne.n	8000972 <main+0x276>
 8000964:	f7ff fddf 	bl	8000526 <pendingLED>
		break;
 8000968:	e003      	b.n	8000972 <main+0x276>
		break;
 800096a:	bf00      	nop
 800096c:	e002      	b.n	8000974 <main+0x278>
		break;
 800096e:	bf00      	nop
 8000970:	e000      	b.n	8000974 <main+0x278>
		break;
 8000972:	bf00      	nop
	}

	blinkLED();
 8000974:	f7ff fe3a 	bl	80005ec <blinkLED>
	HAL_Delay(50);
 8000978:	2032      	movs	r0, #50	@ 0x32
 800097a:	f000 fc05 	bl	8001188 <HAL_Delay>
	switch(state)
 800097e:	e6d4      	b.n	800072a <main+0x2e>
 8000980:	08003f64 	.word	0x08003f64
 8000984:	08003f80 	.word	0x08003f80
 8000988:	08003f94 	.word	0x08003f94
 800098c:	08003fb0 	.word	0x08003fb0
 8000990:	08003fc8 	.word	0x08003fc8
 8000994:	08003fd8 	.word	0x08003fd8
 8000998:	08003fec 	.word	0x08003fec
 800099c:	08004008 	.word	0x08004008
 80009a0:	08004028 	.word	0x08004028

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b096      	sub	sp, #88	@ 0x58
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009ae:	2228      	movs	r2, #40	@ 0x28
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f003 fa9b 	bl	8003eee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]
 80009d6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d8:	2302      	movs	r3, #2
 80009da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009dc:	2301      	movs	r3, #1
 80009de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e0:	2310      	movs	r3, #16
 80009e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 ffa9 	bl	8001944 <HAL_RCC_OscConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009f8:	f000 f9de 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fc:	230f      	movs	r3, #15
 80009fe:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 ffd2 	bl	80029c0 <HAL_RCC_ClockConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a22:	f000 f9c9 	bl	8000db8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000a26:	f241 0321 	movw	r3, #4129	@ 0x1021
 8000a2a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 f9e0 	bl	8002e00 <HAL_RCCEx_PeriphCLKConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a46:	f000 f9b7 	bl	8000db8 <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3758      	adds	r7, #88	@ 0x58
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000acc <MX_I2C1_Init+0x78>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a60:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad0 <MX_I2C1_Init+0x7c>)
 8000a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a64:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a70:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a76:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a8e:	480e      	ldr	r0, [pc, #56]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000a90:	f000 fe26 	bl	80016e0 <HAL_I2C_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a9a:	f000 f98d 	bl	8000db8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4809      	ldr	r0, [pc, #36]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000aa2:	f000 feb8 	bl	8001816 <HAL_I2CEx_ConfigAnalogFilter>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000aac:	f000 f984 	bl	8000db8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <MX_I2C1_Init+0x74>)
 8000ab4:	f000 fefa 	bl	80018ac <HAL_I2CEx_ConfigDigitalFilter>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000abe:	f000 f97b 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000008c 	.word	0x2000008c
 8000acc:	40005400 	.word	0x40005400
 8000ad0:	00201d2b 	.word	0x00201d2b

08000ad4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000af2:	4b20      	ldr	r3, [pc, #128]	@ (8000b74 <MX_TIM1_Init+0xa0>)
 8000af4:	4a20      	ldr	r2, [pc, #128]	@ (8000b78 <MX_TIM1_Init+0xa4>)
 8000af6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000;
 8000af8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b74 <MX_TIM1_Init+0xa0>)
 8000afa:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000afe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <MX_TIM1_Init+0xa0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b06:	4b1b      	ldr	r3, [pc, #108]	@ (8000b74 <MX_TIM1_Init+0xa0>)
 8000b08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <MX_TIM1_Init+0xa0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b14:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <MX_TIM1_Init+0xa0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1a:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <MX_TIM1_Init+0xa0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b20:	4814      	ldr	r0, [pc, #80]	@ (8000b74 <MX_TIM1_Init+0xa0>)
 8000b22:	f002 fa93 	bl	800304c <HAL_TIM_Base_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000b2c:	f000 f944 	bl	8000db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480d      	ldr	r0, [pc, #52]	@ (8000b74 <MX_TIM1_Init+0xa0>)
 8000b3e:	f002 fb58 	bl	80031f2 <HAL_TIM_ConfigClockSource>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b48:	f000 f936 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <MX_TIM1_Init+0xa0>)
 8000b5e:	f002 fd2f 	bl	80035c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b68:	f000 f926 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	3720      	adds	r7, #32
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	200000e0 	.word	0x200000e0
 8000b78:	40012c00 	.word	0x40012c00

08000b7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <MX_TIM3_Init+0x9c>)
 8000b9c:	4a1f      	ldr	r2, [pc, #124]	@ (8000c1c <MX_TIM3_Init+0xa0>)
 8000b9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <MX_TIM3_Init+0x9c>)
 8000ba2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000ba6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <MX_TIM3_Init+0x9c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_TIM3_Init+0x9c>)
 8000bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <MX_TIM3_Init+0x9c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <MX_TIM3_Init+0x9c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bc2:	4815      	ldr	r0, [pc, #84]	@ (8000c18 <MX_TIM3_Init+0x9c>)
 8000bc4:	f002 fa42 	bl	800304c <HAL_TIM_Base_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000bce:	f000 f8f3 	bl	8000db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480e      	ldr	r0, [pc, #56]	@ (8000c18 <MX_TIM3_Init+0x9c>)
 8000be0:	f002 fb07 	bl	80031f2 <HAL_TIM_ConfigClockSource>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000bea:	f000 f8e5 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4807      	ldr	r0, [pc, #28]	@ (8000c18 <MX_TIM3_Init+0x9c>)
 8000bfc:	f002 fce0 	bl	80035c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000c06:	f000 f8d7 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 8000c0a:	4803      	ldr	r0, [pc, #12]	@ (8000c18 <MX_TIM3_Init+0x9c>)
 8000c0c:	f002 fa76 	bl	80030fc <HAL_TIM_Base_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2000012c 	.word	0x2000012c
 8000c1c:	40000400 	.word	0x40000400

08000c20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c24:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <MX_USART1_UART_Init+0x58>)
 8000c26:	4a15      	ldr	r2, [pc, #84]	@ (8000c7c <MX_USART1_UART_Init+0x5c>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <MX_USART1_UART_Init+0x58>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <MX_USART1_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <MX_USART1_UART_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <MX_USART1_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <MX_USART1_UART_Init+0x58>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <MX_USART1_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <MX_USART1_UART_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <MX_USART1_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_USART1_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_USART1_UART_Init+0x58>)
 8000c64:	f002 fd1a 	bl	800369c <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c6e:	f000 f8a3 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000178 	.word	0x20000178
 8000c7c:	40013800 	.word	0x40013800

08000c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 030c 	add.w	r3, r7, #12
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c96:	4b45      	ldr	r3, [pc, #276]	@ (8000dac <MX_GPIO_Init+0x12c>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	4a44      	ldr	r2, [pc, #272]	@ (8000dac <MX_GPIO_Init+0x12c>)
 8000c9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ca0:	6153      	str	r3, [r2, #20]
 8000ca2:	4b42      	ldr	r3, [pc, #264]	@ (8000dac <MX_GPIO_Init+0x12c>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b3f      	ldr	r3, [pc, #252]	@ (8000dac <MX_GPIO_Init+0x12c>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	4a3e      	ldr	r2, [pc, #248]	@ (8000dac <MX_GPIO_Init+0x12c>)
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb8:	6153      	str	r3, [r2, #20]
 8000cba:	4b3c      	ldr	r3, [pc, #240]	@ (8000dac <MX_GPIO_Init+0x12c>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	4b39      	ldr	r3, [pc, #228]	@ (8000dac <MX_GPIO_Init+0x12c>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	4a38      	ldr	r2, [pc, #224]	@ (8000dac <MX_GPIO_Init+0x12c>)
 8000ccc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cd0:	6153      	str	r3, [r2, #20]
 8000cd2:	4b36      	ldr	r3, [pc, #216]	@ (8000dac <MX_GPIO_Init+0x12c>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f640 017b 	movw	r1, #2171	@ 0x87b
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce8:	f000 fce2 	bl	80016b0 <HAL_GPIO_WritePin>
                          |DIR_Pin|STEP_Pin|COL_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COL_1_Pin|COL_3_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2128      	movs	r1, #40	@ 0x28
 8000cf0:	482f      	ldr	r0, [pc, #188]	@ (8000db0 <MX_GPIO_Init+0x130>)
 8000cf2:	f000 fcdd 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ROW_1_Pin */
  GPIO_InitStruct.Pin = ROW_1_Pin;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ROW_1_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	4619      	mov	r1, r3
 8000d08:	482a      	ldr	r0, [pc, #168]	@ (8000db4 <MX_GPIO_Init+0x134>)
 8000d0a:	f000 fb47 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
                           DIR_Pin STEP_Pin COL_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8000d0e:	f640 037b 	movw	r3, #2171	@ 0x87b
 8000d12:	60fb      	str	r3, [r7, #12]
                          |DIR_Pin|STEP_Pin|COL_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4619      	mov	r1, r3
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2a:	f000 fb37 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000d2e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000d32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d40:	2307      	movs	r3, #7
 8000d42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4e:	f000 fb25 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW_3_Pin ROW_2_Pin */
  GPIO_InitStruct.Pin = ROW_3_Pin|ROW_2_Pin;
 8000d52:	2303      	movs	r3, #3
 8000d54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	4619      	mov	r1, r3
 8000d64:	4812      	ldr	r0, [pc, #72]	@ (8000db0 <MX_GPIO_Init+0x130>)
 8000d66:	f000 fb19 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : ROW_4_Pin */
  GPIO_InitStruct.Pin = ROW_4_Pin;
 8000d6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ROW_4_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d82:	f000 fb0b 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : COL_1_Pin COL_3_Pin */
  GPIO_InitStruct.Pin = COL_1_Pin|COL_3_Pin;
 8000d86:	2328      	movs	r3, #40	@ 0x28
 8000d88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4804      	ldr	r0, [pc, #16]	@ (8000db0 <MX_GPIO_Init+0x130>)
 8000d9e:	f000 fafd 	bl	800139c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da2:	bf00      	nop
 8000da4:	3720      	adds	r7, #32
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000
 8000db0:	48000400 	.word	0x48000400
 8000db4:	48001400 	.word	0x48001400

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <Error_Handler+0x8>

08000dc4 <powerMotor>:
 * powerMotor():
 * Drives the stepper motor in the given direction
 * by the given amount of steps
 */
void powerMotor(bool direction, uint16_t steps)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	460a      	mov	r2, r1
 8000dce:	71fb      	strb	r3, [r7, #7]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	80bb      	strh	r3, [r7, #4]
	// Set motor direction
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, direction);
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	2120      	movs	r1, #32
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dde:	f000 fc67 	bl	80016b0 <HAL_GPIO_WritePin>

	// Drive motor steps
	for (uint16_t i = 0; i < steps; i++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	81fb      	strh	r3, [r7, #14]
 8000de6:	e014      	b.n	8000e12 <powerMotor+0x4e>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2140      	movs	r1, #64	@ 0x40
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df0:	f000 fc5e 	bl	80016b0 <HAL_GPIO_WritePin>
		HAL_Delay(STEP_DELAY);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f000 f9c7 	bl	8001188 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2140      	movs	r1, #64	@ 0x40
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e02:	f000 fc55 	bl	80016b0 <HAL_GPIO_WritePin>
		HAL_Delay(STEP_DELAY);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f000 f9be 	bl	8001188 <HAL_Delay>
	for (uint16_t i = 0; i < steps; i++)
 8000e0c:	89fb      	ldrh	r3, [r7, #14]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	81fb      	strh	r3, [r7, #14]
 8000e12:	89fa      	ldrh	r2, [r7, #14]
 8000e14:	88bb      	ldrh	r3, [r7, #4]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d3e6      	bcc.n	8000de8 <powerMotor+0x24>
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <HAL_MspInit+0x44>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e68 <HAL_MspInit+0x44>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6193      	str	r3, [r2, #24]
 8000e36:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <HAL_MspInit+0x44>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <HAL_MspInit+0x44>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	4a08      	ldr	r2, [pc, #32]	@ (8000e68 <HAL_MspInit+0x44>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e4c:	61d3      	str	r3, [r2, #28]
 8000e4e:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <HAL_MspInit+0x44>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000

08000e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a17      	ldr	r2, [pc, #92]	@ (8000ee8 <HAL_I2C_MspInit+0x7c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d127      	bne.n	8000ede <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <HAL_I2C_MspInit+0x80>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	4a16      	ldr	r2, [pc, #88]	@ (8000eec <HAL_I2C_MspInit+0x80>)
 8000e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e98:	6153      	str	r3, [r2, #20]
 8000e9a:	4b14      	ldr	r3, [pc, #80]	@ (8000eec <HAL_I2C_MspInit+0x80>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ea6:	23c0      	movs	r3, #192	@ 0xc0
 8000ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eaa:	2312      	movs	r3, #18
 8000eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480b      	ldr	r0, [pc, #44]	@ (8000ef0 <HAL_I2C_MspInit+0x84>)
 8000ec2:	f000 fa6b 	bl	800139c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ec6:	4b09      	ldr	r3, [pc, #36]	@ (8000eec <HAL_I2C_MspInit+0x80>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a08      	ldr	r2, [pc, #32]	@ (8000eec <HAL_I2C_MspInit+0x80>)
 8000ecc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ed0:	61d3      	str	r3, [r2, #28]
 8000ed2:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HAL_I2C_MspInit+0x80>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	@ 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	48000400 	.word	0x48000400

08000ef4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a13      	ldr	r2, [pc, #76]	@ (8000f50 <HAL_TIM_Base_MspInit+0x5c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d10c      	bne.n	8000f20 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f06:	4b13      	ldr	r3, [pc, #76]	@ (8000f54 <HAL_TIM_Base_MspInit+0x60>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	4a12      	ldr	r2, [pc, #72]	@ (8000f54 <HAL_TIM_Base_MspInit+0x60>)
 8000f0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f10:	6193      	str	r3, [r2, #24]
 8000f12:	4b10      	ldr	r3, [pc, #64]	@ (8000f54 <HAL_TIM_Base_MspInit+0x60>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f1e:	e010      	b.n	8000f42 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0c      	ldr	r2, [pc, #48]	@ (8000f58 <HAL_TIM_Base_MspInit+0x64>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d10b      	bne.n	8000f42 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_TIM_Base_MspInit+0x60>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	4a09      	ldr	r2, [pc, #36]	@ (8000f54 <HAL_TIM_Base_MspInit+0x60>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	61d3      	str	r3, [r2, #28]
 8000f36:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <HAL_TIM_Base_MspInit+0x60>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40012c00 	.word	0x40012c00
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40000400 	.word	0x40000400

08000f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	@ 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a18      	ldr	r2, [pc, #96]	@ (8000fdc <HAL_UART_MspInit+0x80>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d129      	bne.n	8000fd2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f7e:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <HAL_UART_MspInit+0x84>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	4a17      	ldr	r2, [pc, #92]	@ (8000fe0 <HAL_UART_MspInit+0x84>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f88:	6193      	str	r3, [r2, #24]
 8000f8a:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <HAL_UART_MspInit+0x84>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <HAL_UART_MspInit+0x84>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4a11      	ldr	r2, [pc, #68]	@ (8000fe0 <HAL_UART_MspInit+0x84>)
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa0:	6153      	str	r3, [r2, #20]
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <HAL_UART_MspInit+0x84>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fce:	f000 f9e5 	bl	800139c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	@ 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40013800 	.word	0x40013800
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <NMI_Handler+0x4>

08000fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <HardFault_Handler+0x4>

08000ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <MemManage_Handler+0x4>

08000ffc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <UsageFault_Handler+0x4>

0800100c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103a:	f000 f885 	bl	8001148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	@ (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800106c:	f7ff ffea 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480c      	ldr	r0, [pc, #48]	@ (80010a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001072:	490d      	ldr	r1, [pc, #52]	@ (80010a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001074:	4a0d      	ldr	r2, [pc, #52]	@ (80010ac <LoopForever+0xe>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001088:	4c0a      	ldr	r4, [pc, #40]	@ (80010b4 <LoopForever+0x16>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001096:	f002 ff33 	bl	8003f00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800109a:	f7ff fb2f 	bl	80006fc <main>

0800109e <LoopForever>:

LoopForever:
    b LoopForever
 800109e:	e7fe      	b.n	800109e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010a0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80010ac:	08004084 	.word	0x08004084
  ldr r2, =_sbss
 80010b0:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80010b4:	20000204 	.word	0x20000204

080010b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC1_2_IRQHandler>
	...

080010bc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c0:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <HAL_Init+0x28>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a07      	ldr	r2, [pc, #28]	@ (80010e4 <HAL_Init+0x28>)
 80010c6:	f043 0310 	orr.w	r3, r3, #16
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010cc:	2003      	movs	r0, #3
 80010ce:	f000 f931 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f000 f808 	bl	80010e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d8:	f7ff fea4 	bl	8000e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40022000 	.word	0x40022000

080010e8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <HAL_InitTick+0x54>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <HAL_InitTick+0x58>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f000 f93b 	bl	8001382 <HAL_SYSTICK_Config>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e00e      	b.n	8001134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b0f      	cmp	r3, #15
 800111a:	d80a      	bhi.n	8001132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800111c:	2200      	movs	r2, #0
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f000 f911 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001128:	4a06      	ldr	r2, [pc, #24]	@ (8001144 <HAL_InitTick+0x5c>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	2000004c 	.word	0x2000004c
 8001140:	20000054 	.word	0x20000054
 8001144:	20000050 	.word	0x20000050

08001148 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_IncTick+0x20>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <HAL_IncTick+0x24>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a04      	ldr	r2, [pc, #16]	@ (800116c <HAL_IncTick+0x24>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000054 	.word	0x20000054
 800116c:	20000200 	.word	0x20000200

08001170 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;  
 8001174:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <HAL_GetTick+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000200 	.word	0x20000200

08001188 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff ffee 	bl	8001170 <HAL_GetTick>
 8001194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d005      	beq.n	80011ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a2:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <HAL_Delay+0x44>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011ae:	bf00      	nop
 80011b0:	f7ff ffde 	bl	8001170 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d8f7      	bhi.n	80011b0 <HAL_Delay+0x28>
  {
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000054 	.word	0x20000054

080011d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	@ (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	@ (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	@ (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	@ 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	@ 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff8e 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff47 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff5c 	bl	8001218 <__NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff8e 	bl	8001288 <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5d 	bl	8001234 <__NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffb0 	bl	80012f0 <SysTick_Config>
 8001390:	4603      	mov	r3, r0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013aa:	e14e      	b.n	800164a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	2101      	movs	r1, #1
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	4013      	ands	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 8140 	beq.w	8001644 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d005      	beq.n	80013dc <HAL_GPIO_Init+0x40>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d130      	bne.n	800143e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001412:	2201      	movs	r2, #1
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	f003 0201 	and.w	r2, r3, #1
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b03      	cmp	r3, #3
 8001448:	d017      	beq.n	800147a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d123      	bne.n	80014ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	691a      	ldr	r2, [r3, #16]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	6939      	ldr	r1, [r7, #16]
 80014ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0203 	and.w	r2, r3, #3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 809a 	beq.w	8001644 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001510:	4b55      	ldr	r3, [pc, #340]	@ (8001668 <HAL_GPIO_Init+0x2cc>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a54      	ldr	r2, [pc, #336]	@ (8001668 <HAL_GPIO_Init+0x2cc>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b52      	ldr	r3, [pc, #328]	@ (8001668 <HAL_GPIO_Init+0x2cc>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001528:	4a50      	ldr	r2, [pc, #320]	@ (800166c <HAL_GPIO_Init+0x2d0>)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	220f      	movs	r2, #15
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001552:	d013      	beq.n	800157c <HAL_GPIO_Init+0x1e0>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a46      	ldr	r2, [pc, #280]	@ (8001670 <HAL_GPIO_Init+0x2d4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d00d      	beq.n	8001578 <HAL_GPIO_Init+0x1dc>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a45      	ldr	r2, [pc, #276]	@ (8001674 <HAL_GPIO_Init+0x2d8>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d007      	beq.n	8001574 <HAL_GPIO_Init+0x1d8>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a44      	ldr	r2, [pc, #272]	@ (8001678 <HAL_GPIO_Init+0x2dc>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d101      	bne.n	8001570 <HAL_GPIO_Init+0x1d4>
 800156c:	2303      	movs	r3, #3
 800156e:	e006      	b.n	800157e <HAL_GPIO_Init+0x1e2>
 8001570:	2305      	movs	r3, #5
 8001572:	e004      	b.n	800157e <HAL_GPIO_Init+0x1e2>
 8001574:	2302      	movs	r3, #2
 8001576:	e002      	b.n	800157e <HAL_GPIO_Init+0x1e2>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_GPIO_Init+0x1e2>
 800157c:	2300      	movs	r3, #0
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	f002 0203 	and.w	r2, r2, #3
 8001584:	0092      	lsls	r2, r2, #2
 8001586:	4093      	lsls	r3, r2
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800158e:	4937      	ldr	r1, [pc, #220]	@ (800166c <HAL_GPIO_Init+0x2d0>)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159c:	4b37      	ldr	r3, [pc, #220]	@ (800167c <HAL_GPIO_Init+0x2e0>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015c0:	4a2e      	ldr	r2, [pc, #184]	@ (800167c <HAL_GPIO_Init+0x2e0>)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c6:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <HAL_GPIO_Init+0x2e0>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015ea:	4a24      	ldr	r2, [pc, #144]	@ (800167c <HAL_GPIO_Init+0x2e0>)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015f0:	4b22      	ldr	r3, [pc, #136]	@ (800167c <HAL_GPIO_Init+0x2e0>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001614:	4a19      	ldr	r2, [pc, #100]	@ (800167c <HAL_GPIO_Init+0x2e0>)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800161a:	4b18      	ldr	r3, [pc, #96]	@ (800167c <HAL_GPIO_Init+0x2e0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800163e:	4a0f      	ldr	r2, [pc, #60]	@ (800167c <HAL_GPIO_Init+0x2e0>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	fa22 f303 	lsr.w	r3, r2, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	f47f aea9 	bne.w	80013ac <HAL_GPIO_Init+0x10>
  }
}
 800165a:	bf00      	nop
 800165c:	bf00      	nop
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40021000 	.word	0x40021000
 800166c:	40010000 	.word	0x40010000
 8001670:	48000400 	.word	0x48000400
 8001674:	48000800 	.word	0x48000800
 8001678:	48000c00 	.word	0x48000c00
 800167c:	40010400 	.word	0x40010400

08001680 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	887b      	ldrh	r3, [r7, #2]
 8001692:	4013      	ands	r3, r2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	e001      	b.n	80016a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e08d      	b.n	800180e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d106      	bne.n	800170c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fbb0 	bl	8000e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2224      	movs	r2, #36	@ 0x24
 8001710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001730:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001740:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d107      	bne.n	800175a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	e006      	b.n	8001768 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001766:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d108      	bne.n	8001782 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	e007      	b.n	8001792 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001790:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691a      	ldr	r2, [r3, #16]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69d9      	ldr	r1, [r3, #28]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1a      	ldr	r2, [r3, #32]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0201 	orr.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2220      	movs	r2, #32
 80017fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b20      	cmp	r3, #32
 800182a:	d138      	bne.n	800189e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001836:	2302      	movs	r3, #2
 8001838:	e032      	b.n	80018a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2224      	movs	r2, #36	@ 0x24
 8001846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0201 	bic.w	r2, r2, #1
 8001858:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001868:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6819      	ldr	r1, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0201 	orr.w	r2, r2, #1
 8001888:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2220      	movs	r2, #32
 800188e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800189e:	2302      	movs	r3, #2
  }
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b20      	cmp	r3, #32
 80018c0:	d139      	bne.n	8001936 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e033      	b.n	8001938 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2224      	movs	r2, #36	@ 0x24
 80018dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0201 	bic.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 0201 	orr.w	r2, r2, #1
 8001920:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2220      	movs	r2, #32
 8001926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	e000      	b.n	8001938 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001936:	2302      	movs	r3, #2
  }
}
 8001938:	4618      	mov	r0, r3
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800194a:	af00      	add	r7, sp, #0
 800194c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001950:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001954:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	f001 b823 	b.w	80029b0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 817d 	beq.w	8001c7a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001980:	4bbc      	ldr	r3, [pc, #752]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b04      	cmp	r3, #4
 800198a:	d00c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800198c:	4bb9      	ldr	r3, [pc, #740]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b08      	cmp	r3, #8
 8001996:	d15c      	bne.n	8001a52 <HAL_RCC_OscConfig+0x10e>
 8001998:	4bb6      	ldr	r3, [pc, #728]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019a4:	d155      	bne.n	8001a52 <HAL_RCC_OscConfig+0x10e>
 80019a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019aa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80019b2:	fa93 f3a3 	rbit	r3, r3
 80019b6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019be:	fab3 f383 	clz	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	095b      	lsrs	r3, r3, #5
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d102      	bne.n	80019d8 <HAL_RCC_OscConfig+0x94>
 80019d2:	4ba8      	ldr	r3, [pc, #672]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	e015      	b.n	8001a04 <HAL_RCC_OscConfig+0xc0>
 80019d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019dc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80019ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019f0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80019f4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001a00:	4b9c      	ldr	r3, [pc, #624]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a04:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a08:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001a0c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001a10:	fa92 f2a2 	rbit	r2, r2
 8001a14:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001a18:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001a1c:	fab2 f282 	clz	r2, r2
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	f042 0220 	orr.w	r2, r2, #32
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	f002 021f 	and.w	r2, r2, #31
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 811f 	beq.w	8001c78 <HAL_RCC_OscConfig+0x334>
 8001a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f040 8116 	bne.w	8001c78 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f000 bfaf 	b.w	80029b0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x12e>
 8001a64:	4b83      	ldr	r3, [pc, #524]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a82      	ldr	r2, [pc, #520]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001a6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	e036      	b.n	8001ae0 <HAL_RCC_OscConfig+0x19c>
 8001a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x158>
 8001a82:	4b7c      	ldr	r3, [pc, #496]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a7b      	ldr	r2, [pc, #492]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001a88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b79      	ldr	r3, [pc, #484]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a78      	ldr	r2, [pc, #480]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001a94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e021      	b.n	8001ae0 <HAL_RCC_OscConfig+0x19c>
 8001a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001aac:	d10c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x184>
 8001aae:	4b71      	ldr	r3, [pc, #452]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a70      	ldr	r2, [pc, #448]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001ab4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b6e      	ldr	r3, [pc, #440]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a6d      	ldr	r2, [pc, #436]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e00b      	b.n	8001ae0 <HAL_RCC_OscConfig+0x19c>
 8001ac8:	4b6a      	ldr	r3, [pc, #424]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a69      	ldr	r2, [pc, #420]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b67      	ldr	r3, [pc, #412]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a66      	ldr	r2, [pc, #408]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001ada:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ade:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ae0:	4b64      	ldr	r3, [pc, #400]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae4:	f023 020f 	bic.w	r2, r3, #15
 8001ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	495f      	ldr	r1, [pc, #380]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d059      	beq.n	8001bbe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fb31 	bl	8001170 <HAL_GetTick>
 8001b0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	e00a      	b.n	8001b2a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff fb2c 	bl	8001170 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b64      	cmp	r3, #100	@ 0x64
 8001b22:	d902      	bls.n	8001b2a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	f000 bf43 	b.w	80029b0 <HAL_RCC_OscConfig+0x106c>
 8001b2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b2e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001b3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	095b      	lsrs	r3, r3, #5
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d102      	bne.n	8001b5c <HAL_RCC_OscConfig+0x218>
 8001b56:	4b47      	ldr	r3, [pc, #284]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	e015      	b.n	8001b88 <HAL_RCC_OscConfig+0x244>
 8001b5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b60:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001b70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b74:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001b78:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001b84:	4b3b      	ldr	r3, [pc, #236]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b8c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001b90:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001b94:	fa92 f2a2 	rbit	r2, r2
 8001b98:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001b9c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001ba0:	fab2 f282 	clz	r2, r2
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	f042 0220 	orr.w	r2, r2, #32
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	f002 021f 	and.w	r2, r2, #31
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0ab      	beq.n	8001b14 <HAL_RCC_OscConfig+0x1d0>
 8001bbc:	e05d      	b.n	8001c7a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7ff fad7 	bl	8001170 <HAL_GetTick>
 8001bc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fad2 	bl	8001170 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b64      	cmp	r3, #100	@ 0x64
 8001bd6:	d902      	bls.n	8001bde <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	f000 bee9 	b.w	80029b0 <HAL_RCC_OscConfig+0x106c>
 8001bde:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001be2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001bf2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	095b      	lsrs	r3, r3, #5
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d102      	bne.n	8001c10 <HAL_RCC_OscConfig+0x2cc>
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	e015      	b.n	8001c3c <HAL_RCC_OscConfig+0x2f8>
 8001c10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c14:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001c24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c28:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001c2c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001c38:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c40:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001c44:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001c48:	fa92 f2a2 	rbit	r2, r2
 8001c4c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001c50:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c54:	fab2 f282 	clz	r2, r2
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	f042 0220 	orr.w	r2, r2, #32
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	f002 021f 	and.w	r2, r2, #31
 8001c64:	2101      	movs	r1, #1
 8001c66:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1ab      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x284>
 8001c70:	e003      	b.n	8001c7a <HAL_RCC_OscConfig+0x336>
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 817d 	beq.w	8001f8a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c90:	4ba6      	ldr	r3, [pc, #664]	@ (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00b      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c9c:	4ba3      	ldr	r3, [pc, #652]	@ (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d172      	bne.n	8001d8e <HAL_RCC_OscConfig+0x44a>
 8001ca8:	4ba0      	ldr	r3, [pc, #640]	@ (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d16c      	bne.n	8001d8e <HAL_RCC_OscConfig+0x44a>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001cc6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	095b      	lsrs	r3, r3, #5
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d102      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x3a0>
 8001cde:	4b93      	ldr	r3, [pc, #588]	@ (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	e013      	b.n	8001d0c <HAL_RCC_OscConfig+0x3c8>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001cfc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001d08:	4b88      	ldr	r3, [pc, #544]	@ (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001d12:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001d16:	fa92 f2a2 	rbit	r2, r2
 8001d1a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001d1e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001d22:	fab2 f282 	clz	r2, r2
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	f042 0220 	orr.w	r2, r2, #32
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	f002 021f 	and.w	r2, r2, #31
 8001d32:	2101      	movs	r1, #1
 8001d34:	fa01 f202 	lsl.w	r2, r1, r2
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00a      	beq.n	8001d54 <HAL_RCC_OscConfig+0x410>
 8001d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d002      	beq.n	8001d54 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f000 be2e 	b.w	80029b0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d54:	4b75      	ldr	r3, [pc, #468]	@ (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	21f8      	movs	r1, #248	@ 0xf8
 8001d6a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001d72:	fa91 f1a1 	rbit	r1, r1
 8001d76:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001d7a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001d7e:	fab1 f181 	clz	r1, r1
 8001d82:	b2c9      	uxtb	r1, r1
 8001d84:	408b      	lsls	r3, r1
 8001d86:	4969      	ldr	r1, [pc, #420]	@ (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8c:	e0fd      	b.n	8001f8a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 8088 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x56c>
 8001da0:	2301      	movs	r3, #1
 8001da2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001db2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db6:	fab3 f383 	clz	r3, r3
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001dc0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	2301      	movs	r3, #1
 8001dca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f9d0 	bl	8001170 <HAL_GetTick>
 8001dd0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd6:	f7ff f9cb 	bl	8001170 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d902      	bls.n	8001dec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	f000 bde2 	b.w	80029b0 <HAL_RCC_OscConfig+0x106c>
 8001dec:	2302      	movs	r3, #2
 8001dee:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001dfe:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	095b      	lsrs	r3, r3, #5
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d102      	bne.n	8001e1c <HAL_RCC_OscConfig+0x4d8>
 8001e16:	4b45      	ldr	r3, [pc, #276]	@ (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	e013      	b.n	8001e44 <HAL_RCC_OscConfig+0x500>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001e2e:	2302      	movs	r3, #2
 8001e30:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001e34:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001e40:	4b3a      	ldr	r3, [pc, #232]	@ (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e44:	2202      	movs	r2, #2
 8001e46:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001e4a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001e4e:	fa92 f2a2 	rbit	r2, r2
 8001e52:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001e56:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001e5a:	fab2 f282 	clz	r2, r2
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	f042 0220 	orr.w	r2, r2, #32
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	f002 021f 	and.w	r2, r2, #31
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0af      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e76:	4b2d      	ldr	r3, [pc, #180]	@ (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	21f8      	movs	r1, #248	@ 0xf8
 8001e8c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001e94:	fa91 f1a1 	rbit	r1, r1
 8001e98:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001e9c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001ea0:	fab1 f181 	clz	r1, r1
 8001ea4:	b2c9      	uxtb	r1, r1
 8001ea6:	408b      	lsls	r3, r1
 8001ea8:	4920      	ldr	r1, [pc, #128]	@ (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
 8001eae:	e06c      	b.n	8001f8a <HAL_RCC_OscConfig+0x646>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001ec2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ed0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	2300      	movs	r3, #0
 8001eda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff f948 	bl	8001170 <HAL_GetTick>
 8001ee0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee6:	f7ff f943 	bl	8001170 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d902      	bls.n	8001efc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	f000 bd5a 	b.w	80029b0 <HAL_RCC_OscConfig+0x106c>
 8001efc:	2302      	movs	r3, #2
 8001efe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d104      	bne.n	8001f30 <HAL_RCC_OscConfig+0x5ec>
 8001f26:	4b01      	ldr	r3, [pc, #4]	@ (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	e015      	b.n	8001f58 <HAL_RCC_OscConfig+0x614>
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	2302      	movs	r3, #2
 8001f32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001f42:	2302      	movs	r3, #2
 8001f44:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001f48:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001f54:	4bc8      	ldr	r3, [pc, #800]	@ (8002278 <HAL_RCC_OscConfig+0x934>)
 8001f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f58:	2202      	movs	r2, #2
 8001f5a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001f5e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001f62:	fa92 f2a2 	rbit	r2, r2
 8001f66:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001f6a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001f6e:	fab2 f282 	clz	r2, r2
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	f042 0220 	orr.w	r2, r2, #32
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	f002 021f 	and.w	r2, r2, #31
 8001f7e:	2101      	movs	r1, #1
 8001f80:	fa01 f202 	lsl.w	r2, r1, r2
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1ad      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8110 	beq.w	80021c0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d079      	beq.n	80020a4 <HAL_RCC_OscConfig+0x760>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4bab      	ldr	r3, [pc, #684]	@ (800227c <HAL_RCC_OscConfig+0x938>)
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fda:	f7ff f8c9 	bl	8001170 <HAL_GetTick>
 8001fde:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe4:	f7ff f8c4 	bl	8001170 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d902      	bls.n	8001ffa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	f000 bcdb 	b.w	80029b0 <HAL_RCC_OscConfig+0x106c>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800200c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002010:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002014:	2202      	movs	r2, #2
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	fa93 f2a3 	rbit	r2, r3
 8002026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002038:	2202      	movs	r2, #2
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	fa93 f2a3 	rbit	r2, r3
 800204a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002052:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002054:	4b88      	ldr	r3, [pc, #544]	@ (8002278 <HAL_RCC_OscConfig+0x934>)
 8002056:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002060:	2102      	movs	r1, #2
 8002062:	6019      	str	r1, [r3, #0]
 8002064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002068:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	fa93 f1a3 	rbit	r1, r3
 8002072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002076:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800207a:	6019      	str	r1, [r3, #0]
  return result;
 800207c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002080:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	2101      	movs	r1, #1
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0a0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x6a0>
 80020a2:	e08d      	b.n	80021c0 <HAL_RCC_OscConfig+0x87c>
 80020a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	fa93 f2a3 	rbit	r2, r3
 80020be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80020c6:	601a      	str	r2, [r3, #0]
  return result;
 80020c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020cc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80020d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	4b68      	ldr	r3, [pc, #416]	@ (800227c <HAL_RCC_OscConfig+0x938>)
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	461a      	mov	r2, r3
 80020e2:	2300      	movs	r3, #0
 80020e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e6:	f7ff f843 	bl	8001170 <HAL_GetTick>
 80020ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f0:	f7ff f83e 	bl	8001170 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d902      	bls.n	8002106 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	f000 bc55 	b.w	80029b0 <HAL_RCC_OscConfig+0x106c>
 8002106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800210e:	2202      	movs	r2, #2
 8002110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002116:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	fa93 f2a3 	rbit	r2, r3
 8002120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002124:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002132:	2202      	movs	r2, #2
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	fa93 f2a3 	rbit	r2, r3
 8002144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002148:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002152:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002156:	2202      	movs	r2, #2
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800215e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	fa93 f2a3 	rbit	r2, r3
 8002168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002170:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002172:	4b41      	ldr	r3, [pc, #260]	@ (8002278 <HAL_RCC_OscConfig+0x934>)
 8002174:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800217e:	2102      	movs	r1, #2
 8002180:	6019      	str	r1, [r3, #0]
 8002182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002186:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	fa93 f1a3 	rbit	r1, r3
 8002190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002194:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002198:	6019      	str	r1, [r3, #0]
  return result;
 800219a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	2101      	movs	r1, #1
 80021b6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d197      	bne.n	80020f0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 81a1 	beq.w	8002518 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021dc:	4b26      	ldr	r3, [pc, #152]	@ (8002278 <HAL_RCC_OscConfig+0x934>)
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d116      	bne.n	8002216 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e8:	4b23      	ldr	r3, [pc, #140]	@ (8002278 <HAL_RCC_OscConfig+0x934>)
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	4a22      	ldr	r2, [pc, #136]	@ (8002278 <HAL_RCC_OscConfig+0x934>)
 80021ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f2:	61d3      	str	r3, [r2, #28]
 80021f4:	4b20      	ldr	r3, [pc, #128]	@ (8002278 <HAL_RCC_OscConfig+0x934>)
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80021fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002200:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800220e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002210:	2301      	movs	r3, #1
 8002212:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002216:	4b1a      	ldr	r3, [pc, #104]	@ (8002280 <HAL_RCC_OscConfig+0x93c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d11a      	bne.n	8002258 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002222:	4b17      	ldr	r3, [pc, #92]	@ (8002280 <HAL_RCC_OscConfig+0x93c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a16      	ldr	r2, [pc, #88]	@ (8002280 <HAL_RCC_OscConfig+0x93c>)
 8002228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222e:	f7fe ff9f 	bl	8001170 <HAL_GetTick>
 8002232:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002236:	e009      	b.n	800224c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002238:	f7fe ff9a 	bl	8001170 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b64      	cmp	r3, #100	@ 0x64
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e3b1      	b.n	80029b0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224c:	4b0c      	ldr	r3, [pc, #48]	@ (8002280 <HAL_RCC_OscConfig+0x93c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ef      	beq.n	8002238 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d10d      	bne.n	8002284 <HAL_RCC_OscConfig+0x940>
 8002268:	4b03      	ldr	r3, [pc, #12]	@ (8002278 <HAL_RCC_OscConfig+0x934>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a02      	ldr	r2, [pc, #8]	@ (8002278 <HAL_RCC_OscConfig+0x934>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	e03c      	b.n	80022f0 <HAL_RCC_OscConfig+0x9ac>
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	10908120 	.word	0x10908120
 8002280:	40007000 	.word	0x40007000
 8002284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002288:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10c      	bne.n	80022ae <HAL_RCC_OscConfig+0x96a>
 8002294:	4bc1      	ldr	r3, [pc, #772]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	4ac0      	ldr	r2, [pc, #768]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 800229a:	f023 0301 	bic.w	r3, r3, #1
 800229e:	6213      	str	r3, [r2, #32]
 80022a0:	4bbe      	ldr	r3, [pc, #760]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4abd      	ldr	r2, [pc, #756]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 80022a6:	f023 0304 	bic.w	r3, r3, #4
 80022aa:	6213      	str	r3, [r2, #32]
 80022ac:	e020      	b.n	80022f0 <HAL_RCC_OscConfig+0x9ac>
 80022ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b05      	cmp	r3, #5
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x994>
 80022be:	4bb7      	ldr	r3, [pc, #732]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4ab6      	ldr	r2, [pc, #728]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6213      	str	r3, [r2, #32]
 80022ca:	4bb4      	ldr	r3, [pc, #720]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4ab3      	ldr	r2, [pc, #716]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6213      	str	r3, [r2, #32]
 80022d6:	e00b      	b.n	80022f0 <HAL_RCC_OscConfig+0x9ac>
 80022d8:	4bb0      	ldr	r3, [pc, #704]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4aaf      	ldr	r2, [pc, #700]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	6213      	str	r3, [r2, #32]
 80022e4:	4bad      	ldr	r3, [pc, #692]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4aac      	ldr	r2, [pc, #688]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 80022ea:	f023 0304 	bic.w	r3, r3, #4
 80022ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 8081 	beq.w	8002404 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002302:	f7fe ff35 	bl	8001170 <HAL_GetTick>
 8002306:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800230c:	f7fe ff30 	bl	8001170 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e345      	b.n	80029b0 <HAL_RCC_OscConfig+0x106c>
 8002324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002328:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800232c:	2202      	movs	r2, #2
 800232e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002334:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	fa93 f2a3 	rbit	r2, r3
 800233e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002342:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002350:	2202      	movs	r2, #2
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002358:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	fa93 f2a3 	rbit	r2, r3
 8002362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002366:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800236a:	601a      	str	r2, [r3, #0]
  return result;
 800236c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002370:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002374:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d102      	bne.n	8002390 <HAL_RCC_OscConfig+0xa4c>
 800238a:	4b84      	ldr	r3, [pc, #528]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	e013      	b.n	80023b8 <HAL_RCC_OscConfig+0xa74>
 8002390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002394:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002398:	2202      	movs	r2, #2
 800239a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	fa93 f2a3 	rbit	r2, r3
 80023aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	4b79      	ldr	r3, [pc, #484]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80023c0:	2102      	movs	r1, #2
 80023c2:	6011      	str	r1, [r2, #0]
 80023c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023c8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	fa92 f1a2 	rbit	r1, r2
 80023d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023d6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80023da:	6011      	str	r1, [r2, #0]
  return result;
 80023dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023e0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	fab2 f282 	clz	r2, r2
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	f002 021f 	and.w	r2, r2, #31
 80023f6:	2101      	movs	r1, #1
 80023f8:	fa01 f202 	lsl.w	r2, r1, r2
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d084      	beq.n	800230c <HAL_RCC_OscConfig+0x9c8>
 8002402:	e07f      	b.n	8002504 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002404:	f7fe feb4 	bl	8001170 <HAL_GetTick>
 8002408:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240c:	e00b      	b.n	8002426 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7fe feaf 	bl	8001170 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e2c4      	b.n	80029b0 <HAL_RCC_OscConfig+0x106c>
 8002426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800242e:	2202      	movs	r2, #2
 8002430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002436:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	fa93 f2a3 	rbit	r2, r3
 8002440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002444:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002452:	2202      	movs	r2, #2
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	fa93 f2a3 	rbit	r2, r3
 8002464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002468:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800246c:	601a      	str	r2, [r3, #0]
  return result;
 800246e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002472:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002476:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f043 0302 	orr.w	r3, r3, #2
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d102      	bne.n	8002492 <HAL_RCC_OscConfig+0xb4e>
 800248c:	4b43      	ldr	r3, [pc, #268]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	e013      	b.n	80024ba <HAL_RCC_OscConfig+0xb76>
 8002492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002496:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800249a:	2202      	movs	r2, #2
 800249c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	fa93 f2a3 	rbit	r2, r3
 80024ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	4b39      	ldr	r3, [pc, #228]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 80024b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024be:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80024c2:	2102      	movs	r1, #2
 80024c4:	6011      	str	r1, [r2, #0]
 80024c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024ca:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	fa92 f1a2 	rbit	r1, r2
 80024d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024d8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80024dc:	6011      	str	r1, [r2, #0]
  return result;
 80024de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024e2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	fab2 f282 	clz	r2, r2
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	f002 021f 	and.w	r2, r2, #31
 80024f8:	2101      	movs	r1, #1
 80024fa:	fa01 f202 	lsl.w	r2, r1, r2
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d184      	bne.n	800240e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002504:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250c:	4b23      	ldr	r3, [pc, #140]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	4a22      	ldr	r2, [pc, #136]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 8002512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002516:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 8242 	beq.w	80029ae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800252a:	4b1c      	ldr	r3, [pc, #112]	@ (800259c <HAL_RCC_OscConfig+0xc58>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b08      	cmp	r3, #8
 8002534:	f000 8213 	beq.w	800295e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	2b02      	cmp	r3, #2
 8002546:	f040 8162 	bne.w	800280e <HAL_RCC_OscConfig+0xeca>
 800254a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002552:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	fa93 f2a3 	rbit	r2, r3
 8002566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800256e:	601a      	str	r2, [r3, #0]
  return result;
 8002570:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002574:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002578:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002584:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	461a      	mov	r2, r3
 800258c:	2300      	movs	r3, #0
 800258e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe fdee 	bl	8001170 <HAL_GetTick>
 8002594:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002598:	e00c      	b.n	80025b4 <HAL_RCC_OscConfig+0xc70>
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe fde6 	bl	8001170 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e1fd      	b.n	80029b0 <HAL_RCC_OscConfig+0x106c>
 80025b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80025bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	fa93 f2a3 	rbit	r2, r3
 80025d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025d8:	601a      	str	r2, [r3, #0]
  return result;
 80025da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025de:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d102      	bne.n	80025fe <HAL_RCC_OscConfig+0xcba>
 80025f8:	4bb0      	ldr	r3, [pc, #704]	@ (80028bc <HAL_RCC_OscConfig+0xf78>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	e027      	b.n	800264e <HAL_RCC_OscConfig+0xd0a>
 80025fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002602:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002606:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800260a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002610:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	fa93 f2a3 	rbit	r2, r3
 800261a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002628:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800262c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002636:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	fa93 f2a3 	rbit	r2, r3
 8002640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002644:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	4b9c      	ldr	r3, [pc, #624]	@ (80028bc <HAL_RCC_OscConfig+0xf78>)
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002652:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002656:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800265a:	6011      	str	r1, [r2, #0]
 800265c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002660:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	fa92 f1a2 	rbit	r1, r2
 800266a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800266e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002672:	6011      	str	r1, [r2, #0]
  return result;
 8002674:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002678:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	fab2 f282 	clz	r2, r2
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	f042 0220 	orr.w	r2, r2, #32
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	f002 021f 	and.w	r2, r2, #31
 800268e:	2101      	movs	r1, #1
 8002690:	fa01 f202 	lsl.w	r2, r1, r2
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d182      	bne.n	80025a0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800269a:	4b88      	ldr	r3, [pc, #544]	@ (80028bc <HAL_RCC_OscConfig+0xf78>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80026ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	430b      	orrs	r3, r1
 80026bc:	497f      	ldr	r1, [pc, #508]	@ (80028bc <HAL_RCC_OscConfig+0xf78>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
 80026c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80026ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	fa93 f2a3 	rbit	r2, r3
 80026de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80026e6:	601a      	str	r2, [r3, #0]
  return result;
 80026e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ec:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80026f0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	461a      	mov	r2, r3
 8002704:	2301      	movs	r3, #1
 8002706:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe fd32 	bl	8001170 <HAL_GetTick>
 800270c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002710:	e009      	b.n	8002726 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002712:	f7fe fd2d 	bl	8001170 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e144      	b.n	80029b0 <HAL_RCC_OscConfig+0x106c>
 8002726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800272e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002738:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	fa93 f2a3 	rbit	r2, r3
 8002742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002746:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800274a:	601a      	str	r2, [r3, #0]
  return result;
 800274c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002750:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002754:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d102      	bne.n	8002770 <HAL_RCC_OscConfig+0xe2c>
 800276a:	4b54      	ldr	r3, [pc, #336]	@ (80028bc <HAL_RCC_OscConfig+0xf78>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	e027      	b.n	80027c0 <HAL_RCC_OscConfig+0xe7c>
 8002770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002774:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002778:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800277c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002782:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	fa93 f2a3 	rbit	r2, r3
 800278c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002790:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800279e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	fa93 f2a3 	rbit	r2, r3
 80027b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	4b3f      	ldr	r3, [pc, #252]	@ (80028bc <HAL_RCC_OscConfig+0xf78>)
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027c4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80027c8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027cc:	6011      	str	r1, [r2, #0]
 80027ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027d2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	fa92 f1a2 	rbit	r1, r2
 80027dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027e0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80027e4:	6011      	str	r1, [r2, #0]
  return result;
 80027e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027ea:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	fab2 f282 	clz	r2, r2
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	f042 0220 	orr.w	r2, r2, #32
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	f002 021f 	and.w	r2, r2, #31
 8002800:	2101      	movs	r1, #1
 8002802:	fa01 f202 	lsl.w	r2, r1, r2
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d082      	beq.n	8002712 <HAL_RCC_OscConfig+0xdce>
 800280c:	e0cf      	b.n	80029ae <HAL_RCC_OscConfig+0x106a>
 800280e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002812:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002816:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800281a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002820:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	fa93 f2a3 	rbit	r2, r3
 800282a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002832:	601a      	str	r2, [r3, #0]
  return result;
 8002834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002838:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800283c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002848:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	461a      	mov	r2, r3
 8002850:	2300      	movs	r3, #0
 8002852:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe fc8c 	bl	8001170 <HAL_GetTick>
 8002858:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285c:	e009      	b.n	8002872 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe fc87 	bl	8001170 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e09e      	b.n	80029b0 <HAL_RCC_OscConfig+0x106c>
 8002872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002876:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800287a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800287e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002884:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	fa93 f2a3 	rbit	r2, r3
 800288e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002892:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002896:	601a      	str	r2, [r3, #0]
  return result;
 8002898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80028a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d104      	bne.n	80028c0 <HAL_RCC_OscConfig+0xf7c>
 80028b6:	4b01      	ldr	r3, [pc, #4]	@ (80028bc <HAL_RCC_OscConfig+0xf78>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	e029      	b.n	8002910 <HAL_RCC_OscConfig+0xfcc>
 80028bc:	40021000 	.word	0x40021000
 80028c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80028c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	fa93 f2a3 	rbit	r2, r3
 80028dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ea:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80028ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	fa93 f2a3 	rbit	r2, r3
 8002902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002906:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	4b2b      	ldr	r3, [pc, #172]	@ (80029bc <HAL_RCC_OscConfig+0x1078>)
 800290e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002910:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002914:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002918:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800291c:	6011      	str	r1, [r2, #0]
 800291e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002922:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	fa92 f1a2 	rbit	r1, r2
 800292c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002930:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002934:	6011      	str	r1, [r2, #0]
  return result;
 8002936:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800293a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	fab2 f282 	clz	r2, r2
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	f042 0220 	orr.w	r2, r2, #32
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	f002 021f 	and.w	r2, r2, #31
 8002950:	2101      	movs	r1, #1
 8002952:	fa01 f202 	lsl.w	r2, r1, r2
 8002956:	4013      	ands	r3, r2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d180      	bne.n	800285e <HAL_RCC_OscConfig+0xf1a>
 800295c:	e027      	b.n	80029ae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800295e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002962:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e01e      	b.n	80029b0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002972:	4b12      	ldr	r3, [pc, #72]	@ (80029bc <HAL_RCC_OscConfig+0x1078>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800297a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800297e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002986:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	429a      	cmp	r2, r3
 8002990:	d10b      	bne.n	80029aa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002992:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002996:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800299a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000

080029c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b09e      	sub	sp, #120	@ 0x78
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e162      	b.n	8002c9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d8:	4b90      	ldr	r3, [pc, #576]	@ (8002c1c <HAL_RCC_ClockConfig+0x25c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d910      	bls.n	8002a08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b8d      	ldr	r3, [pc, #564]	@ (8002c1c <HAL_RCC_ClockConfig+0x25c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 0207 	bic.w	r2, r3, #7
 80029ee:	498b      	ldr	r1, [pc, #556]	@ (8002c1c <HAL_RCC_ClockConfig+0x25c>)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b89      	ldr	r3, [pc, #548]	@ (8002c1c <HAL_RCC_ClockConfig+0x25c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e14a      	b.n	8002c9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a14:	4b82      	ldr	r3, [pc, #520]	@ (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	497f      	ldr	r1, [pc, #508]	@ (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 80dc 	beq.w	8002bec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d13c      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xf6>
 8002a3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a40:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002a4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d102      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xa6>
 8002a60:	4b6f      	ldr	r3, [pc, #444]	@ (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	e00f      	b.n	8002a86 <HAL_RCC_ClockConfig+0xc6>
 8002a66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a6a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a78:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a82:	4b67      	ldr	r3, [pc, #412]	@ (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a8a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a8e:	fa92 f2a2 	rbit	r2, r2
 8002a92:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002a94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a96:	fab2 f282 	clz	r2, r2
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	f042 0220 	orr.w	r2, r2, #32
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f002 021f 	and.w	r2, r2, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d17b      	bne.n	8002baa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0f3      	b.n	8002c9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d13c      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x178>
 8002abe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ac2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002acc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d102      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x128>
 8002ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	e00f      	b.n	8002b08 <HAL_RCC_ClockConfig+0x148>
 8002ae8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002af6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002afa:	643b      	str	r3, [r7, #64]	@ 0x40
 8002afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b04:	4b46      	ldr	r3, [pc, #280]	@ (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b0c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002b0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b10:	fa92 f2a2 	rbit	r2, r2
 8002b14:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002b16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b18:	fab2 f282 	clz	r2, r2
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	f042 0220 	orr.w	r2, r2, #32
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	f002 021f 	and.w	r2, r2, #31
 8002b28:	2101      	movs	r1, #1
 8002b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d13a      	bne.n	8002baa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0b2      	b.n	8002c9e <HAL_RCC_ClockConfig+0x2de>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d102      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x1a0>
 8002b5a:	4b31      	ldr	r3, [pc, #196]	@ (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	e00d      	b.n	8002b7c <HAL_RCC_ClockConfig+0x1bc>
 8002b60:	2302      	movs	r3, #2
 8002b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	623b      	str	r3, [r7, #32]
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	4b29      	ldr	r3, [pc, #164]	@ (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	61ba      	str	r2, [r7, #24]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	fa92 f2a2 	rbit	r2, r2
 8002b86:	617a      	str	r2, [r7, #20]
  return result;
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	fab2 f282 	clz	r2, r2
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	f042 0220 	orr.w	r2, r2, #32
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	f002 021f 	and.w	r2, r2, #31
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e079      	b.n	8002c9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002baa:	4b1d      	ldr	r3, [pc, #116]	@ (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f023 0203 	bic.w	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	491a      	ldr	r1, [pc, #104]	@ (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe fad8 	bl	8001170 <HAL_GetTick>
 8002bc0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc4:	f7fe fad4 	bl	8001170 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e061      	b.n	8002c9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	4b11      	ldr	r3, [pc, #68]	@ (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 020c 	and.w	r2, r3, #12
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1eb      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bec:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <HAL_RCC_ClockConfig+0x25c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d214      	bcs.n	8002c24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b08      	ldr	r3, [pc, #32]	@ (8002c1c <HAL_RCC_ClockConfig+0x25c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 0207 	bic.w	r2, r3, #7
 8002c02:	4906      	ldr	r1, [pc, #24]	@ (8002c1c <HAL_RCC_ClockConfig+0x25c>)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0a:	4b04      	ldr	r3, [pc, #16]	@ (8002c1c <HAL_RCC_ClockConfig+0x25c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e040      	b.n	8002c9e <HAL_RCC_ClockConfig+0x2de>
 8002c1c:	40022000 	.word	0x40022000
 8002c20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c30:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	491a      	ldr	r1, [pc, #104]	@ (8002ca8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ca8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4912      	ldr	r1, [pc, #72]	@ (8002ca8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c62:	f000 f829 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8002c66:	4601      	mov	r1, r0
 8002c68:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c70:	22f0      	movs	r2, #240	@ 0xf0
 8002c72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	fa92 f2a2 	rbit	r2, r2
 8002c7a:	60fa      	str	r2, [r7, #12]
  return result;
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	fab2 f282 	clz	r2, r2
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	40d3      	lsrs	r3, r2
 8002c86:	4a09      	ldr	r2, [pc, #36]	@ (8002cac <HAL_RCC_ClockConfig+0x2ec>)
 8002c88:	5cd3      	ldrb	r3, [r2, r3]
 8002c8a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c8e:	4a08      	ldr	r2, [pc, #32]	@ (8002cb0 <HAL_RCC_ClockConfig+0x2f0>)
 8002c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c92:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <HAL_RCC_ClockConfig+0x2f4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe fa26 	bl	80010e8 <HAL_InitTick>
  
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3778      	adds	r7, #120	@ 0x78
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	08004044 	.word	0x08004044
 8002cb0:	2000004c 	.word	0x2000004c
 8002cb4:	20000050 	.word	0x20000050

08002cb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d002      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0x36>
 8002ce6:	e026      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ce8:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cea:	613b      	str	r3, [r7, #16]
      break;
 8002cec:	e026      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	0c9b      	lsrs	r3, r3, #18
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	4a17      	ldr	r2, [pc, #92]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cf8:	5cd3      	ldrb	r3, [r2, r3]
 8002cfa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002cfc:	4b13      	ldr	r3, [pc, #76]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	4a14      	ldr	r2, [pc, #80]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d06:	5cd3      	ldrb	r3, [r2, r3]
 8002d08:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d14:	4a0e      	ldr	r2, [pc, #56]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	fb02 f303 	mul.w	r3, r2, r3
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	e004      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a0c      	ldr	r2, [pc, #48]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	613b      	str	r3, [r7, #16]
      break;
 8002d34:	e002      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d36:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d38:	613b      	str	r3, [r7, #16]
      break;
 8002d3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d3c:	693b      	ldr	r3, [r7, #16]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	007a1200 	.word	0x007a1200
 8002d54:	0800405c 	.word	0x0800405c
 8002d58:	0800406c 	.word	0x0800406c
 8002d5c:	003d0900 	.word	0x003d0900

08002d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d64:	4b03      	ldr	r3, [pc, #12]	@ (8002d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d66:	681b      	ldr	r3, [r3, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	2000004c 	.word	0x2000004c

08002d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d7e:	f7ff ffef 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002d82:	4601      	mov	r1, r0
 8002d84:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d8c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	fa92 f2a2 	rbit	r2, r2
 8002d98:	603a      	str	r2, [r7, #0]
  return result;
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	fab2 f282 	clz	r2, r2
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	40d3      	lsrs	r3, r2
 8002da4:	4a04      	ldr	r2, [pc, #16]	@ (8002db8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002da6:	5cd3      	ldrb	r3, [r2, r3]
 8002da8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40021000 	.word	0x40021000
 8002db8:	08004054 	.word	0x08004054

08002dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002dc2:	f7ff ffcd 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002dc6:	4601      	mov	r1, r0
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002df8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002dd0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002dd4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	fa92 f2a2 	rbit	r2, r2
 8002ddc:	603a      	str	r2, [r7, #0]
  return result;
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	fab2 f282 	clz	r2, r2
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	40d3      	lsrs	r3, r2
 8002de8:	4a04      	ldr	r2, [pc, #16]	@ (8002dfc <HAL_RCC_GetPCLK2Freq+0x40>)
 8002dea:	5cd3      	ldrb	r3, [r2, r3]
 8002dec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	08004054 	.word	0x08004054

08002e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b092      	sub	sp, #72	@ 0x48
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002e10:	2300      	movs	r3, #0
 8002e12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80cd 	beq.w	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e24:	4b86      	ldr	r3, [pc, #536]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10e      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e30:	4b83      	ldr	r3, [pc, #524]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	4a82      	ldr	r2, [pc, #520]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e3a:	61d3      	str	r3, [r2, #28]
 8002e3c:	4b80      	ldr	r3, [pc, #512]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4e:	4b7d      	ldr	r3, [pc, #500]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d118      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e5a:	4b7a      	ldr	r3, [pc, #488]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a79      	ldr	r2, [pc, #484]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e66:	f7fe f983 	bl	8001170 <HAL_GetTick>
 8002e6a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6c:	e008      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6e:	f7fe f97f 	bl	8001170 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b64      	cmp	r3, #100	@ 0x64
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e0db      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e80:	4b70      	ldr	r3, [pc, #448]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e8c:	4b6c      	ldr	r3, [pc, #432]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d07d      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ea4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d076      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002eaa:	4b65      	ldr	r3, [pc, #404]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002eb8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4b5e      	ldr	r3, [pc, #376]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002edc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4b55      	ldr	r3, [pc, #340]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	2300      	movs	r3, #0
 8002efa:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002efc:	4a50      	ldr	r2, [pc, #320]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f00:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d045      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe f930 	bl	8001170 <HAL_GetTick>
 8002f10:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fe f92c 	bl	8001170 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e086      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f36:	2302      	movs	r3, #2
 8002f38:	623b      	str	r3, [r7, #32]
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	fa93 f3a3 	rbit	r3, r3
 8002f40:	61fb      	str	r3, [r7, #28]
  return result;
 8002f42:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f043 0302 	orr.w	r3, r3, #2
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d102      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002f58:	4b39      	ldr	r3, [pc, #228]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	e007      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	4b35      	ldr	r3, [pc, #212]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6e:	2202      	movs	r2, #2
 8002f70:	613a      	str	r2, [r7, #16]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	fa92 f2a2 	rbit	r2, r2
 8002f78:	60fa      	str	r2, [r7, #12]
  return result;
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	fab2 f282 	clz	r2, r2
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	f002 021f 	and.w	r2, r2, #31
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0bd      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f98:	4b29      	ldr	r3, [pc, #164]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	4926      	ldr	r1, [pc, #152]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002faa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d105      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb2:	4b23      	ldr	r3, [pc, #140]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	4a22      	ldr	r2, [pc, #136]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fbc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fca:	4b1d      	ldr	r3, [pc, #116]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	f023 0203 	bic.w	r2, r3, #3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	491a      	ldr	r1, [pc, #104]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fe8:	4b15      	ldr	r3, [pc, #84]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fec:	f023 0210 	bic.w	r2, r3, #16
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4912      	ldr	r1, [pc, #72]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003006:	4b0e      	ldr	r3, [pc, #56]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	490b      	ldr	r1, [pc, #44]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003014:	4313      	orrs	r3, r2
 8003016:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003024:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003028:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	4903      	ldr	r1, [pc, #12]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003032:	4313      	orrs	r3, r2
 8003034:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3748      	adds	r7, #72	@ 0x48
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021000 	.word	0x40021000
 8003044:	40007000 	.word	0x40007000
 8003048:	10908100 	.word	0x10908100

0800304c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e049      	b.n	80030f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fd ff3e 	bl	8000ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f000 f97a 	bl	8003384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	d001      	beq.n	8003114 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e038      	b.n	8003186 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1c      	ldr	r2, [pc, #112]	@ (8003194 <HAL_TIM_Base_Start+0x98>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00e      	beq.n	8003144 <HAL_TIM_Base_Start+0x48>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312e:	d009      	beq.n	8003144 <HAL_TIM_Base_Start+0x48>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a18      	ldr	r2, [pc, #96]	@ (8003198 <HAL_TIM_Base_Start+0x9c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <HAL_TIM_Base_Start+0x48>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a17      	ldr	r2, [pc, #92]	@ (800319c <HAL_TIM_Base_Start+0xa0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d115      	bne.n	8003170 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	4b15      	ldr	r3, [pc, #84]	@ (80031a0 <HAL_TIM_Base_Start+0xa4>)
 800314c:	4013      	ands	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b06      	cmp	r3, #6
 8003154:	d015      	beq.n	8003182 <HAL_TIM_Base_Start+0x86>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800315c:	d011      	beq.n	8003182 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316e:	e008      	b.n	8003182 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	e000      	b.n	8003184 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003182:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40012c00 	.word	0x40012c00
 8003198:	40000400 	.word	0x40000400
 800319c:	40014000 	.word	0x40014000
 80031a0:	00010007 	.word	0x00010007

080031a4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6a1a      	ldr	r2, [r3, #32]
 80031b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10f      	bne.n	80031dc <HAL_TIM_Base_Stop+0x38>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6a1a      	ldr	r2, [r3, #32]
 80031c2:	f240 4344 	movw	r3, #1092	@ 0x444
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d107      	bne.n	80031dc <HAL_TIM_Base_Stop+0x38>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0201 	bic.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_TIM_ConfigClockSource+0x1c>
 800320a:	2302      	movs	r3, #2
 800320c:	e0b6      	b.n	800337c <HAL_TIM_ConfigClockSource+0x18a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2202      	movs	r2, #2
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800322c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003230:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003238:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800324a:	d03e      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0xd8>
 800324c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003250:	f200 8087 	bhi.w	8003362 <HAL_TIM_ConfigClockSource+0x170>
 8003254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003258:	f000 8086 	beq.w	8003368 <HAL_TIM_ConfigClockSource+0x176>
 800325c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003260:	d87f      	bhi.n	8003362 <HAL_TIM_ConfigClockSource+0x170>
 8003262:	2b70      	cmp	r3, #112	@ 0x70
 8003264:	d01a      	beq.n	800329c <HAL_TIM_ConfigClockSource+0xaa>
 8003266:	2b70      	cmp	r3, #112	@ 0x70
 8003268:	d87b      	bhi.n	8003362 <HAL_TIM_ConfigClockSource+0x170>
 800326a:	2b60      	cmp	r3, #96	@ 0x60
 800326c:	d050      	beq.n	8003310 <HAL_TIM_ConfigClockSource+0x11e>
 800326e:	2b60      	cmp	r3, #96	@ 0x60
 8003270:	d877      	bhi.n	8003362 <HAL_TIM_ConfigClockSource+0x170>
 8003272:	2b50      	cmp	r3, #80	@ 0x50
 8003274:	d03c      	beq.n	80032f0 <HAL_TIM_ConfigClockSource+0xfe>
 8003276:	2b50      	cmp	r3, #80	@ 0x50
 8003278:	d873      	bhi.n	8003362 <HAL_TIM_ConfigClockSource+0x170>
 800327a:	2b40      	cmp	r3, #64	@ 0x40
 800327c:	d058      	beq.n	8003330 <HAL_TIM_ConfigClockSource+0x13e>
 800327e:	2b40      	cmp	r3, #64	@ 0x40
 8003280:	d86f      	bhi.n	8003362 <HAL_TIM_ConfigClockSource+0x170>
 8003282:	2b30      	cmp	r3, #48	@ 0x30
 8003284:	d064      	beq.n	8003350 <HAL_TIM_ConfigClockSource+0x15e>
 8003286:	2b30      	cmp	r3, #48	@ 0x30
 8003288:	d86b      	bhi.n	8003362 <HAL_TIM_ConfigClockSource+0x170>
 800328a:	2b20      	cmp	r3, #32
 800328c:	d060      	beq.n	8003350 <HAL_TIM_ConfigClockSource+0x15e>
 800328e:	2b20      	cmp	r3, #32
 8003290:	d867      	bhi.n	8003362 <HAL_TIM_ConfigClockSource+0x170>
 8003292:	2b00      	cmp	r3, #0
 8003294:	d05c      	beq.n	8003350 <HAL_TIM_ConfigClockSource+0x15e>
 8003296:	2b10      	cmp	r3, #16
 8003298:	d05a      	beq.n	8003350 <HAL_TIM_ConfigClockSource+0x15e>
 800329a:	e062      	b.n	8003362 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032ac:	f000 f968 	bl	8003580 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	609a      	str	r2, [r3, #8]
      break;
 80032c8:	e04f      	b.n	800336a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032da:	f000 f951 	bl	8003580 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032ec:	609a      	str	r2, [r3, #8]
      break;
 80032ee:	e03c      	b.n	800336a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fc:	461a      	mov	r2, r3
 80032fe:	f000 f8c5 	bl	800348c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2150      	movs	r1, #80	@ 0x50
 8003308:	4618      	mov	r0, r3
 800330a:	f000 f91e 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 800330e:	e02c      	b.n	800336a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800331c:	461a      	mov	r2, r3
 800331e:	f000 f8e4 	bl	80034ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2160      	movs	r1, #96	@ 0x60
 8003328:	4618      	mov	r0, r3
 800332a:	f000 f90e 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 800332e:	e01c      	b.n	800336a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800333c:	461a      	mov	r2, r3
 800333e:	f000 f8a5 	bl	800348c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2140      	movs	r1, #64	@ 0x40
 8003348:	4618      	mov	r0, r3
 800334a:	f000 f8fe 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 800334e:	e00c      	b.n	800336a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4619      	mov	r1, r3
 800335a:	4610      	mov	r0, r2
 800335c:	f000 f8f5 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 8003360:	e003      	b.n	800336a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
      break;
 8003366:	e000      	b.n	800336a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003368:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800337a:	7bfb      	ldrb	r3, [r7, #15]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a38      	ldr	r2, [pc, #224]	@ (8003478 <TIM_Base_SetConfig+0xf4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d007      	beq.n	80033ac <TIM_Base_SetConfig+0x28>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a2:	d003      	beq.n	80033ac <TIM_Base_SetConfig+0x28>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a35      	ldr	r2, [pc, #212]	@ (800347c <TIM_Base_SetConfig+0xf8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d108      	bne.n	80033be <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003478 <TIM_Base_SetConfig+0xf4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d013      	beq.n	80033ee <TIM_Base_SetConfig+0x6a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033cc:	d00f      	beq.n	80033ee <TIM_Base_SetConfig+0x6a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a2a      	ldr	r2, [pc, #168]	@ (800347c <TIM_Base_SetConfig+0xf8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00b      	beq.n	80033ee <TIM_Base_SetConfig+0x6a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a29      	ldr	r2, [pc, #164]	@ (8003480 <TIM_Base_SetConfig+0xfc>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d007      	beq.n	80033ee <TIM_Base_SetConfig+0x6a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a28      	ldr	r2, [pc, #160]	@ (8003484 <TIM_Base_SetConfig+0x100>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d003      	beq.n	80033ee <TIM_Base_SetConfig+0x6a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a27      	ldr	r2, [pc, #156]	@ (8003488 <TIM_Base_SetConfig+0x104>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d108      	bne.n	8003400 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a14      	ldr	r2, [pc, #80]	@ (8003478 <TIM_Base_SetConfig+0xf4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00b      	beq.n	8003444 <TIM_Base_SetConfig+0xc0>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a14      	ldr	r2, [pc, #80]	@ (8003480 <TIM_Base_SetConfig+0xfc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d007      	beq.n	8003444 <TIM_Base_SetConfig+0xc0>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a13      	ldr	r2, [pc, #76]	@ (8003484 <TIM_Base_SetConfig+0x100>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d003      	beq.n	8003444 <TIM_Base_SetConfig+0xc0>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a12      	ldr	r2, [pc, #72]	@ (8003488 <TIM_Base_SetConfig+0x104>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d103      	bne.n	800344c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b01      	cmp	r3, #1
 800345c:	d105      	bne.n	800346a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f023 0201 	bic.w	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	611a      	str	r2, [r3, #16]
  }
}
 800346a:	bf00      	nop
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40012c00 	.word	0x40012c00
 800347c:	40000400 	.word	0x40000400
 8003480:	40014000 	.word	0x40014000
 8003484:	40014400 	.word	0x40014400
 8003488:	40014800 	.word	0x40014800

0800348c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	f023 0201 	bic.w	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f023 030a 	bic.w	r3, r3, #10
 80034c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	621a      	str	r2, [r3, #32]
}
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b087      	sub	sp, #28
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f023 0210 	bic.w	r2, r3, #16
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003514:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	031b      	lsls	r3, r3, #12
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003526:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	621a      	str	r2, [r3, #32]
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800354a:	b480      	push	{r7}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003560:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	f043 0307 	orr.w	r3, r3, #7
 800356c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	609a      	str	r2, [r3, #8]
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800359a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	021a      	lsls	r2, r3, #8
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	609a      	str	r2, [r3, #8]
}
 80035b4:	bf00      	nop
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e054      	b.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a24      	ldr	r2, [pc, #144]	@ (8003690 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d108      	bne.n	8003614 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003608:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800361a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a17      	ldr	r2, [pc, #92]	@ (8003690 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00e      	beq.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003640:	d009      	beq.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a13      	ldr	r2, [pc, #76]	@ (8003694 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d004      	beq.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a11      	ldr	r2, [pc, #68]	@ (8003698 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d10c      	bne.n	8003670 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800365c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	4313      	orrs	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40000400 	.word	0x40000400
 8003698:	40014000 	.word	0x40014000

0800369c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e040      	b.n	8003730 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fd fc4c 	bl	8000f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2224      	movs	r2, #36	@ 0x24
 80036c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f9e8 	bl	8003ab8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f8af 	bl	800384c <UART_SetConfig>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e01b      	b.n	8003730 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003706:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003716:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fa67 	bl	8003bfc <UART_CheckIdleState>
 800372e:	4603      	mov	r3, r0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	@ 0x28
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	4613      	mov	r3, r2
 8003746:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800374c:	2b20      	cmp	r3, #32
 800374e:	d177      	bne.n	8003840 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <HAL_UART_Transmit+0x24>
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e070      	b.n	8003842 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2221      	movs	r2, #33	@ 0x21
 800376c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800376e:	f7fd fcff 	bl	8001170 <HAL_GetTick>
 8003772:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	88fa      	ldrh	r2, [r7, #6]
 8003778:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	88fa      	ldrh	r2, [r7, #6]
 8003780:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800378c:	d108      	bne.n	80037a0 <HAL_UART_Transmit+0x68>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d104      	bne.n	80037a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003796:	2300      	movs	r3, #0
 8003798:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	e003      	b.n	80037a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037a8:	e02f      	b.n	800380a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2200      	movs	r2, #0
 80037b2:	2180      	movs	r1, #128	@ 0x80
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 fac9 	bl	8003d4c <UART_WaitOnFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d004      	beq.n	80037ca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e03b      	b.n	8003842 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10b      	bne.n	80037e8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	881a      	ldrh	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037dc:	b292      	uxth	r2, r2
 80037de:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	3302      	adds	r3, #2
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	e007      	b.n	80037f8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	781a      	ldrb	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3301      	adds	r3, #1
 80037f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1c9      	bne.n	80037aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2200      	movs	r2, #0
 800381e:	2140      	movs	r1, #64	@ 0x40
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fa93 	bl	8003d4c <UART_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d004      	beq.n	8003836 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e005      	b.n	8003842 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2220      	movs	r2, #32
 800383a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800383c:	2300      	movs	r3, #0
 800383e:	e000      	b.n	8003842 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003840:	2302      	movs	r3, #2
  }
}
 8003842:	4618      	mov	r0, r3
 8003844:	3720      	adds	r7, #32
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	4b8a      	ldr	r3, [pc, #552]	@ (8003aa0 <UART_SetConfig+0x254>)
 8003878:	4013      	ands	r3, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	6979      	ldr	r1, [r7, #20]
 8003880:	430b      	orrs	r3, r1
 8003882:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a78      	ldr	r2, [pc, #480]	@ (8003aa4 <UART_SetConfig+0x258>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d120      	bne.n	800390a <UART_SetConfig+0xbe>
 80038c8:	4b77      	ldr	r3, [pc, #476]	@ (8003aa8 <UART_SetConfig+0x25c>)
 80038ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d817      	bhi.n	8003904 <UART_SetConfig+0xb8>
 80038d4:	a201      	add	r2, pc, #4	@ (adr r2, 80038dc <UART_SetConfig+0x90>)
 80038d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038da:	bf00      	nop
 80038dc:	080038ed 	.word	0x080038ed
 80038e0:	080038f9 	.word	0x080038f9
 80038e4:	080038ff 	.word	0x080038ff
 80038e8:	080038f3 	.word	0x080038f3
 80038ec:	2300      	movs	r3, #0
 80038ee:	77fb      	strb	r3, [r7, #31]
 80038f0:	e01d      	b.n	800392e <UART_SetConfig+0xe2>
 80038f2:	2302      	movs	r3, #2
 80038f4:	77fb      	strb	r3, [r7, #31]
 80038f6:	e01a      	b.n	800392e <UART_SetConfig+0xe2>
 80038f8:	2304      	movs	r3, #4
 80038fa:	77fb      	strb	r3, [r7, #31]
 80038fc:	e017      	b.n	800392e <UART_SetConfig+0xe2>
 80038fe:	2308      	movs	r3, #8
 8003900:	77fb      	strb	r3, [r7, #31]
 8003902:	e014      	b.n	800392e <UART_SetConfig+0xe2>
 8003904:	2310      	movs	r3, #16
 8003906:	77fb      	strb	r3, [r7, #31]
 8003908:	e011      	b.n	800392e <UART_SetConfig+0xe2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a67      	ldr	r2, [pc, #412]	@ (8003aac <UART_SetConfig+0x260>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d102      	bne.n	800391a <UART_SetConfig+0xce>
 8003914:	2300      	movs	r3, #0
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e009      	b.n	800392e <UART_SetConfig+0xe2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a64      	ldr	r2, [pc, #400]	@ (8003ab0 <UART_SetConfig+0x264>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d102      	bne.n	800392a <UART_SetConfig+0xde>
 8003924:	2300      	movs	r3, #0
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e001      	b.n	800392e <UART_SetConfig+0xe2>
 800392a:	2310      	movs	r3, #16
 800392c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003936:	d15a      	bne.n	80039ee <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003938:	7ffb      	ldrb	r3, [r7, #31]
 800393a:	2b08      	cmp	r3, #8
 800393c:	d827      	bhi.n	800398e <UART_SetConfig+0x142>
 800393e:	a201      	add	r2, pc, #4	@ (adr r2, 8003944 <UART_SetConfig+0xf8>)
 8003940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003944:	08003969 	.word	0x08003969
 8003948:	08003971 	.word	0x08003971
 800394c:	08003979 	.word	0x08003979
 8003950:	0800398f 	.word	0x0800398f
 8003954:	0800397f 	.word	0x0800397f
 8003958:	0800398f 	.word	0x0800398f
 800395c:	0800398f 	.word	0x0800398f
 8003960:	0800398f 	.word	0x0800398f
 8003964:	08003987 	.word	0x08003987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003968:	f7ff fa06 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 800396c:	61b8      	str	r0, [r7, #24]
        break;
 800396e:	e013      	b.n	8003998 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003970:	f7ff fa24 	bl	8002dbc <HAL_RCC_GetPCLK2Freq>
 8003974:	61b8      	str	r0, [r7, #24]
        break;
 8003976:	e00f      	b.n	8003998 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003978:	4b4e      	ldr	r3, [pc, #312]	@ (8003ab4 <UART_SetConfig+0x268>)
 800397a:	61bb      	str	r3, [r7, #24]
        break;
 800397c:	e00c      	b.n	8003998 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397e:	f7ff f99b 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8003982:	61b8      	str	r0, [r7, #24]
        break;
 8003984:	e008      	b.n	8003998 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800398a:	61bb      	str	r3, [r7, #24]
        break;
 800398c:	e004      	b.n	8003998 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	77bb      	strb	r3, [r7, #30]
        break;
 8003996:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d074      	beq.n	8003a88 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	005a      	lsls	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	085b      	lsrs	r3, r3, #1
 80039a8:	441a      	add	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b0f      	cmp	r3, #15
 80039b8:	d916      	bls.n	80039e8 <UART_SetConfig+0x19c>
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039c0:	d212      	bcs.n	80039e8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f023 030f 	bic.w	r3, r3, #15
 80039ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	085b      	lsrs	r3, r3, #1
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	89fb      	ldrh	r3, [r7, #14]
 80039da:	4313      	orrs	r3, r2
 80039dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	89fa      	ldrh	r2, [r7, #14]
 80039e4:	60da      	str	r2, [r3, #12]
 80039e6:	e04f      	b.n	8003a88 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	77bb      	strb	r3, [r7, #30]
 80039ec:	e04c      	b.n	8003a88 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039ee:	7ffb      	ldrb	r3, [r7, #31]
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d828      	bhi.n	8003a46 <UART_SetConfig+0x1fa>
 80039f4:	a201      	add	r2, pc, #4	@ (adr r2, 80039fc <UART_SetConfig+0x1b0>)
 80039f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fa:	bf00      	nop
 80039fc:	08003a21 	.word	0x08003a21
 8003a00:	08003a29 	.word	0x08003a29
 8003a04:	08003a31 	.word	0x08003a31
 8003a08:	08003a47 	.word	0x08003a47
 8003a0c:	08003a37 	.word	0x08003a37
 8003a10:	08003a47 	.word	0x08003a47
 8003a14:	08003a47 	.word	0x08003a47
 8003a18:	08003a47 	.word	0x08003a47
 8003a1c:	08003a3f 	.word	0x08003a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a20:	f7ff f9aa 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 8003a24:	61b8      	str	r0, [r7, #24]
        break;
 8003a26:	e013      	b.n	8003a50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a28:	f7ff f9c8 	bl	8002dbc <HAL_RCC_GetPCLK2Freq>
 8003a2c:	61b8      	str	r0, [r7, #24]
        break;
 8003a2e:	e00f      	b.n	8003a50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a30:	4b20      	ldr	r3, [pc, #128]	@ (8003ab4 <UART_SetConfig+0x268>)
 8003a32:	61bb      	str	r3, [r7, #24]
        break;
 8003a34:	e00c      	b.n	8003a50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a36:	f7ff f93f 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8003a3a:	61b8      	str	r0, [r7, #24]
        break;
 8003a3c:	e008      	b.n	8003a50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a42:	61bb      	str	r3, [r7, #24]
        break;
 8003a44:	e004      	b.n	8003a50 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	77bb      	strb	r3, [r7, #30]
        break;
 8003a4e:	bf00      	nop
    }

    if (pclk != 0U)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d018      	beq.n	8003a88 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	085a      	lsrs	r2, r3, #1
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	441a      	add	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b0f      	cmp	r3, #15
 8003a6e:	d909      	bls.n	8003a84 <UART_SetConfig+0x238>
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a76:	d205      	bcs.n	8003a84 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	e001      	b.n	8003a88 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a94:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3720      	adds	r7, #32
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	efff69f3 	.word	0xefff69f3
 8003aa4:	40013800 	.word	0x40013800
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	40004400 	.word	0x40004400
 8003ab0:	40004800 	.word	0x40004800
 8003ab4:	007a1200 	.word	0x007a1200

08003ab8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01a      	beq.n	8003bce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bb6:	d10a      	bne.n	8003bce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]
  }
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b098      	sub	sp, #96	@ 0x60
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c0c:	f7fd fab0 	bl	8001170 <HAL_GetTick>
 8003c10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d12e      	bne.n	8003c7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f88c 	bl	8003d4c <UART_WaitOnFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d021      	beq.n	8003c7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c58:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c5a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c60:	e841 2300 	strex	r3, r2, [r1]
 8003c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e6      	bne.n	8003c3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e062      	b.n	8003d44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d149      	bne.n	8003d20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c94:	2200      	movs	r2, #0
 8003c96:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f856 	bl	8003d4c <UART_WaitOnFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d03c      	beq.n	8003d20 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	623b      	str	r3, [r7, #32]
   return(result);
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e6      	bne.n	8003ca6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3308      	adds	r3, #8
 8003cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	e853 3f00 	ldrex	r3, [r3]
 8003ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cf8:	61fa      	str	r2, [r7, #28]
 8003cfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfc:	69b9      	ldr	r1, [r7, #24]
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	e841 2300 	strex	r3, r2, [r1]
 8003d04:	617b      	str	r3, [r7, #20]
   return(result);
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e5      	bne.n	8003cd8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e011      	b.n	8003d44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3758      	adds	r7, #88	@ 0x58
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5c:	e04f      	b.n	8003dfe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d64:	d04b      	beq.n	8003dfe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d66:	f7fd fa03 	bl	8001170 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d302      	bcc.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e04e      	b.n	8003e1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d037      	beq.n	8003dfe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b80      	cmp	r3, #128	@ 0x80
 8003d92:	d034      	beq.n	8003dfe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b40      	cmp	r3, #64	@ 0x40
 8003d98:	d031      	beq.n	8003dfe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d110      	bne.n	8003dca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2208      	movs	r2, #8
 8003dae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 f838 	bl	8003e26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2208      	movs	r2, #8
 8003dba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e029      	b.n	8003e1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dd8:	d111      	bne.n	8003dfe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003de2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f81e 	bl	8003e26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e00f      	b.n	8003e1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4013      	ands	r3, r2
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	bf0c      	ite	eq
 8003e0e:	2301      	moveq	r3, #1
 8003e10:	2300      	movne	r3, #0
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d0a0      	beq.n	8003d5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b095      	sub	sp, #84	@ 0x54
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e36:	e853 3f00 	ldrex	r3, [r3]
 8003e3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e54:	e841 2300 	strex	r3, r2, [r1]
 8003e58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e6      	bne.n	8003e2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3308      	adds	r3, #8
 8003e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f023 0301 	bic.w	r3, r3, #1
 8003e76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3308      	adds	r3, #8
 8003e7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e5      	bne.n	8003e60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d118      	bne.n	8003ece <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	e853 3f00 	ldrex	r3, [r3]
 8003ea8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f023 0310 	bic.w	r3, r3, #16
 8003eb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eba:	61bb      	str	r3, [r7, #24]
 8003ebc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebe:	6979      	ldr	r1, [r7, #20]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	e841 2300 	strex	r3, r2, [r1]
 8003ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1e6      	bne.n	8003e9c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ee2:	bf00      	nop
 8003ee4:	3754      	adds	r7, #84	@ 0x54
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <memset>:
 8003eee:	4402      	add	r2, r0
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d100      	bne.n	8003ef8 <memset+0xa>
 8003ef6:	4770      	bx	lr
 8003ef8:	f803 1b01 	strb.w	r1, [r3], #1
 8003efc:	e7f9      	b.n	8003ef2 <memset+0x4>
	...

08003f00 <__libc_init_array>:
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	4d0d      	ldr	r5, [pc, #52]	@ (8003f38 <__libc_init_array+0x38>)
 8003f04:	4c0d      	ldr	r4, [pc, #52]	@ (8003f3c <__libc_init_array+0x3c>)
 8003f06:	1b64      	subs	r4, r4, r5
 8003f08:	10a4      	asrs	r4, r4, #2
 8003f0a:	2600      	movs	r6, #0
 8003f0c:	42a6      	cmp	r6, r4
 8003f0e:	d109      	bne.n	8003f24 <__libc_init_array+0x24>
 8003f10:	4d0b      	ldr	r5, [pc, #44]	@ (8003f40 <__libc_init_array+0x40>)
 8003f12:	4c0c      	ldr	r4, [pc, #48]	@ (8003f44 <__libc_init_array+0x44>)
 8003f14:	f000 f818 	bl	8003f48 <_init>
 8003f18:	1b64      	subs	r4, r4, r5
 8003f1a:	10a4      	asrs	r4, r4, #2
 8003f1c:	2600      	movs	r6, #0
 8003f1e:	42a6      	cmp	r6, r4
 8003f20:	d105      	bne.n	8003f2e <__libc_init_array+0x2e>
 8003f22:	bd70      	pop	{r4, r5, r6, pc}
 8003f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f28:	4798      	blx	r3
 8003f2a:	3601      	adds	r6, #1
 8003f2c:	e7ee      	b.n	8003f0c <__libc_init_array+0xc>
 8003f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f32:	4798      	blx	r3
 8003f34:	3601      	adds	r6, #1
 8003f36:	e7f2      	b.n	8003f1e <__libc_init_array+0x1e>
 8003f38:	0800407c 	.word	0x0800407c
 8003f3c:	0800407c 	.word	0x0800407c
 8003f40:	0800407c 	.word	0x0800407c
 8003f44:	08004080 	.word	0x08004080

08003f48 <_init>:
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4a:	bf00      	nop
 8003f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4e:	bc08      	pop	{r3}
 8003f50:	469e      	mov	lr, r3
 8003f52:	4770      	bx	lr

08003f54 <_fini>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	bf00      	nop
 8003f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5a:	bc08      	pop	{r3}
 8003f5c:	469e      	mov	lr, r3
 8003f5e:	4770      	bx	lr
